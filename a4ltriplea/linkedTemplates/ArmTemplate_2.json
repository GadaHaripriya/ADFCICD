{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "a4ltriplea"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ds_raw_triplea')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Triplea_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"source_folder": {
						"type": "String"
					},
					"filetype": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat(dataset().source_folder,'/',substring(utcnow(),0,4),'/',substring(utcnow(),5,2),'/',dataset().filetype,'/')",
							"type": "Expression"
						},
						"fileSystem": "rawtriplea"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sinkdata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sinktriplea",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Customer1/2023/May/RejectionsLevel1",
						"fileSystem": "sourceforrejectedfiles"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sinkdataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sourcefiles",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Customer1/2023/May/RejectionsLevel1",
						"fileSystem": "sourceforrejectedfiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_source_triplea_adls')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Triplea_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"foldername": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().foldername",
							"type": "Expression"
						},
						"fileSystem": "sourcesharepoint"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sourceallformatfiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sourcefolder",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "customer1order.csv",
						"folderPath": "customer1",
						"fileSystem": "sourcedata"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sourcedata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sourceforrejectedfiles",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "customer1order.csv",
						"folderPath": "Customer1",
						"fileSystem": "sourcefiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_Triplea')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_a4ltriplea",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Control_table_TripleA"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/getdatalake')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Triplea_adls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "sourceforrejectedfiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "customer_name",
						"type": "String"
					},
					{
						"name": "order_number",
						"type": "String"
					},
					{
						"name": "item_number",
						"type": "String"
					},
					{
						"name": "reference",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/JsonToTable_binderkontraktjson-type42')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This dataflow takes the output from Form Recognizer and extracts the table information to a storage sink.\nThis specifically works with the Form Recognizer Layout API. You can also save the transformations as a flowlet if you would like to reuse the logic in other dataflows. ",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "flatten2"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Filename1 as string",
						"}",
						"source(output(",
						"          body as (analyzeResult as (apiVersion as date, content as string, documents as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, docType as string, fields as ({Billing Information} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Contact Person} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Customer name} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), Email as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), FMC_table as (confidence as boolean, type as string, valueArray as (confidence as boolean, type as string, valueObject as ({Delivery Date} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), Item as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as short, spans as (length as short, offset as short)[], type as string, valueString as short), {Material Number / Description} as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Net Amount} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), Qty as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), UOM as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Unit Price/ Cur} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string)))[]), {Information Email} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Information- Date} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Information- Terms of Payment} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Purchase Order} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as long, spans as (length as short, offset as short)[], type as string, valueString as long), {Ship To/ Delivery Address} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Sub Total} as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Total Amount} as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Vendor Address} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Vendor Name} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Vendor Number} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as integer, spans as (length as short, offset as short)[], type as string, valueString as integer), {Vendor Telephone} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as long, spans as (length as short, offset as short)[], type as string, valueString as long), {Vendor VAT Number} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string)), spans as (length as short, offset as boolean)[])[], modelId as string, pages as (angle as boolean, height as short, kind as string, lines as (content as string, polygon as double[], spans as (length as short, offset as short)[])[], pageNumber as short, spans as (length as short, offset as short)[], unit as string, width as double, words as (confidence as double, content as string, polygon as double[], span as (length as short, offset as short))[])[], stringIndexType as string, styles as string[], tables as (boundingRegions as (pageNumber as short, polygon as double[])[], cells as (boundingRegions as (pageNumber as short, polygon as double[])[], columnIndex as short, content as string, kind as string, rowIndex as short, rowSpan as short, spans as (length as short, offset as short)[])[], columnCount as short, rowCount as short, spans as (length as short, offset as short)[])[]), createdDateTime as timestamp, lastUpdatedDateTime as timestamp, status as string),",
						"          headers as ({Content-Length} as integer, {Content-Type} as string, Date as string, {Strict-Transport-Security} as string, {apim-request-id} as string, {x-content-type-options} as string, {x-envoy-upstream-service-time} as short, {x-ms-region} as string)",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     format: 'json',",
						"     fileSystem: 'fmcpdf',",
						"     folderPath: 'STAGE',",
						"     fileName: 'jsonv3.0.json',",
						"     documentForm: 'singleDocument',",
						"     partitionBy('hash', 1)) ~> source1",
						"source(output(",
						"          body as (analyzeResult as (apiVersion as date, content as string, documents as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, docType as string, fields as ({Billing Information} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Contact Person} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Customer name} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), Email as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), FMC_table as (confidence as boolean, type as string, valueArray as (confidence as boolean, type as string, valueObject as ({Delivery Date} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), Item as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as short, spans as (length as short, offset as short)[], type as string, valueString as short), {Material Number / Description} as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Net Amount} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), Qty as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), UOM as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Unit Price/ Cur} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string)))[]), {Information Email} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Information- Date} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Information- Terms of Payment} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Purchase Order} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as long, spans as (length as short, offset as short)[], type as string, valueString as long), {Ship To/ Delivery Address} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Sub Total} as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Total Amount} as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Vendor Address} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Vendor Name} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Vendor Number} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as integer, spans as (length as short, offset as short)[], type as string, valueString as integer), {Vendor Telephone} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as long, spans as (length as short, offset as short)[], type as string, valueString as long), {Vendor VAT Number} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string)), spans as (length as short, offset as boolean)[])[], modelId as string, pages as (angle as boolean, height as short, kind as string, lines as (content as string, polygon as double[], spans as (length as short, offset as short)[])[], pageNumber as short, spans as (length as short, offset as short)[], unit as string, width as double, words as (confidence as double, content as string, polygon as double[], span as (length as short, offset as short))[])[], stringIndexType as string, styles as string[], tables as (boundingRegions as (pageNumber as short, polygon as double[])[], cells as (boundingRegions as (pageNumber as short, polygon as double[])[], columnIndex as short, content as string, kind as string, rowIndex as short, rowSpan as short, spans as (length as short, offset as short)[])[], columnCount as short, rowCount as short, spans as (length as short, offset as short)[])[]), createdDateTime as timestamp, lastUpdatedDateTime as timestamp, status as string),",
						"          headers as ({Content-Length} as integer, {Content-Type} as string, Date as string, {Strict-Transport-Security} as string, {apim-request-id} as string, {x-content-type-options} as string, {x-envoy-upstream-service-time} as short, {x-ms-region} as string)",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'json',",
						"     fileSystem: 'fmcpdf',",
						"     folderPath: 'STAGE',",
						"     fileName: 'jsonv3.0.json',",
						"     documentForm: 'documentPerLine') ~> source2",
						"source1 foldDown(unroll(body.analyzeResult.documents),",
						"     mapColumn(",
						"          {Billing Information} = body.analyzeResult.documents.fields.{Billing Information}.content,",
						"          {Contact Person} = body.analyzeResult.documents.fields.{Contact Person}.content,",
						"          {Customer Name} = body.analyzeResult.documents.fields.{Customer name}.content,",
						"          Email = body.analyzeResult.documents.fields.Email.content,",
						"          {Information Email} = body.analyzeResult.documents.fields.{Information Email}.content,",
						"          {Information Date} = body.analyzeResult.documents.fields.{Information- Date}.content,",
						"          {Information-Terms of Payment} = body.analyzeResult.documents.fields.{Information- Terms of Payment}.content,",
						"          {Purchase Order} = body.analyzeResult.documents.fields.{Purchase Order}.content,",
						"          {Ship To/ Delivery Addressntent} = body.analyzeResult.documents.fields.{Ship To/ Delivery Address}.content,",
						"          {Sub Total} = body.analyzeResult.documents.fields.{Sub Total}.content,",
						"          {Total Amount} = body.analyzeResult.documents.fields.{Total Amount}.content,",
						"          {Vendor Address} = body.analyzeResult.documents.fields.{Vendor Address}.content,",
						"          {Vendor Name} = body.analyzeResult.documents.fields.{Vendor Name}.content,",
						"          {Vendor Number} = body.analyzeResult.documents.fields.{Vendor Number}.content,",
						"          {Vendor Telephone} = body.analyzeResult.documents.fields.{Vendor Telephone}.content,",
						"          {Vendor VAT Number} = body.analyzeResult.documents.fields.{Vendor VAT Number}.content",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 derive(Lookup = 1,",
						"          File_name = $Filename1) ~> derivedColumn1",
						"source2 foldDown(unroll(body.analyzeResult.documents.fields.FMC_table.valueArray),",
						"     mapColumn(",
						"          Item = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.Item.content,",
						"          {Material Number / Description} = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.{Material Number / Description}.content,",
						"          Qty = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.Qty.content,",
						"          UOM = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.UOM.content,",
						"          {Unit Price/ Cur} = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.{Unit Price/ Cur}.content,",
						"          {Net Amount} = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.{Net Amount}.content,",
						"          {Delivery Date} = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.{Delivery Date}.content",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten2",
						"flatten2 derive(Lookup = 1) ~> derivedColumn2",
						"derivedColumn2, derivedColumn1 lookup(derivedColumn2@Lookup == derivedColumn1@Lookup,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 select(mapColumn(",
						"          Item,",
						"          {Material Number / Description},",
						"          Qty,",
						"          UOM,",
						"          {Unit Price/ Cur},",
						"          {Net Amount},",
						"          {Delivery Date},",
						"          {Billing Information},",
						"          {Contact Person},",
						"          {Customer Name},",
						"          Email,",
						"          {Information Email},",
						"          {Information Date},",
						"          {Information-Terms of Payment},",
						"          {Purchase Order},",
						"          {Ship To/ Delivery Addressntent},",
						"          {Sub Total},",
						"          {Total Amount},",
						"          {Vendor Address},",
						"          {Vendor Name},",
						"          {Vendor Number},",
						"          {Vendor Telephone},",
						"          {Vendor VAT Number},",
						"          Filename = File_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'fmcpdf',",
						"     folderPath: 'PROCESSED',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/JsonToTable_test_1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This dataflow takes the output from Form Recognizer and extracts the table information to a storage sink.\nThis specifically works with the Form Recognizer Layout API. You can also save the transformations as a flowlet if you would like to reuse the logic in other dataflows. ",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_source_triplea",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_source_triplea",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						},
						{
							"linkedService": {
								"referenceName": "ls_source_triplea",
								"type": "LinkedServiceReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "flatten2"
						},
						{
							"name": "filter1"
						},
						{
							"name": "flatten3"
						},
						{
							"name": "filter2"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "select1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "select2"
						},
						{
							"name": "pivot1"
						},
						{
							"name": "filter3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          body as (analyzeResult as (apiVersion as date, content as string, documents as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as boolean, docType as string, fields as (BillingAddress as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueAddress as (city as string, houseNumber as boolean, postalCode as short, road as string, streetAddress as string)), BillingAddressRecipient as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), CustomerAddress as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueAddress as (city as string, houseNumber as string, postalCode as short, road as string, streetAddress as string)), CustomerAddressRecipient as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), CustomerName as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), InvoiceDate as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueDate as date), InvoiceTotal as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueCurrency as (amount as double)), Items as (type as string, valueArray as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueObject as (Amount as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueCurrency as (amount as double)), Date as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueDate as date), Description as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), ProductCode as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as integer, spans as (length as short, offset as short)[], type as string, valueString as integer), Quantity as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as double, spans as (length as short, offset as short)[], type as string, valueNumber as integer), Unit as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), UnitPrice as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueCurrency as (amount as double))))[]), PaymentDetails as (type as string, valueArray as (confidence as double, type as string, valueObject as (IBAN as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), SWIFT as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string)))[]), PaymentTerm as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), ShippingAddress as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueAddress as (city as string, houseNumber as boolean, postalCode as string, road as string, streetAddress as string)), VendorAddress as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueAddress as (city as string, postalCode as string, streetAddress as string)), VendorAddressRecipient as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), VendorName as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), VendorTaxId as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string)), spans as (length as short, offset as boolean)[])[], keyValuePairs as (confidence as double, key as (boundingRegions as (pageNumber as short, polygon as double[])[], content as string, spans as (length as short, offset as short)[]), value as (boundingRegions as (pageNumber as short, polygon as double[])[], content as string, spans as (length as short, offset as short)[]))[], modelId as string, pages as (angle as double, height as double, kind as string, lines as (content as string, polygon as double[], spans as (length as short, offset as short)[])[], pageNumber as short, selectionMarks as (confidence as double, polygon as double[], span as (length as short, offset as short), state as string)[], spans as (length as short, offset as short)[], unit as string, width as double, words as (confidence as double, content as string, polygon as double[], span as (length as short, offset as short))[])[], paragraphs as (boundingRegions as (pageNumber as short, polygon as double[])[], content as string, role as string, spans as (length as short, offset as short)[])[], stringIndexType as string, styles as (confidence as boolean, isHandwritten as boolean, spans as (length as boolean, offset as short)[])[], tables as (boundingRegions as (pageNumber as short, polygon as double[])[], cells as (boundingRegions as (pageNumber as short, polygon as double[])[], columnIndex as short, columnSpan as short, content as string, kind as string, rowIndex as short, spans as (length as short, offset as short)[])[], columnCount as short, rowCount as short, spans as (length as short, offset as short)[])[]), createdDateTime as timestamp, lastUpdatedDateTime as timestamp, status as string),",
						"          headers as ({Content-Length} as integer, {Content-Type} as string, Date as string, {Strict-Transport-Security} as string, {apim-request-id} as string, {x-content-type-options} as string, {x-envoy-upstream-service-time} as short, {x-ms-region} as string)",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     format: 'json',",
						"     fileSystem: 'pdfextraction',",
						"     folderPath: 'Stage/PDF_Order',",
						"     fileName: 'jsonv3.0.json',",
						"     documentForm: 'singleDocument',",
						"     partitionBy('hash', 1)) ~> source1",
						"source1 foldDown(unroll(body.analyzeResult.tables),",
						"     mapColumn(",
						"          cells = body.analyzeResult.tables.cells,",
						"          columns = body.analyzeResult.tables.columnCount,",
						"          rows = body.analyzeResult.tables.rowCount",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"derivedColumn1 aggregate(groupBy(TabNum = tablenumber,",
						"          isHeader,",
						"          rowIndex),",
						"     text = replace(trim(trim(toString(collect(content)), '['),']'),'\"',''),",
						"     partitionBy('hash', 1)) ~> aggregate1",
						"surrogateKey1 foldDown(unroll(cells),",
						"     mapColumn(",
						"          tablenumber = page,",
						"          columnIndex = cells.columnIndex,",
						"          isHeader = cells.kind,",
						"          rowIndex = cells.rowIndex,",
						"          content = cells.content",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten2",
						"flatten1 filter(not(isNull(cells)),",
						"     partitionBy('hash', 1)) ~> filter1",
						"source1 foldDown(unroll(body.analyzeResult.keyValuePairs),",
						"     mapColumn(",
						"          Key = body.analyzeResult.keyValuePairs.key.content,",
						"          Value = body.analyzeResult.keyValuePairs.value.content",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 filter(Key=='Kontrakt'||",
						"Key=='Anlieferung'||",
						"Key=='Datum') ~> filter2",
						"filter1 keyGenerate(output(page as long),",
						"     startAt: 1L,",
						"     stepValue: 1L,",
						"     partitionBy('hash', 1)) ~> surrogateKey1",
						"filter3 select(mapColumn(",
						"          text",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"aggregate1 sort(asc(rowIndex, true),",
						"     partitionBy('hash', 1)) ~> sort1",
						"flatten2 derive(content = concat(\"'\",content,\"'\")) ~> derivedColumn1",
						"filter2 aggregate(groupBy(Key,",
						"          Value),",
						"     count = count(Key),",
						"     partitionBy('hash', 1)) ~> aggregate2",
						"aggregate2 select(mapColumn(",
						"          Key,",
						"          Value",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 pivot(pivotBy(Key),",
						"     {} = first(Value),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> pivot1",
						"sort1 filter(not((TabNum!=1)&&rowIndex==0)) ~> filter3",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'pdfextraction',",
						"     folderPath: 'Processed/PDF_Order/StageforTableAndKeyValues',",
						"     rowDelimiter: '',",
						"     columnDelimiter: '',",
						"     escapeChar: '',",
						"     quoteChar: '',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:['Table.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          text",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1",
						"pivot1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'pdfextraction',",
						"     folderPath: 'Processed/PDF_Order/StageforTableAndKeyValues',",
						"     columnDelimiter: ',',",
						"     escapeChar: '',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['keyvalues.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pageno_JsonToTable_dmkfile-type21_copy11')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This dataflow takes the output from Form Recognizer and extracts the table information to a storage sink.\nThis specifically works with the Form Recognizer Layout API. You can also save the transformations as a flowlet if you would like to reuse the logic in other dataflows. ",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          body as (analyzeResult as (apiVersion as date, content as string, documents as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, docType as string, fields as (Datum as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as integer)[], type as string, valueString as string), Dmk_table as (confidence as boolean, type as string, valueArray as (confidence as boolean, type as string, valueObject as (Format as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as integer)[], type as string, valueString as string), Material as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as boolean, content as integer, spans as (length as short, offset as integer)[], type as string, valueString as integer), Nettowert as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as integer)[], type as string, valueString as string), Pos as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as boolean, content as short, spans as (length as short, offset as integer)[], type as string, valueString as short), {Preis/Einh} as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as integer)[], type as string, valueString as string), Zielmenge as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as integer)[], type as string, valueString as string)))[]), Kontraktnummer as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as long, spans as (length as short, offset as integer)[], type as string, valueString as long)), spans as (length as integer, offset as boolean)[])[], modelId as string, pages as (angle as boolean, height as double, kind as string, lines as (content as string, polygon as double[], spans as (length as short, offset as integer)[])[], pageNumber as short, spans as (length as short, offset as integer)[], unit as string, width as double, words as (confidence as double, content as string, polygon as double[], span as (length as short, offset as integer))[])[], stringIndexType as string, styles as string[], tables as (boundingRegions as (pageNumber as short, polygon as double[])[], cells as (boundingRegions as (pageNumber as short, polygon as double[])[], columnIndex as short, columnSpan as short, content as string, kind as string, rowIndex as short, rowSpan as short, spans as (length as short, offset as integer)[])[], columnCount as short, rowCount as short, spans as (length as short, offset as integer)[])[]), createdDateTime as timestamp, lastUpdatedDateTime as timestamp, status as string),",
						"          headers as ({Content-Length} as integer, {Content-Type} as string, Date as string, {Strict-Transport-Security} as string, {apim-request-id} as string, {x-content-type-options} as string, {x-envoy-upstream-service-time} as short, {x-ms-region} as string)",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     format: 'json',",
						"     fileSystem: 'stage',",
						"     folderPath: 'DMK GROUP',",
						"     fileName: 'jsonv3.0.json',",
						"     documentForm: 'singleDocument',",
						"     partitionBy('hash', 1)) ~> source1",
						"source1 foldDown(unroll(body.analyzeResult.documents.fields.Dmk_table.valueArray),",
						"     mapColumn(",
						"          Pos = body.analyzeResult.documents.fields.Dmk_table.valueArray.valueObject.Pos.content,",
						"          Material = body.analyzeResult.documents.fields.Dmk_table.valueArray.valueObject.Material.content,",
						"          Zielmenge = body.analyzeResult.documents.fields.Dmk_table.valueArray.valueObject.Zielmenge.content,",
						"          {Preis/Einh.} = body.analyzeResult.documents.fields.Dmk_table.valueArray.valueObject.{Preis/Einh}.content,",
						"          Nettowert = body.analyzeResult.documents.fields.Dmk_table.valueArray.valueObject.Nettowert.content,",
						"          Format = body.analyzeResult.documents.fields.Dmk_table.valueArray.valueObject.Format.content,",
						"          Datum = body.analyzeResult.documents.fields.Datum.content,",
						"          Kontraktnummer = body.analyzeResult.documents.fields.Kontraktnummer.content,",
						"          PageNumber = body.analyzeResult.documents.fields.Dmk_table.valueArray.valueObject.Format.boundingRegions.pageNumber",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 derive(PageNumber = PageNumber[1]) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'processeda4lpdftocsv',",
						"     folderPath: 'DMK GROUP',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['Table.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     quoteAll: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sequential_csvToSQLdb_Type4_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Sequential-sasurl_extract_pdf_to_csv"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_sql_a4ltriplea",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"parameters{",
						"     CSV_FILENAME as string",
						"}",
						"source(output(",
						"          Item as short,",
						"          {Material Number / Description} as string,",
						"          Qty as string,",
						"          UOM as string,",
						"          {Unit Price/ Cur} as string,",
						"          {Net Amount} as string,",
						"          {Delivery Date} as string,",
						"          {Billing Information} as string,",
						"          {Contact Person} as string,",
						"          {Customer Name} as string,",
						"          Email as string,",
						"          {Information Email} as string,",
						"          {Information Date} as string,",
						"          {Information-Terms of Payment} as string,",
						"          {Purchase Order} as long,",
						"          {Ship To/ Delivery Addressntent} as string,",
						"          {Sub Total} as string,",
						"          {Total Amount} as string,",
						"          {Vendor Address} as string,",
						"          {Vendor Name} as string,",
						"          {Vendor Number} as integer,",
						"          {Vendor Telephone} as long,",
						"          {Vendor VAT Number} as string,",
						"          Filename as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'fmcpdf',",
						"     folderPath: 'PROCESSED',",
						"     fileName: ($CSV_FILENAME),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     multiLineRow: true) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Item as string,",
						"          {Material Number / Description} as string,",
						"          Qty as string,",
						"          UOM as string,",
						"          {Unit Price/ Cur} as string,",
						"          {Net Amount} as string,",
						"          {Delivery Date} as string,",
						"          {Billing Information} as string,",
						"          {Contact Person} as string,",
						"          {Customer Name} as string,",
						"          Email as string,",
						"          {Information Email} as string,",
						"          {Information Date} as string,",
						"          {Information-Terms of Payment} as string,",
						"          {Purchase Order} as string,",
						"          {Ship To/ Delivery Addressntent} as string,",
						"          {Sub Total} as string,",
						"          {Total Amount} as string,",
						"          {Vendor Address} as string,",
						"          {Vendor Name} as string,",
						"          {Vendor Number} as string,",
						"          {Vendor Telephone} as string,",
						"          {Vendor VAT Number} as string,",
						"          Filename as string",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'FMC_PurchaseOrder_4500130257',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Item,",
						"          {Material Number / Description},",
						"          Qty,",
						"          UOM,",
						"          {Unit Price/ Cur},",
						"          {Net Amount},",
						"          {Delivery Date},",
						"          {Billing Information},",
						"          {Contact Person},",
						"          {Customer Name},",
						"          Email,",
						"          {Information Email},",
						"          {Information Date},",
						"          {Information-Terms of Payment},",
						"          {Purchase Order},",
						"          {Ship To/ Delivery Addressntent},",
						"          {Sub Total},",
						"          {Total Amount},",
						"          {Vendor Address},",
						"          {Vendor Name},",
						"          {Vendor Number},",
						"          {Vendor Telephone},",
						"          {Vendor VAT Number},",
						"          Filename",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/csvToSQLdb_Type21')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_sql_a4ltriplea",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Pos as short,",
						"          Material as integer,",
						"          Zielmenge as string,",
						"          {Preis/Einh.} as string,",
						"          Nettowert as string,",
						"          Etikett as string,",
						"          Format as string,",
						"          Datum as string,",
						"          Kontraktnummer as long,",
						"          PageNumber as short",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'processeda4lpdftocsv',",
						"     folderPath: 'DMK GROUP',",
						"     fileName: 'Table.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     multiLineRow: true) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Pos.} as string,",
						"          Material as string,",
						"          Zielmenge as string,",
						"          {Preis/Einh.} as string,",
						"          Nettowert as string,",
						"          Etikett as string,",
						"          Format as string,",
						"          Kontraktnummer as string,",
						"          Datum as string,",
						"          PageNumber as string",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'Rahmenvertrag_DMK_GROUP',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          {Pos.} = Pos,",
						"          Material,",
						"          Zielmenge,",
						"          {Preis/Einh.},",
						"          Nettowert,",
						"          Format,",
						"          Kontraktnummer,",
						"          Datum,",
						"          PageNumber",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/csvToSQLdb_Type4')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_sql_a4ltriplea",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Item as short,",
						"          {Material Number / Description} as string,",
						"          Qty as string,",
						"          UOM as string,",
						"          {Unit Price/ Cur} as string,",
						"          {Net Amount} as string,",
						"          {Delivery Date} as string,",
						"          {Billing Information} as string,",
						"          {Contact Person} as string,",
						"          {Customer Name} as string,",
						"          Email as string,",
						"          {Information Email} as string,",
						"          {Information Date} as string,",
						"          {Information-Terms of Payment} as string,",
						"          {Purchase Order} as long,",
						"          {Ship To/ Delivery Addressntent} as string,",
						"          {Sub Total} as string,",
						"          {Total Amount} as string,",
						"          {Vendor Address} as string,",
						"          {Vendor Name} as string,",
						"          {Vendor Number} as integer,",
						"          {Vendor Telephone} as long,",
						"          {Vendor VAT Number} as string,",
						"          Filename as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'fmcpdf',",
						"     folderPath: 'PROCESSED',",
						"     fileName: 'part-merged.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     multiLineRow: true) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Item as string,",
						"          {Material Number / Description} as string,",
						"          Qty as string,",
						"          UOM as string,",
						"          {Unit Price/ Cur} as string,",
						"          {Net Amount} as string,",
						"          {Delivery Date} as string,",
						"          {Billing Information} as string,",
						"          {Contact Person} as string,",
						"          {Customer Name} as string,",
						"          Email as string,",
						"          {Information Email} as string,",
						"          {Information Date} as string,",
						"          {Information-Terms of Payment} as string,",
						"          {Purchase Order} as string,",
						"          {Ship To/ Delivery Addressntent} as string,",
						"          {Sub Total} as string,",
						"          {Total Amount} as string,",
						"          {Vendor Address} as string,",
						"          {Vendor Name} as string,",
						"          {Vendor Number} as string,",
						"          {Vendor Telephone} as string,",
						"          {Vendor VAT Number} as string,",
						"          Filename as string",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'FMC_PurchaseOrder_4500130257',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Item,",
						"          {Material Number / Description},",
						"          Qty,",
						"          UOM,",
						"          {Unit Price/ Cur},",
						"          {Net Amount},",
						"          {Delivery Date},",
						"          {Billing Information},",
						"          {Contact Person},",
						"          {Customer Name},",
						"          Email,",
						"          {Information Email},",
						"          {Information Date},",
						"          {Information-Terms of Payment},",
						"          {Purchase Order},",
						"          {Ship To/ Delivery Addressntent},",
						"          {Sub Total},",
						"          {Total Amount},",
						"          {Vendor Address},",
						"          {Vendor Name},",
						"          {Vendor Number},",
						"          {Vendor Telephone},",
						"          {Vendor VAT Number},",
						"          Filename",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_csvTosqldb')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_source_triplea",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_sql_a4ltriplea",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Pos as short,",
						"          Artikel as integer,",
						"          Bezeichnung as string,",
						"          Termin as string,",
						"          Menge as double,",
						"          ME as string,",
						"          Preis as string,",
						"          {G-Wert EUR} as string,",
						"          Anlieferung as string,",
						"          Kontrakt as integer",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'pdfextraction',",
						"     folderPath: 'Processed/PDF_Order/Finalcsv',",
						"     fileName: 'Table.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'PDF_ORDER',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_csvTosqldb1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_source_triplea",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_sql_a4ltriplea",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Pos as short,",
						"          Artikel as integer,",
						"          Bezeichnung as string,",
						"          Termin as string,",
						"          Menge as double,",
						"          ME as string,",
						"          Preis as string,",
						"          {G-Wert EUR} as string,",
						"          Anlieferung as string,",
						"          Kontrakt as integer",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'pdfextraction',",
						"     folderPath: 'Processed/PDF_Order/Finalcsv',",
						"     fileName: 'Table.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'PDF_ORDER',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/formRecognizer')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This dataflow takes the output from Form Recognizer and extracts the table information to a storage sink.\nThis specifically works with the Form Recognizer Layout API. You can also save the transformations as a flowlet if you would like to reuse the logic in other dataflows. ",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "RestService2",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_source_triplea",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "flatten2"
						},
						{
							"name": "filter1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "rank1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     OutputFolder as string",
						"}",
						"source(output(",
						"          body as (analyzeResult as (pageResults as (page as short, tables as (boundingBox as double[], cells as (boundingBox as double[], columnIndex as short, elements as string[], isHeader as boolean, rowIndex as short, text as string)[], columns as short, rows as short)[])[], readResults as (angle as boolean, height as short, lines as (appearance as (style as (confidence as double, name as string)), boundingBox as double[], text as string, words as (boundingBox as double[], confidence as double, text as string)[])[], page as short, unit as string, width as double)[], version as string), createdDateTime as timestamp, lastUpdatedDateTime as timestamp, status as string),",
						"          headers as [string,string]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     format: 'rest',",
						"     timeout: 30,",
						"     requestInterval: 0,",
						"     httpMethod: 'GET',",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> source1",
						"source1 foldDown(unroll(body.analyzeResult.pageResults.tables),",
						"     mapColumn(",
						"          page = body.analyzeResult.pageResults.page,",
						"          cells = body.analyzeResult.pageResults.tables.cells,",
						"          columns = body.analyzeResult.pageResults.tables.columns,",
						"          rows = body.analyzeResult.pageResults.tables.rows",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten2 aggregate(groupBy(TableNum,",
						"          rowIndex),",
						"     text = replace(trim(trim(toString(collect(text)), '['),']'),'\"','')) ~> aggregate1",
						"rank1 foldDown(unroll(cells),",
						"     mapColumn(",
						"          page,",
						"          TableNum,",
						"          columnIndex = cells.columnIndex,",
						"          isHeader = cells.isHeader,",
						"          rowIndex = cells.rowIndex,",
						"          text = cells.text",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten2",
						"flatten1 filter(not(isNull(cells))) ~> filter1",
						"aggregate1 aggregate(groupBy(tableNum = 'TableNumber'+toString(TableNum)),",
						"     text = replace(reduce(collect(text), '', #acc+#item+'\\n',#result),'\"','')) ~> aggregate2",
						"filter1 rank(asc(page, true),",
						"     asc(cells, true),",
						"     output(TableNum as long)) ~> rank1",
						"aggregate2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {_col0_} as string",
						"     ),",
						"     format: 'delimited',",
						"     fileSystem: ($OutputFolder),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     rowUrlColumn:'tableNum',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     quoteAll: true,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          {_col0_} = text",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sequential_JsonToTable_binderkontraktjson-type42_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This dataflow takes the output from Form Recognizer and extracts the table information to a storage sink.\nThis specifically works with the Form Recognizer Layout API. You can also save the transformations as a flowlet if you would like to reuse the logic in other dataflows. ",
				"folder": {
					"name": "Sequential-sasurl_extract_pdf_to_csv"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "flatten2"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Filename1 as string,",
						"     JSON_FILENAME as string,",
						"     CSV_FILENAME as string",
						"}",
						"source(output(",
						"          body as (analyzeResult as (apiVersion as date, content as string, documents as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, docType as string, fields as ({Billing Information} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Contact Person} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Customer name} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), Email as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), FMC_table as (confidence as boolean, type as string, valueArray as (confidence as boolean, type as string, valueObject as ({Delivery Date} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), Item as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as short, spans as (length as short, offset as short)[], type as string, valueString as short), {Material Number / Description} as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Net Amount} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), Qty as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), UOM as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Unit Price/ Cur} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string)))[]), {Information Email} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Information- Date} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Information- Terms of Payment} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Purchase Order} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as long, spans as (length as short, offset as short)[], type as string, valueString as long), {Ship To/ Delivery Address} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Sub Total} as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Total Amount} as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Vendor Address} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Vendor Name} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Vendor Number} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as integer, spans as (length as short, offset as short)[], type as string, valueString as integer), {Vendor Telephone} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as long, spans as (length as short, offset as short)[], type as string, valueString as long), {Vendor VAT Number} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string)), spans as (length as short, offset as boolean)[])[], modelId as string, pages as (angle as boolean, height as short, kind as string, lines as (content as string, polygon as double[], spans as (length as short, offset as short)[])[], pageNumber as short, spans as (length as short, offset as short)[], unit as string, width as double, words as (confidence as double, content as string, polygon as double[], span as (length as short, offset as short))[])[], stringIndexType as string, styles as string[], tables as (boundingRegions as (pageNumber as short, polygon as double[])[], cells as (boundingRegions as (pageNumber as short, polygon as double[])[], columnIndex as short, content as string, kind as string, rowIndex as short, rowSpan as short, spans as (length as short, offset as short)[])[], columnCount as short, rowCount as short, spans as (length as short, offset as short)[])[]), createdDateTime as timestamp, lastUpdatedDateTime as timestamp, status as string),",
						"          headers as ({Content-Length} as integer, {Content-Type} as string, Date as string, {Strict-Transport-Security} as string, {apim-request-id} as string, {x-content-type-options} as string, {x-envoy-upstream-service-time} as short, {x-ms-region} as string)",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     format: 'json',",
						"     fileSystem: 'fmcpdf',",
						"     folderPath: 'STAGE',",
						"     fileName: ($JSON_FILENAME),",
						"     documentForm: 'singleDocument',",
						"     partitionBy('hash', 1)) ~> source1",
						"source(output(",
						"          body as (analyzeResult as (apiVersion as date, content as string, documents as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, docType as string, fields as ({Billing Information} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Contact Person} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Customer name} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), Email as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), FMC_table as (confidence as boolean, type as string, valueArray as (confidence as boolean, type as string, valueObject as ({Delivery Date} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), Item as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as short, spans as (length as short, offset as short)[], type as string, valueString as short), {Material Number / Description} as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Net Amount} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), Qty as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), UOM as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Unit Price/ Cur} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string)))[]), {Information Email} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Information- Date} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Information- Terms of Payment} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Purchase Order} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as long, spans as (length as short, offset as short)[], type as string, valueString as long), {Ship To/ Delivery Address} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Sub Total} as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Total Amount} as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Vendor Address} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Vendor Name} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Vendor Number} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as integer, spans as (length as short, offset as short)[], type as string, valueString as integer), {Vendor Telephone} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as long, spans as (length as short, offset as short)[], type as string, valueString as long), {Vendor VAT Number} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string)), spans as (length as short, offset as boolean)[])[], modelId as string, pages as (angle as boolean, height as short, kind as string, lines as (content as string, polygon as double[], spans as (length as short, offset as short)[])[], pageNumber as short, spans as (length as short, offset as short)[], unit as string, width as double, words as (confidence as double, content as string, polygon as double[], span as (length as short, offset as short))[])[], stringIndexType as string, styles as string[], tables as (boundingRegions as (pageNumber as short, polygon as double[])[], cells as (boundingRegions as (pageNumber as short, polygon as double[])[], columnIndex as short, content as string, kind as string, rowIndex as short, rowSpan as short, spans as (length as short, offset as short)[])[], columnCount as short, rowCount as short, spans as (length as short, offset as short)[])[]), createdDateTime as timestamp, lastUpdatedDateTime as timestamp, status as string),",
						"          headers as ({Content-Length} as integer, {Content-Type} as string, Date as string, {Strict-Transport-Security} as string, {apim-request-id} as string, {x-content-type-options} as string, {x-envoy-upstream-service-time} as short, {x-ms-region} as string)",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'json',",
						"     fileSystem: 'fmcpdf',",
						"     folderPath: 'STAGE',",
						"     fileName: ($JSON_FILENAME),",
						"     documentForm: 'documentPerLine') ~> source2",
						"source1 foldDown(unroll(body.analyzeResult.documents),",
						"     mapColumn(",
						"          {Billing Information} = body.analyzeResult.documents.fields.{Billing Information}.content,",
						"          {Contact Person} = body.analyzeResult.documents.fields.{Contact Person}.content,",
						"          {Customer Name} = body.analyzeResult.documents.fields.{Customer name}.content,",
						"          Email = body.analyzeResult.documents.fields.Email.content,",
						"          {Information Email} = body.analyzeResult.documents.fields.{Information Email}.content,",
						"          {Information Date} = body.analyzeResult.documents.fields.{Information- Date}.content,",
						"          {Information-Terms of Payment} = body.analyzeResult.documents.fields.{Information- Terms of Payment}.content,",
						"          {Purchase Order} = body.analyzeResult.documents.fields.{Purchase Order}.content,",
						"          {Ship To/ Delivery Addressntent} = body.analyzeResult.documents.fields.{Ship To/ Delivery Address}.content,",
						"          {Sub Total} = body.analyzeResult.documents.fields.{Sub Total}.content,",
						"          {Total Amount} = body.analyzeResult.documents.fields.{Total Amount}.content,",
						"          {Vendor Address} = body.analyzeResult.documents.fields.{Vendor Address}.content,",
						"          {Vendor Name} = body.analyzeResult.documents.fields.{Vendor Name}.content,",
						"          {Vendor Number} = body.analyzeResult.documents.fields.{Vendor Number}.content,",
						"          {Vendor Telephone} = body.analyzeResult.documents.fields.{Vendor Telephone}.content,",
						"          {Vendor VAT Number} = body.analyzeResult.documents.fields.{Vendor VAT Number}.content",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 derive(Lookup = 1,",
						"          File_name = $Filename1) ~> derivedColumn1",
						"source2 foldDown(unroll(body.analyzeResult.documents.fields.FMC_table.valueArray),",
						"     mapColumn(",
						"          Item = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.Item.content,",
						"          {Material Number / Description} = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.{Material Number / Description}.content,",
						"          Qty = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.Qty.content,",
						"          UOM = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.UOM.content,",
						"          {Unit Price/ Cur} = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.{Unit Price/ Cur}.content,",
						"          {Net Amount} = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.{Net Amount}.content,",
						"          {Delivery Date} = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.{Delivery Date}.content",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten2",
						"flatten2 derive(Lookup = 1) ~> derivedColumn2",
						"derivedColumn2, derivedColumn1 lookup(derivedColumn2@Lookup == derivedColumn1@Lookup,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 select(mapColumn(",
						"          Item,",
						"          {Material Number / Description},",
						"          Qty,",
						"          UOM,",
						"          {Unit Price/ Cur},",
						"          {Net Amount},",
						"          {Delivery Date},",
						"          {Billing Information},",
						"          {Contact Person},",
						"          {Customer Name},",
						"          Email,",
						"          {Information Email},",
						"          {Information Date},",
						"          {Information-Terms of Payment},",
						"          {Purchase Order},",
						"          {Ship To/ Delivery Addressntent},",
						"          {Sub Total},",
						"          {Total Amount},",
						"          {Vendor Address},",
						"          {Vendor Name},",
						"          {Vendor Number},",
						"          {Vendor Telephone},",
						"          {Vendor VAT Number},",
						"          Filename = File_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'fmcpdf',",
						"     folderPath: 'PROCESSED',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:[($CSV_FILENAME)],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Graphicfile_child_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1_copy1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.lookupoutput",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get Metadata1_copy1",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "Set variable1_copy1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_c1_order_graphicfile",
											"type": "DatasetReference",
											"parameters": {
												"graphicfilename": {
													"value": "@variables('Graphicfilename')",
													"type": "Expression"
												},
												"GraphicFilepath": {
													"value": "@concat(pipeline().parameters.Customername,'/',substring(utcnow(),0,4),'/',substring(utcnow(),5,2),'/')",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "If Condition1_copy1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata1_copy1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@activity('Get Metadata1_copy1').output.exists",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Stored procedure2",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[Graphicfile_doesnotexists]",
													"storedProcedureParameters": {
														"Article": {
															"value": {
																"value": "@item().Artikel",
																"type": "Expression"
															},
															"type": "String"
														},
														"Customername": {
															"value": {
																"value": "@pipeline().parameters.Customername",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "ls_sql_a4ltriplea",
													"type": "LinkedServiceReference"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Stored procedure1",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[Graphicfile_exists]",
													"storedProcedureParameters": {
														"Article": {
															"value": {
																"value": "@item().Artikel",
																"type": "Expression"
															},
															"type": "String"
														},
														"Customername": {
															"value": {
																"value": "@pipeline().parameters.Customername",
																"type": "Expression"
															},
															"type": "String"
														},
														"Graphicfilepath": {
															"value": {
																"value": "@concat('graphicfiles','/',pipeline().parameters.Customername,'/',substring(utcnow(),0,4),'/',substring(utcnow(),5,2),'/',concat(item().Artikel,'_',pipeline().parameters.Customername,'.pdf'))",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "ls_sql_a4ltriplea",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								},
								{
									"name": "Set variable1_copy1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Graphicfilename",
										"value": {
											"value": "@concat(item().Artikel,'_',pipeline().parameters.Customername,'.pdf')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Customername": {
						"type": "string"
					},
					"lookupoutput": {
						"type": "object"
					}
				},
				"variables": {
					"Graphicfilename": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Graphicfile"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-01T11:46:23Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.getmetadatoutput",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"value": "@json(pipeline().parameters.Pdfmapping)",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "Json1",
											"type": "DatasetReference",
											"parameters": {
												"Customerfolder": {
													"value": "@pipeline().parameters.Customerfolder",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DelimitedText1",
											"type": "DatasetReference",
											"parameters": {
												"Customerfolder": {
													"value": "@pipeline().parameters.Customerfolder",
													"type": "Expression"
												},
												"Filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"getmetadatoutput": {
						"type": "array"
					},
					"Customerfolder": {
						"type": "string"
					},
					"Pdfmapping": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-26T12:01:26Z"
			},
			"dependsOn": []
		}
	]
}
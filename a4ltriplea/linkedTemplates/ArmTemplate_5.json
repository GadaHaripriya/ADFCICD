{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "a4ltriplea"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl_childpipeline_source_raw')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach file",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@array(pipeline().parameters.childitems)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Switch1",
									"description": "check the file type and switch and copy the data from source to raw accordingly",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@if(\n contains(string(item().name),'csv'),\n'csv',\nif(\n    contains(string(item().name),'pdf'),\n    'pdf',\n    'xml'\n    )\n  )",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "csv",
												"activities": [
													{
														"name": "Copy csv file",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobFSReadSettings",
																	"recursive": true,
																	"modifiedDatetimeStart": {
																		"value": "@addhours(string(utcnow()),-3)",
																		"type": "Expression"
																	},
																	"modifiedDatetimeEnd": {
																		"value": "@utcnow()",
																		"type": "Expression"
																	},
																	"wildcardFolderPath": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	},
																	"wildcardFileName": {
																		"value": "@item().name",
																		"type": "Expression"
																	},
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "DelimitedTextSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "DelimitedTextWriteSettings",
																	"quoteAllText": true,
																	"fileExtension": ".txt"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "ds_source_triplea_adls",
																"type": "DatasetReference",
																"parameters": {
																	"foldername": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "ds_raw_triplea",
																"type": "DatasetReference",
																"parameters": {
																	"source_folder": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	},
																	"filetype": "csv"
																}
															}
														]
													}
												]
											},
											{
												"value": "pdf",
												"activities": [
													{
														"name": "Copy data pdf",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobFSReadSettings",
																	"recursive": true,
																	"modifiedDatetimeStart": {
																		"value": "@addhours(string(utcnow()),-3)",
																		"type": "Expression"
																	},
																	"modifiedDatetimeEnd": {
																		"value": "@utcnow()",
																		"type": "Expression"
																	},
																	"wildcardFolderPath": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	},
																	"wildcardFileName": {
																		"value": "@item().name",
																		"type": "Expression"
																	},
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "DelimitedTextSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "DelimitedTextWriteSettings",
																	"quoteAllText": true,
																	"fileExtension": ".txt"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "ds_source_triplea_adls",
																"type": "DatasetReference",
																"parameters": {
																	"foldername": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "ds_raw_triplea",
																"type": "DatasetReference",
																"parameters": {
																	"source_folder": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	},
																	"filetype": "pdf"
																}
															}
														]
													}
												]
											},
											{
												"value": "xml",
												"activities": [
													{
														"name": "Copy data xml",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobFSReadSettings",
																	"recursive": true,
																	"modifiedDatetimeStart": {
																		"value": "@addhours(string(utcnow()),-3)",
																		"type": "Expression"
																	},
																	"modifiedDatetimeEnd": {
																		"value": "@utcnow()",
																		"type": "Expression"
																	},
																	"wildcardFolderPath": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	},
																	"wildcardFileName": {
																		"value": "@item().name",
																		"type": "Expression"
																	},
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "DelimitedTextSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "DelimitedTextWriteSettings",
																	"quoteAllText": true,
																	"fileExtension": ".txt"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "ds_source_triplea_adls",
																"type": "DatasetReference",
																"parameters": {
																	"foldername": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "ds_raw_triplea",
																"type": "DatasetReference",
																"parameters": {
																	"source_folder": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	},
																	"filetype": "xml"
																}
															}
														]
													}
												]
											}
										]
									}
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "filename",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"childitems": {
						"type": "string"
					},
					"source_folder_name": {
						"type": "string"
					}
				},
				"variables": {
					"filename": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Pipeline_source_to_raw"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-28T10:46:15Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_csv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": "2023-05-28T00:00:00Z",
									"wildcardFolderPath": {
										"value": "@pipeline().parameters.source_folder",
										"type": "Expression"
									},
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_raw_triplea",
								"type": "DatasetReference",
								"parameters": {
									"source_folder": {
										"value": "@pipeline().parameters.source_folder",
										"type": "Expression"
									},
									"filetype": {
										"value": "@pipeline().parameters.Filetype",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {
									"Customerfolder": {
										"value": "@concat(pipeline().parameters.source_folder,'/',substring(utcnow(),0,4),'/',substring(utcnow(),5,2),'/','csv','/','Prestage_csvfiles')",
										"type": "Expression"
									},
									"Filename": {
										"value": "@concat(substring(pipeline().parameters.Filename,0,sub(length(pipeline().parameters.Filename),4)),'.csv')\n",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"source_folder": {
						"type": "String"
					},
					"Filetype": {
						"type": "String"
					},
					"Filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "soure_raw_prestage(csv,pdf)"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-29T05:35:02Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_dynamicemailalertstest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sourcedata",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sinkdataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-17.eastus.logic.azure.com:443/workflows/47a7979e35b946ce9ef8be69cb0c912e/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=Yhf-YLUbiE4RcAx_8Uw-4P1Eaodwhv9vUjUO0Ib3mbw",
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"value": "{\n\"PipelineRunID\":\"@{pipeline().RunId}\",\n\"PipelineName\":\"@{pipeline().Pipeline}\",\n\"FileSystem\":\"@{pipeline().parameters.Filesystem}\",\n\"Folderpath\":\"@{pipeline().parameters.Folderpath}\",\n\"Emailbody\":\"@{pipeline().parameters.Emailbody}\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Filesystem": {
						"type": "string",
						"defaultValue": "sourceforrejectedfiles"
					},
					"Folderpath": {
						"type": "string",
						"defaultValue": "Customer1/2023/May/RejectionsLevel1"
					},
					"Emailbody": {
						"type": "String",
						"defaultValue": "errorfile"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-26T12:38:37Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_dynamicemailalertstest_forallfiileformats')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Web1",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-17.eastus.logic.azure.com:443/workflows/47a7979e35b946ce9ef8be69cb0c912e/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=Yhf-YLUbiE4RcAx_8Uw-4P1Eaodwhv9vUjUO0Ib3mbw",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "{\n\"PipelineRunID\":\"@{pipeline().RunId}\",\n\"PipelineName\":\"@{pipeline().Pipeline}\",\n\"FileName\":\"@{item().name}\",\n\"FileSystem\":\"@{pipeline().parameters.Filesystem}\",\n\"Folderpath\":\"@{pipeline().parameters.Folderpath}\",\n\"Emailbody\":\"@{pipeline().parameters.Emailbody}\",\n\"SourcePdfFileName\":\"@{pipeline().parameters.SourcePdfFileName}\",\n\"Sourcepdfpath\":\"@{pipeline().parameters.Sourcepdfpath}\"\n}",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_dataset_for_sourcefolder_files",
								"type": "DatasetReference",
								"parameters": {
									"Folderpath": {
										"value": "@pipeline().parameters.Folderpath",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Filesystem": {
						"type": "string",
						"defaultValue": "sourceforrejectedfiles"
					},
					"Folderpath": {
						"type": "string",
						"defaultValue": "Customer1/2023/May/RejectionsLevel1"
					},
					"Emailbody": {
						"type": "String",
						"defaultValue": "errorfile"
					},
					"SourcePdfFileName": {
						"type": "string",
						"defaultValue": "FMCCustomer.pdf"
					},
					"Sourcepdfpath": {
						"type": "string",
						"defaultValue": "Customer1/2023/May"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-29T10:02:13Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_rejected_data_injestion_v1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "fe_rejected_data_injestion",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "lk_tbl_aaa_CustomerOrderData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lk_tbl_aaa_CustomerOrderData').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "cp_rejected_data_injestion",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT [Id]\n      ,[CustomerName]\n      ,[CustomerNumber]\n      ,[MaterialNumber]\n      ,[Application]\n      ,[FileName]\n      ,[filePath]\n      ,[PurchaseOrder]\n      ,[Item]\n      ,[Size]\n      ,[Description]\n      ,[Qty]\n      ,[WindingMethod]\n      ,[UOM]\n      ,[UnitPriceCur]\n      ,[NetAmount]\n      ,[DeliveryDate]\n      ,[VendorNumber]\n      ,[VendorName]\n      ,[VATNumber]\n      ,[OrderAddressName]\n      ,[OrderAddressStreet]\n      ,[OrderAdressPostalCode]\n      ,[OrderAdressCity]\n      ,[OrderAdressCountry]\n      ,[Telephone]\n      ,[VendorEmail]\n      ,[Date]\n      ,[TermsofPayment]\n      ,[ContactPerson]\n      ,[Email]\n      ,[DeliveryAdressName]\n      ,[DeliveryAdressNameAddition]\n      ,[DeliveryAdressStreet]\n      ,[DeliveryAdressPostalCode]\n      ,[DeliveryAdressCity]\n      ,[DeliveryAdressCountry]\n      ,[BillingAdressName]\n      ,[BillingAdressStreet]\n      ,[BillingAdressPostalCode]\n      ,[BillingAdressCity]\n      ,[BillingAdressCountry]\n      ,[BillingE-Mail]\n      ,[BillingcustomerVATNumber]\n      ,[ResidentCountryVATID]\n      ,[HeaderText]\n      ,[SubTotal]\n      ,[TotalAmount]\n      ,[modified_timestamp]\n      ,[FolderHierarchy]\n      ,[KeyColumn]\n      ,[IsErrorDQ]\n      ,[DescriptionDQ]\n   \n      ,[ERPDeliveryAddressStreet]\n      \n      ,[insertedDate]\n      ,[IsApproved]\n      ,[Approver]\n      ,[ApproverComments]\n      ,[ApprovalTimestamp]\n\n FROM [app].[tbl_aaa_CustomerOrderData]\nWHERE IsApproved=0 and FileName='@{item().FileName}' and ApprovalTimestamp between (SELECT last_modified_date FROM app.tbl_watermarktable WHERE table_name ='app.tbl_Order_Creation_Inputs') and '@{pipeline().parameters.pipeline_starttime}'\n    ",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_aaa_CustomerOrderData",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_rejected_data_injestion",
											"type": "DatasetReference",
											"parameters": {
												"Folderpath": {
													"value": "@{item().CustomerName}/@{item().CustomerNumber}/@{pipeline().parameters.Year}/@{pipeline().parameters.Month}/@{pipeline().parameters.Week}/Level-2/",
													"type": "Expression"
												},
												"FileName": {
													"value": "@concat('Rejected-',item().FileName)",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "lk_tbl_aaa_CustomerOrderData",
						"description": "",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "WITH CTE\nAS (\n\tSELECT DISTINCT CustomerNumber\n\t,CustomerName\n\t,FileName FROM [app].[tbl_aaa_CustomerOrderData] WHERE ApprovalTimestamp BETWEEN (\n\t\t\tSELECT last_modified_date\n\t\t\tFROM app.tbl_watermarktable\n\t\t\tWHERE table_name = 'app.tbl_Order_Creation_Inputs'\n\t\t\t) and '@{pipeline().parameters.pipeline_starttime}' and IsApproved=0 \n\t) SELECT CTE.CustomerName\n\t,CTE.CustomerNumber\n\t,CTE.FileName FROM CTE \n\tJOIN [app].[tbl_MainControlTable] MC ON MC.CustomerNumber = CTE.CustomerNumber",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_asql_maincontroltable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Year": {
						"type": "string"
					},
					"Month": {
						"type": "string"
					},
					"week": {
						"type": "string"
					},
					"pipeline_starttime": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Graphicfile/Final Pipeline/Child Pipelines/Child Pipelines Post-UI/Rejected Data Ingestion"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_sanitycheck_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lk_tbl_MainControlTable_TriggerTable",
						"description": "Look up into control table -\n[app].[tbl_MainControlTable] for source folder name which is the customername",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select T.Id as TID,T.CustomerName as FolderName,Triggertime,FileName,FileType,IsProcessed,T.CustomerNumber as TCustomerNumber,M.Id as MID,M.CustomerName as CustomerName,M.CustomerNumber as CustomerNumber,CSVColumnMapping,XLSXColumnMapping,PDFMapping,FormRecogniserModelID,ModifiedBy,ModifiedDate,PDFSourceColumns,PDFTargetColumns,CSVTargetColumns,CSVSourceColumns,XLSXSourceColumns,XLSXTargetColumns,FormRecogniserTableName,IsCSVHeaderAvailable,IsXLSXHeaderAvailable from [app].[tbl_TriggerTable] AS T left join [app].[tbl_MainControlTable] AS M on  T.CustomerNumber=M.CustomerNumber where t.Triggertime< '@{pipeline().parameters.PipelineStartTime}' and IsProcessed=1 and FileType='OrderFile' and FirstSanity_IsProcessed=0 and PipelineEndTime is null\n\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_asql_maincontroltable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "fe_MainControlTable",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "lk_tbl_MainControlTable_TriggerTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lk_tbl_MainControlTable_TriggerTable').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "nb_dataquality_1",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/Shared/Data Quality/DQ_AAA_FirstLevel_v3",
										"baseParameters": {
											"CustomerName": {
												"value": "@item().CustomerName",
												"type": "Expression"
											},
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"PipelineRunId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ReportingMonth": {
												"value": "@pipeline().parameters.Month",
												"type": "Expression"
											},
											"ReportingYear": {
												"value": "@pipeline().parameters.Year",
												"type": "Expression"
											},
											"SanityChecklevel": "Firstlevel",
											"week": {
												"value": "@pipeline().parameters.week",
												"type": "Expression"
											},
											"CustomerNumber": {
												"value": "@item().CustomerNumber",
												"type": "Expression"
											},
											"file_name": {
												"value": "@if(\n    endswith(string(item().FileName),'.csv'),\n    replace(item().FileName,'.csv','srccsv.csv'),\nif(\n    endswith(string(item().FileName),'pdf'),\n    replace(item().FileName,'.pdf','srcpdf.csv')\n,\nif(\n    endswith(string(item().FileName),'xml'),\n    replace(item().FileName,'.xml','srcxml.csv')\n,\n    replace(item().FileName,'.xlsx','srcxlsx.csv')\n\n    )\n  )\n  )",
												"type": "Expression"
											},
											"TriggerTableID": {
												"value": "@string(item().TID)  ",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureDatabricks1",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "sp_update_triggertable_sanity",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "nb_dataquality_1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[app].[usp_Triggertable_Sanity_Update]",
										"storedProcedureParameters": {
											"FileName": {
												"value": {
													"value": "@if(\n    endswith(string(item().FileName),'srccsv.csv'),\n    replace(item().FileName,'srccsv.csv','.csv'),\nif(\n    endswith(string(item().FileName),'srcpdf.csv'),\n    replace(item().FileName,'srcpdf.csv','.pdf')\n,\nif(\n    endswith(string(item().FileName),'srcxml.csv'),\n    replace(item().FileName,'srcxml.csv','.xml')\n,\n    replace(item().FileName,'srcxlsx.csv','.xlsx')\n\n    )\n  )\n  )",
													"type": "Expression"
												},
												"type": "String"
											},
											"Pipeline_starttime": {
												"value": {
													"value": "@pipeline().parameters.PipelineStartTime",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_sql_a4ltriplea",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "sp_error_notebook",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "nb_dataquality_1",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[app].[usp_tbl_AuditLogsSanityChecks]",
										"storedProcedureParameters": {
											"BadRecords": {
												"value": null,
												"type": "String"
											},
											"CustomerName": {
												"value": {
													"value": "@item().CustomerName",
													"type": "Expression"
												},
												"type": "String"
											},
											"CustomerNumber": {
												"value": {
													"value": "@item().CustomerNumber",
													"type": "Expression"
												},
												"type": "String"
											},
											"Errors": {
												"value": {
													"value": "@activity('nb_dataquality_1').Error.message\n",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@if(\n    endswith(string(item().FileName),'srccsv.csv'),\n    replace(item().FileName,'srccsv.csv','.csv'),\nif(\n    endswith(string(item().FileName),'srcpdf.csv'),\n    replace(item().FileName,'srcpdf.csv','.pdf')\n,\nif(\n    endswith(string(item().FileName),'srcxml.csv'),\n    replace(item().FileName,'srcxml.csv','.xml')\n,\n    replace(item().FileName,'srcxlsx.csv','.xlsx')\n\n    )\n  )\n  )\n",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileReportingMonth": {
												"value": {
													"value": "@formatDateTime(utcnow(), 'MM')",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileReportingYear": {
												"value": {
													"value": "@formatDateTime(utcnow(), 'yyyy')",
													"type": "Expression"
												},
												"type": "String"
											},
											"GoodRecords": {
												"value": null,
												"type": "String"
											},
											"LogTime": {
												"value": {
													"value": "@activity('nb_dataquality_1').ExecutionEndTime\n",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineRunId": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": "Failed",
												"type": "String"
											},
											"TriggerTableID": {
												"value": {
													"value": "@item().TID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_sql_a4ltriplea",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Year": {
						"type": "string"
					},
					"Month": {
						"type": "string"
					},
					"PipelineStartTime": {
						"type": "string"
					},
					"week": {
						"type": "string"
					}
				},
				"variables": {
					"utcnow": {
						"type": "String"
					},
					"pipeline_starttime": {
						"type": "String"
					},
					"week": {
						"type": "String"
					},
					"time": {
						"type": "String"
					},
					"date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Graphicfile/Final Pipeline/Child Pipelines/Child Pipelines Pre-UI/2.Sanity Level-1"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-07T14:47:05Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_sanitycheck_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "fe_customernumber",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "lk_tbl_triggertable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lk_tbl_triggertable').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "nb_dataquality_2",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/Shared/Data Quality/DQ_AAA_Secondlevel_v2",
										"baseParameters": {
											"CustomerName": {
												"value": "@item().CustomerName",
												"type": "Expression"
											},
											"SanityChecklevel": "Secondlevel",
											"StartTime": {
												"value": "@pipeline().parameters.PipelineStartTime",
												"type": "Expression"
											},
											"CustomerNumber": {
												"value": "@item().CustomerNumber",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureDatabricks1",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "lk_tbl_triggertable",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT distinct CustomerNumber,CustomerName from [app].[tbl_TriggerTable]  where Triggertime< '@{pipeline().parameters.PipelineStartTime}' and Isprocessed=1 and FirstSanity_IsProcessed=1 and PipelineEndTime is null\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "csvtoazuresqltable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Year": {
						"type": "string"
					},
					"Month": {
						"type": "string"
					},
					"PipelineStartTime": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Graphicfile/Final Pipeline/Child Pipelines/Child Pipelines Pre-UI/3.Existence check Sanity Level-2/Sanitychecks"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-07T14:47:05Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MergeAndLoadTocsv')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_maintable",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "ds_keyvaluepair",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_source_triplea",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Pos as string,",
						"          Artikel as string,",
						"          Bezeichnung as string,",
						"          Termin as string,",
						"          Menge as string,",
						"          ME as string,",
						"          Preis as string,",
						"          {G-Wert EUR} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          Anlieferung as string,",
						"          Datum as string,",
						"          Kontrakt as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source1 derive(lookupcolumn1 = 1,",
						"     partitionBy('hash', 1)) ~> derivedColumn1",
						"source2 derive(lookupcolumn2 = 1) ~> derivedColumn2",
						"derivedColumn1, derivedColumn2 lookup(lookupcolumn1 == lookupcolumn2,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 select(mapColumn(",
						"          Pos,",
						"          Artikel,",
						"          Bezeichnung,",
						"          Termin,",
						"          Menge,",
						"          ME,",
						"          Preis,",
						"          {G-Wert EUR},",
						"          Anlieferung,",
						"          Kontrakt,",
						"          Datum",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'pdfextraction',",
						"     folderPath: 'Processed/PDF_Order/Finalcsv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['Table.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MergeAndLoadTocsv1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_maintable1",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "ds_keyvaluepair1",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_source_triplea",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Pos as string,",
						"          Artikel as string,",
						"          Bezeichnung as string,",
						"          Termin as string,",
						"          Menge as string,",
						"          ME as string,",
						"          Preis as string,",
						"          {G-Wert EUR} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          Anlieferung as string,",
						"          Datum as string,",
						"          Kontrakt as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source1 derive(lookupcolumn1 = 1,",
						"     partitionBy('hash', 1)) ~> derivedColumn1",
						"source2 derive(lookupcolumn2 = 1) ~> derivedColumn2",
						"derivedColumn1, derivedColumn2 lookup(lookupcolumn1 == lookupcolumn2,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 select(mapColumn(",
						"          Pos,",
						"          Artikel,",
						"          Bezeichnung,",
						"          Termin,",
						"          Menge,",
						"          ME,",
						"          Preis,",
						"          {G-Wert EUR},",
						"          Anlieferung,",
						"          Kontrakt,",
						"          Datum",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'pdfextraction',",
						"     folderPath: 'Processed/PDF_Order/Finalcsv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['Table.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/cloned_sequential_stagejsonDataflow2_copy2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Sequential-sasurl_extract_pdf_to_csv"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RestResource12",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"parameters{",
						"     Key as string,",
						"     JSON_FILENAME as string,",
						"     folderpath as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     httpMethod: 'GET',",
						"     timeout: 60,",
						"     requestInterval: 10,",
						"     headers: ['Ocp-Apim-Subscription-Key' -> ($Key)],",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'singleDocument']) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'json',",
						"     fileSystem: 'prestagetriplea',",
						"     folderPath: ($folderpath),",
						"     partitionFileNames:[($JSON_FILENAME)],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sequential_stagejsonDataflow2_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Sequential-sasurl_extract_pdf_to_csv"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RestResource12",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"parameters{",
						"     Key as string,",
						"     JSON_FILENAME as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     httpMethod: 'GET',",
						"     timeout: 60,",
						"     requestInterval: 10,",
						"     headers: ['Ocp-Apim-Subscription-Key' -> ($Key)],",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'singleDocument']) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'json',",
						"     fileSystem: 'fmcpdf',",
						"     folderPath: 'STAGE',",
						"     partitionFileNames:[($JSON_FILENAME)],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/stagejsonDataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RestResource1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_source_triplea",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"parameters{",
						"     Key as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     httpMethod: 'GET',",
						"     timeout: 60,",
						"     requestInterval: 10,",
						"     headers: ['Ocp-Apim-Subscription-Key' -> ($Key)],",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'singleDocument']) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'json',",
						"     fileSystem: 'pdfextraction',",
						"     folderPath: 'Stage/PDF_Order',",
						"     partitionFileNames:['jsonv3.0.json'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/stagejsonDataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RestResource12",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"parameters{",
						"     Key as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     httpMethod: 'GET',",
						"     timeout: 60,",
						"     requestInterval: 10,",
						"     headers: ['Ocp-Apim-Subscription-Key' -> ($Key)],",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'singleDocument']) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'json',",
						"     fileSystem: 'fmcpdf',",
						"     folderPath: 'STAGE',",
						"     partitionFileNames:['jsonv3.0.json'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/stagejsonDataflow311')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RestResource1311",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"parameters{",
						"     Key as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     httpMethod: 'GET',",
						"     timeout: 137,",
						"     requestInterval: 100,",
						"     headers: ['Ocp-Apim-Subscription-Key' -> ($Key)],",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'singleDocument']) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'json',",
						"     fileSystem: 'stage',",
						"     folderPath: 'DMK GROUP',",
						"     partitionFileNames:['jsonv3.0.json'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dynamic json to csv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from [dbo].[Control_table_TripleA]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_Triplea",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Get Metadata1",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "Json2",
											"type": "DatasetReference",
											"parameters": {
												"Customerfolder": {
													"value": "@item().Customername",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"childItems"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "JsonReadSettings"
										}
									}
								},
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Get Metadata1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pipeline2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"getmetadatoutput": {
												"value": "@activity('Get Metadata1').output.childItems",
												"type": "Expression"
											},
											"Customerfolder": {
												"value": "@item().Customername",
												"type": "Expression"
											},
											"Pdfmapping": {
												"value": "@item().pdf_mapping",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "PDF Extract"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-25T18:44:30Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Extract data from PDF_Using_CustomModel_FMC')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Use this template to extract data from a PDF source.",
				"activities": [
					{
						"name": "Form Recognizer - POST",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().parameters.FormRecognizerURL",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {
								"Ocp-Apim-Subscription-Key": {
									"value": "@pipeline().parameters.FormRecognizerKey",
									"type": "Expression"
								},
								"contet-type": "application/pdf"
							},
							"body": {
								"value": "@concat('{\"urlSource\":\"',pipeline().parameters.PDF_SourceURL,'\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetPDFData_Dataflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "stage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "JsonToTable_binderkontraktjson-type42",
								"type": "DataFlowReference",
								"parameters": {
									"Filename1": {
										"value": "'@{activity('Get Metadata1').output.childItems[1].name}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					},
					{
						"name": "stage",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "stagejsonDataflow2",
								"type": "DataFlowReference",
								"parameters": {
									"Key": {
										"value": "'@{pipeline().parameters.FormRecognizerKey}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {
										"url": {
											"value": "@activity('Form Recognizer - POST').output.ADFWebActivityResponseHeaders['Operation-Location']",
											"type": "Expression"
										}
									},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Form Recognizer - POST",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 20
						}
					},
					{
						"name": "csvToAzureSqldb",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "GetPDFData_Dataflow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "csvToSQLdb_Type4",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_FMC_PDF_Raw",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FormRecognizerURL": {
						"type": "string",
						"defaultValue": "https://tripleaformrecog.cognitiveservices.azure.com/formrecognizer/documentModels/FMC_mixed_model:analyze?api-version=2022-08-31"
					},
					"FormRecognizerKey": {
						"type": "string",
						"defaultValue": "0987f7cf06fe4ff0a5f07ffaeb35986f"
					},
					"PDF_SourceURL": {
						"type": "string",
						"defaultValue": "https://adlsa4ltriplea.blob.core.windows.net/fmcpdf/RAW/FMC%20Purchase%20Order%20-%204500130257.pdf?sp=r&st=2023-05-24T12:36:58Z&se=2023-05-24T20:36:58Z&spr=https&sv=2022-11-02&sr=b&sig=78UR1AcvHCtdupb7ow3hQKAHlJbgdBpT0lRDknkboFw%3D"
					}
				},
				"variables": {
					"URL": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PDF Extract"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-24T12:42:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/stagejsonDataflow2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Extract from PDF_to_CSV using sas url')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Use this template to extract data from a PDF source.",
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_FMC_PDF_Raw",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach PDF file",
						"description": "Here we are getting the file name from the \nadlsa4ltriplea/FMCPDF/RAW",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Form Recognizer - POST",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "WebActivity for dynamic SAS URL generation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@pipeline().parameters.FormRecognizerURL",
											"type": "Expression"
										},
										"method": "POST",
										"headers": {
											"Ocp-Apim-Subscription-Key": {
												"value": "@pipeline().parameters.FormRecognizerKey",
												"type": "Expression"
											},
											"contet-type": "application/pdf"
										},
										"body": {
											"value": "@concat('{\"urlSource\":\"',activity('Webactivity for dynamic SAS URL generation').output.Response,'\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "GetPDFData_Dataflow",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "stage",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "1.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "JsonToTable_binderkontraktjson-type42",
											"type": "DataFlowReference",
											"parameters": {
												"Filename1": {
													"value": "'@{item().name}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {},
												"source2": {},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "None",
										"cacheSinks": {
											"firstRowOnly": true
										}
									}
								},
								{
									"name": "stage",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "Wait1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "stagejsonDataflow2",
											"type": "DataFlowReference",
											"parameters": {
												"Key": {
													"value": "'@{pipeline().parameters.FormRecognizerKey}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {
													"url": {
														"value": "@activity('Form Recognizer - POST').output.ADFWebActivityResponseHeaders['Operation-Location']",
														"type": "Expression"
													}
												},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "None",
										"cacheSinks": {
											"firstRowOnly": true
										}
									}
								},
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "Form Recognizer - POST",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 20
									}
								},
								{
									"name": "csvToAzureSqldb",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "GetPDFData_Dataflow",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "csvToSQLdb_Type4",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"source1": {},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "WebActivity for dynamic SAS URL generation",
									"description": "This web activity connects to the logic apps, where it generates the sas url for the mentioned file",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-51.eastus.logic.azure.com:443/workflows/da16536601ad45388f63fcbed4239ad9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=8r4etuCTo2flU4WkzgoEIU4hfmwm6hNMXK4iQUPt4m8",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "{\n    \"blobpath\":\"@{variables('blobpath')}\"\n}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "blobpath",
										"value": {
											"value": "@concat('/fmcpdf/RAW/',item().name)\n\n",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FormRecognizerURL": {
						"type": "string",
						"defaultValue": "https://tripleaformrecog.cognitiveservices.azure.com/formrecognizer/documentModels/FMC_mixed_model:analyze?api-version=2022-08-31"
					},
					"FormRecognizerKey": {
						"type": "string",
						"defaultValue": "0987f7cf06fe4ff0a5f07ffaeb35986f"
					},
					"PDF_SourceURL": {
						"type": "string",
						"defaultValue": "https://adlsa4ltriplea.blob.core.windows.net/fmcpdf/RAW/FMC%20Purchase%20Order%20-%204500130257.pdf?sp=r&st=2023-05-24T12:36:58Z&se=2023-05-24T20:36:58Z&spr=https&sv=2022-11-02&sr=b&sig=78UR1AcvHCtdupb7ow3hQKAHlJbgdBpT0lRDknkboFw%3D"
					}
				},
				"variables": {
					"URL": {
						"type": "String"
					},
					"blobpath": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PDF Extract"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-25T13:14:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/stagejsonDataflow2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Extract from PDF_to_CSV using sas url_copy2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Use this template to extract data from a PDF source.",
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_FMC_PDF_Raw",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach PDF file",
						"description": "Here we are getting the file name from the \nadlsa4ltriplea/FMCPDF/RAW",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Form Recognizer - POST",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "WebActivity for dynamic SAS URL generation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@pipeline().parameters.FormRecognizerURL",
											"type": "Expression"
										},
										"method": "POST",
										"headers": {
											"Ocp-Apim-Subscription-Key": {
												"value": "@pipeline().parameters.FormRecognizerKey",
												"type": "Expression"
											},
											"contet-type": "application/pdf"
										},
										"body": {
											"value": "@concat('{\"urlSource\":\"',activity('Webactivity for dynamic SAS URL generation').output.Response,'\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "GetPDFData_Dataflow",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "stage",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "1.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "sequential_JsonToTable_binderkontraktjson-type42_copy1",
											"type": "DataFlowReference",
											"parameters": {
												"Filename1": {
													"value": "'@{item().name}'",
													"type": "Expression"
												},
												"JSON_FILENAME": {
													"value": "'@{concat(item().name,'.','json')}'",
													"type": "Expression"
												},
												"CSV_FILENAME": {
													"value": "'@{concat(item().name,'.','csv')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {},
												"source2": {},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "None",
										"cacheSinks": {
											"firstRowOnly": true
										}
									}
								},
								{
									"name": "stage",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "Wait1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "sequential_stagejsonDataflow2_copy1",
											"type": "DataFlowReference",
											"parameters": {
												"Key": {
													"value": "'@{pipeline().parameters.FormRecognizerKey}'",
													"type": "Expression"
												},
												"JSON_FILENAME": {
													"value": "'@{concat(item().name,'.','json')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {
													"url": {
														"value": "@activity('Form Recognizer - POST').output.ADFWebActivityResponseHeaders['Operation-Location']",
														"type": "Expression"
													}
												},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "None",
										"cacheSinks": {
											"firstRowOnly": true
										}
									}
								},
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "Form Recognizer - POST",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 20
									}
								},
								{
									"name": "csvToAzureSqldb",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "GetPDFData_Dataflow",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Sequential_csvToSQLdb_Type4_copy1",
											"type": "DataFlowReference",
											"parameters": {
												"CSV_FILENAME": {
													"value": "'@{concat(item().name,'.','csv')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "WebActivity for dynamic SAS URL generation",
									"description": "This web activity connects to the logic apps, where it generates the sas url for the mentioned file",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-51.eastus.logic.azure.com:443/workflows/da16536601ad45388f63fcbed4239ad9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=8r4etuCTo2flU4WkzgoEIU4hfmwm6hNMXK4iQUPt4m8",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "{\n    \"blobpath\":\"@{variables('blobpath')}\"\n}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "blobpath",
										"value": {
											"value": "@concat('/fmcpdf/RAW/',item().name)\n",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FormRecognizerURL": {
						"type": "string",
						"defaultValue": "https://tripleaformrecog.cognitiveservices.azure.com/formrecognizer/documentModels/FMC_mixed_model:analyze?api-version=2022-08-31"
					},
					"FormRecognizerKey": {
						"type": "string",
						"defaultValue": "0987f7cf06fe4ff0a5f07ffaeb35986f"
					},
					"PDF_SourceURL": {
						"type": "string",
						"defaultValue": "https://adlsa4ltriplea.blob.core.windows.net/fmcpdf/RAW/FMC%20Purchase%20Order%20-%204500130257.pdf?sp=r&st=2023-05-24T12:36:58Z&se=2023-05-24T20:36:58Z&spr=https&sv=2022-11-02&sr=b&sig=78UR1AcvHCtdupb7ow3hQKAHlJbgdBpT0lRDknkboFw%3D"
					}
				},
				"variables": {
					"URL": {
						"type": "String"
					},
					"blobpath": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PDF Extract"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-26T09:40:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/sequential_stagejsonDataflow2_copy1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sequential_Extract from PDF_to_CSV using sas url_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Use this template to extract data from a PDF source.",
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_FMC_PDF_Raw",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach PDF file",
						"description": "Here we are getting the file name from the \nadlsa4ltriplea/FMCPDF/RAW",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Form Recognizer - POST",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "WebActivity for dynamic SAS URL generation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@pipeline().parameters.FormRecognizerURL",
											"type": "Expression"
										},
										"method": "POST",
										"headers": {
											"Ocp-Apim-Subscription-Key": {
												"value": "@pipeline().parameters.FormRecognizerKey",
												"type": "Expression"
											},
											"contet-type": "application/pdf"
										},
										"body": {
											"value": "@concat('{\"urlSource\":\"',activity('Webactivity for dynamic SAS URL generation').output.Response,'\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "GetPDFData_Dataflow",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "stage",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "1.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "sequential_JsonToTable_binderkontraktjson-type42_copy1",
											"type": "DataFlowReference",
											"parameters": {
												"Filename1": {
													"value": "'@{item().name}'",
													"type": "Expression"
												},
												"JSON_FILENAME": {
													"value": "'@{concat(item().name,'.','json')}'",
													"type": "Expression"
												},
												"CSV_FILENAME": {
													"value": "'@{concat(item().name,'.','csv')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {},
												"source2": {},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "None",
										"cacheSinks": {
											"firstRowOnly": true
										}
									}
								},
								{
									"name": "stage",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "Wait1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "sequential_stagejsonDataflow2_copy1",
											"type": "DataFlowReference",
											"parameters": {
												"Key": {
													"value": "'@{pipeline().parameters.FormRecognizerKey}'",
													"type": "Expression"
												},
												"JSON_FILENAME": {
													"value": "'@{concat(item().name,'.','json')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {
													"url": {
														"value": "@activity('Form Recognizer - POST').output.ADFWebActivityResponseHeaders['Operation-Location']",
														"type": "Expression"
													}
												},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "None",
										"cacheSinks": {
											"firstRowOnly": true
										}
									}
								},
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "Form Recognizer - POST",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 20
									}
								},
								{
									"name": "csvToAzureSqldb",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "GetPDFData_Dataflow",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Sequential_csvToSQLdb_Type4_copy1",
											"type": "DataFlowReference",
											"parameters": {
												"CSV_FILENAME": {
													"value": "'@{concat(item().name,'.','csv')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "WebActivity for dynamic SAS URL generation",
									"description": "This web activity connects to the logic apps, where it generates the sas url for the mentioned file",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-51.eastus.logic.azure.com:443/workflows/da16536601ad45388f63fcbed4239ad9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=8r4etuCTo2flU4WkzgoEIU4hfmwm6hNMXK4iQUPt4m8",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "{\n    \"blobpath\":\"@{variables('blobpath')}\"\n}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "blobpath",
										"value": {
											"value": "@concat('/fmcpdf/RAW/',item().name)\n\n",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FormRecognizerURL": {
						"type": "string",
						"defaultValue": "https://tripleaformrecog.cognitiveservices.azure.com/formrecognizer/documentModels/FMC_mixed_model:analyze?api-version=2022-08-31"
					},
					"FormRecognizerKey": {
						"type": "string",
						"defaultValue": "0987f7cf06fe4ff0a5f07ffaeb35986f"
					},
					"PDF_SourceURL": {
						"type": "string",
						"defaultValue": "https://adlsa4ltriplea.blob.core.windows.net/fmcpdf/RAW/FMC%20Purchase%20Order%20-%204500130257.pdf?sp=r&st=2023-05-24T12:36:58Z&se=2023-05-24T20:36:58Z&spr=https&sv=2022-11-02&sr=b&sig=78UR1AcvHCtdupb7ow3hQKAHlJbgdBpT0lRDknkboFw%3D"
					}
				},
				"variables": {
					"URL": {
						"type": "String"
					},
					"blobpath": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PDF Extract"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-25T13:14:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/sequential_stagejsonDataflow2_copy1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/child')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.getmetadatoutput",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "stage",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"value": "@json(pipeline().parameters.Pdfmapping)",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "Json1",
											"type": "DatasetReference",
											"parameters": {
												"Customerfolder": {
													"value": "@concat(pipeline().parameters.Customerfolder,'/',substring(utcnow(),0,4),'/',substring(utcnow(),5,2),'/','csv','/','Prestage_json_PDF')",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat(substring(item().name,0,sub(length(item().name),4)),'.json')\n",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DelimitedText1",
											"type": "DatasetReference",
											"parameters": {
												"Customerfolder": {
													"value": "@concat(pipeline().parameters.Customerfolder,'/',substring(utcnow(),0,4),'/',substring(utcnow(),5,2),'/','csv','/','Prestage_csvfiles')",
													"type": "Expression"
												},
												"Filename": {
													"value": "@concat(substring(item().name,0,sub(length(item().name),4)),'.csv')\n\n",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "blobpath",
										"value": {
											"value": "@concat('/rawtriplea/',pipeline().parameters.Customerfolder,'/',substring(utcnow(),0,4),'/',substring(utcnow(),5,2),'/','pdf/',item().name)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "WebActivity for dynamic SAS URL generation",
									"description": "This web activity connects to the logic apps, where it generates the sas url for the mentioned file",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-51.eastus.logic.azure.com:443/workflows/da16536601ad45388f63fcbed4239ad9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=8r4etuCTo2flU4WkzgoEIU4hfmwm6hNMXK4iQUPt4m8",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "{\n    \"blobpath\":\"@{variables('blobpath')}\"\n}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Form Recognizer - POST",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "WebActivity for dynamic SAS URL generation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@pipeline().parameters.FormRecognizerURL",
											"type": "Expression"
										},
										"method": "POST",
										"headers": {
											"Ocp-Apim-Subscription-Key": {
												"value": "@pipeline().parameters.FormRecognizerKey",
												"type": "Expression"
											},
											"contet-type": "application/pdf"
										},
										"body": {
											"value": "@concat('{\"urlSource\":\"',activity('Webactivity for dynamic SAS URL generation').output.Response,'\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "Form Recognizer - POST",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 30
									}
								},
								{
									"name": "stage",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "Wait1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "cloned_sequential_stagejsonDataflow2_copy2",
											"type": "DataFlowReference",
											"parameters": {
												"Key": {
													"value": "'@{pipeline().parameters.FormRecognizerKey}'",
													"type": "Expression"
												},
												"JSON_FILENAME": {
													"value": "'@{concat(substring(item().name,0,sub(length(item().name),4)),'.json')\n}'",
													"type": "Expression"
												},
												"folderpath": {
													"value": "'@{concat(pipeline().parameters.Customerfolder,'/',substring(utcnow(),0,4),'/',substring(utcnow(),5,2),'/','csv','/','Prestage_json_PDF')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {
													"url": {
														"value": "@activity('Form Recognizer - POST').output.ADFWebActivityResponseHeaders['Operation-Location']",
														"type": "Expression"
													}
												},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "None",
										"cacheSinks": {
											"firstRowOnly": true
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"getmetadatoutput": {
						"type": "array"
					},
					"Customerfolder": {
						"type": "string"
					},
					"Pdfmapping": {
						"type": "string"
					},
					"FormRecognizerURL": {
						"type": "string"
					},
					"FormRecognizerKey": {
						"type": "string"
					}
				},
				"variables": {
					"URL": {
						"type": "String"
					},
					"blobpath": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Pipeline _PDF_dynamic"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-28T10:46:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/cloned_sequential_stagejsonDataflow2_copy2')]"
			]
		}
	]
}
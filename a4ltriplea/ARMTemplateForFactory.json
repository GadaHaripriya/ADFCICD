{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "a4ltriplea"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureDataLakeStorage2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage2'"
		},
		"LS_Triplea_adls_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'LS_Triplea_adls'"
		},
		"ls_SqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_SqlServer'"
		},
		"ls_sinktriplea_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_sinktriplea'"
		},
		"ls_source_triplea_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_source_triplea'"
		},
		"ls_sourcedatapdf_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_sourcedatapdf'"
		},
		"ls_sourcefilenames_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_sourcefilenames'"
		},
		"ls_sourcefiles_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_sourcefiles'"
		},
		"ls_sourcefolder_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_sourcefolder'"
		},
		"ls_sourceforrejectedfiles_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_sourceforrejectedfiles'"
		},
		"ls_sql_a4ltriplea_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_sql_a4ltriplea'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsa4ltriplea.dfs.core.windows.net/"
		},
		"AzureDataLakeStorage2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsa4ltriplea.dfs.core.windows.net/"
		},
		"LS_Triplea_adls_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsa4ltriplea.dfs.core.windows.net/"
		},
		"RestService1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://https://tripleaformrecog.cognitiveservices.azure.com//formrecognizer/documentModels/FMCMODEL?api-version=2022-08-31"
		},
		"RestService2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().url}"
		},
		"ls_sinktriplea_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsa4ltriplea.dfs.core.windows.net/"
		},
		"ls_source_triplea_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().URL}"
		},
		"ls_sourcedatapdf_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsa4ltriplea.dfs.core.windows.net/"
		},
		"ls_sourcefilenames_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsa4ltriplea.dfs.core.windows.net/"
		},
		"ls_sourcefiles_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsa4ltriplea.dfs.core.windows.net/"
		},
		"ls_sourcefolder_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsa4ltriplea.dfs.core.windows.net/"
		},
		"ls_sourceforrejectedfiles_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsa4ltriplea.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Dynamic json to csv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from [dbo].[Control_table_TripleA]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_Triplea",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Get Metadata1",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "Json2",
											"type": "DatasetReference",
											"parameters": {
												"Customerfolder": {
													"value": "@item().Customername",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"childItems"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "JsonReadSettings"
										}
									}
								},
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Get Metadata1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pipeline2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"getmetadatoutput": {
												"value": "@activity('Get Metadata1').output.childItems",
												"type": "Expression"
											},
											"Customerfolder": {
												"value": "@item().Customername",
												"type": "Expression"
											},
											"Pdfmapping": {
												"value": "@item().pdf_mapping",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "PDF Extract"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-25T18:44:30Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_Triplea')]",
				"[concat(variables('factoryId'), '/datasets/Json2')]",
				"[concat(variables('factoryId'), '/pipelines/pipeline2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Extract data from PDF_Using_CustomModel_FMC')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Use this template to extract data from a PDF source.",
				"activities": [
					{
						"name": "Form Recognizer - POST",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().parameters.FormRecognizerURL",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {
								"Ocp-Apim-Subscription-Key": {
									"value": "@pipeline().parameters.FormRecognizerKey",
									"type": "Expression"
								},
								"contet-type": "application/pdf"
							},
							"body": {
								"value": "@concat('{\"urlSource\":\"',pipeline().parameters.PDF_SourceURL,'\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetPDFData_Dataflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "stage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "JsonToTable_binderkontraktjson-type42",
								"type": "DataFlowReference",
								"parameters": {
									"Filename1": {
										"value": "'@{activity('Get Metadata1').output.childItems[1].name}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					},
					{
						"name": "stage",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "stagejsonDataflow2",
								"type": "DataFlowReference",
								"parameters": {
									"Key": {
										"value": "'@{pipeline().parameters.FormRecognizerKey}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {
										"url": {
											"value": "@activity('Form Recognizer - POST').output.ADFWebActivityResponseHeaders['Operation-Location']",
											"type": "Expression"
										}
									},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Form Recognizer - POST",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 20
						}
					},
					{
						"name": "csvToAzureSqldb",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "GetPDFData_Dataflow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "csvToSQLdb_Type4",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_FMC_PDF_Raw",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FormRecognizerURL": {
						"type": "string",
						"defaultValue": "https://tripleaformrecog.cognitiveservices.azure.com/formrecognizer/documentModels/FMC_mixed_model:analyze?api-version=2022-08-31"
					},
					"FormRecognizerKey": {
						"type": "string",
						"defaultValue": "0987f7cf06fe4ff0a5f07ffaeb35986f"
					},
					"PDF_SourceURL": {
						"type": "string",
						"defaultValue": "https://adlsa4ltriplea.blob.core.windows.net/fmcpdf/RAW/FMC%20Purchase%20Order%20-%204500130257.pdf?sp=r&st=2023-05-24T12:36:58Z&se=2023-05-24T20:36:58Z&spr=https&sv=2022-11-02&sr=b&sig=78UR1AcvHCtdupb7ow3hQKAHlJbgdBpT0lRDknkboFw%3D"
					}
				},
				"variables": {
					"URL": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PDF Extract"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-24T12:42:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/JsonToTable_binderkontraktjson-type42')]",
				"[concat(variables('factoryId'), '/dataflows/stagejsonDataflow2')]",
				"[concat(variables('factoryId'), '/dataflows/csvToSQLdb_Type4')]",
				"[concat(variables('factoryId'), '/datasets/ds_FMC_PDF_Raw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Extract from PDF_to_CSV using sas url')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Use this template to extract data from a PDF source.",
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_FMC_PDF_Raw",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach PDF file",
						"description": "Here we are getting the file name from the \nadlsa4ltriplea/FMCPDF/RAW",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Form Recognizer - POST",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "WebActivity for dynamic SAS URL generation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@pipeline().parameters.FormRecognizerURL",
											"type": "Expression"
										},
										"method": "POST",
										"headers": {
											"Ocp-Apim-Subscription-Key": {
												"value": "@pipeline().parameters.FormRecognizerKey",
												"type": "Expression"
											},
											"contet-type": "application/pdf"
										},
										"body": {
											"value": "@concat('{\"urlSource\":\"',activity('Webactivity for dynamic SAS URL generation').output.Response,'\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "GetPDFData_Dataflow",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "stage",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "1.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "JsonToTable_binderkontraktjson-type42",
											"type": "DataFlowReference",
											"parameters": {
												"Filename1": {
													"value": "'@{item().name}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {},
												"source2": {},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "None",
										"cacheSinks": {
											"firstRowOnly": true
										}
									}
								},
								{
									"name": "stage",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "Wait1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "stagejsonDataflow2",
											"type": "DataFlowReference",
											"parameters": {
												"Key": {
													"value": "'@{pipeline().parameters.FormRecognizerKey}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {
													"url": {
														"value": "@activity('Form Recognizer - POST').output.ADFWebActivityResponseHeaders['Operation-Location']",
														"type": "Expression"
													}
												},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "None",
										"cacheSinks": {
											"firstRowOnly": true
										}
									}
								},
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "Form Recognizer - POST",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 20
									}
								},
								{
									"name": "csvToAzureSqldb",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "GetPDFData_Dataflow",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "csvToSQLdb_Type4",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"source1": {},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "WebActivity for dynamic SAS URL generation",
									"description": "This web activity connects to the logic apps, where it generates the sas url for the mentioned file",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-51.eastus.logic.azure.com:443/workflows/da16536601ad45388f63fcbed4239ad9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=8r4etuCTo2flU4WkzgoEIU4hfmwm6hNMXK4iQUPt4m8",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "{\n    \"blobpath\":\"@{variables('blobpath')}\"\n}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "blobpath",
										"value": {
											"value": "@concat('/fmcpdf/RAW/',item().name)\n\n",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FormRecognizerURL": {
						"type": "string",
						"defaultValue": "https://tripleaformrecog.cognitiveservices.azure.com/formrecognizer/documentModels/FMC_mixed_model:analyze?api-version=2022-08-31"
					},
					"FormRecognizerKey": {
						"type": "string",
						"defaultValue": "0987f7cf06fe4ff0a5f07ffaeb35986f"
					},
					"PDF_SourceURL": {
						"type": "string",
						"defaultValue": "https://adlsa4ltriplea.blob.core.windows.net/fmcpdf/RAW/FMC%20Purchase%20Order%20-%204500130257.pdf?sp=r&st=2023-05-24T12:36:58Z&se=2023-05-24T20:36:58Z&spr=https&sv=2022-11-02&sr=b&sig=78UR1AcvHCtdupb7ow3hQKAHlJbgdBpT0lRDknkboFw%3D"
					}
				},
				"variables": {
					"URL": {
						"type": "String"
					},
					"blobpath": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PDF Extract"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-25T13:14:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_FMC_PDF_Raw')]",
				"[concat(variables('factoryId'), '/dataflows/JsonToTable_binderkontraktjson-type42')]",
				"[concat(variables('factoryId'), '/dataflows/stagejsonDataflow2')]",
				"[concat(variables('factoryId'), '/dataflows/csvToSQLdb_Type4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Extract from PDF_to_CSV using sas url_copy2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Use this template to extract data from a PDF source.",
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_FMC_PDF_Raw",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach PDF file",
						"description": "Here we are getting the file name from the \nadlsa4ltriplea/FMCPDF/RAW",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Form Recognizer - POST",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "WebActivity for dynamic SAS URL generation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@pipeline().parameters.FormRecognizerURL",
											"type": "Expression"
										},
										"method": "POST",
										"headers": {
											"Ocp-Apim-Subscription-Key": {
												"value": "@pipeline().parameters.FormRecognizerKey",
												"type": "Expression"
											},
											"contet-type": "application/pdf"
										},
										"body": {
											"value": "@concat('{\"urlSource\":\"',activity('Webactivity for dynamic SAS URL generation').output.Response,'\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "GetPDFData_Dataflow",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "stage",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "1.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "sequential_JsonToTable_binderkontraktjson-type42_copy1",
											"type": "DataFlowReference",
											"parameters": {
												"Filename1": {
													"value": "'@{item().name}'",
													"type": "Expression"
												},
												"JSON_FILENAME": {
													"value": "'@{concat(item().name,'.','json')}'",
													"type": "Expression"
												},
												"CSV_FILENAME": {
													"value": "'@{concat(item().name,'.','csv')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {},
												"source2": {},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "None",
										"cacheSinks": {
											"firstRowOnly": true
										}
									}
								},
								{
									"name": "stage",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "Wait1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "sequential_stagejsonDataflow2_copy1",
											"type": "DataFlowReference",
											"parameters": {
												"Key": {
													"value": "'@{pipeline().parameters.FormRecognizerKey}'",
													"type": "Expression"
												},
												"JSON_FILENAME": {
													"value": "'@{concat(item().name,'.','json')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {
													"url": {
														"value": "@activity('Form Recognizer - POST').output.ADFWebActivityResponseHeaders['Operation-Location']",
														"type": "Expression"
													}
												},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "None",
										"cacheSinks": {
											"firstRowOnly": true
										}
									}
								},
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "Form Recognizer - POST",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 20
									}
								},
								{
									"name": "csvToAzureSqldb",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "GetPDFData_Dataflow",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Sequential_csvToSQLdb_Type4_copy1",
											"type": "DataFlowReference",
											"parameters": {
												"CSV_FILENAME": {
													"value": "'@{concat(item().name,'.','csv')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "WebActivity for dynamic SAS URL generation",
									"description": "This web activity connects to the logic apps, where it generates the sas url for the mentioned file",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-51.eastus.logic.azure.com:443/workflows/da16536601ad45388f63fcbed4239ad9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=8r4etuCTo2flU4WkzgoEIU4hfmwm6hNMXK4iQUPt4m8",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "{\n    \"blobpath\":\"@{variables('blobpath')}\"\n}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "blobpath",
										"value": {
											"value": "@concat('/fmcpdf/RAW/',item().name)\n",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FormRecognizerURL": {
						"type": "string",
						"defaultValue": "https://tripleaformrecog.cognitiveservices.azure.com/formrecognizer/documentModels/FMC_mixed_model:analyze?api-version=2022-08-31"
					},
					"FormRecognizerKey": {
						"type": "string",
						"defaultValue": "0987f7cf06fe4ff0a5f07ffaeb35986f"
					},
					"PDF_SourceURL": {
						"type": "string",
						"defaultValue": "https://adlsa4ltriplea.blob.core.windows.net/fmcpdf/RAW/FMC%20Purchase%20Order%20-%204500130257.pdf?sp=r&st=2023-05-24T12:36:58Z&se=2023-05-24T20:36:58Z&spr=https&sv=2022-11-02&sr=b&sig=78UR1AcvHCtdupb7ow3hQKAHlJbgdBpT0lRDknkboFw%3D"
					}
				},
				"variables": {
					"URL": {
						"type": "String"
					},
					"blobpath": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PDF Extract"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-26T09:40:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_FMC_PDF_Raw')]",
				"[concat(variables('factoryId'), '/dataflows/sequential_JsonToTable_binderkontraktjson-type42_copy1')]",
				"[concat(variables('factoryId'), '/dataflows/sequential_stagejsonDataflow2_copy1')]",
				"[concat(variables('factoryId'), '/dataflows/Sequential_csvToSQLdb_Type4_copy1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Graphicfile_child_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1_copy1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.lookupoutput",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get Metadata1_copy1",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "Set variable1_copy1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_c1_order_graphicfile",
											"type": "DatasetReference",
											"parameters": {
												"graphicfilename": {
													"value": "@variables('Graphicfilename')",
													"type": "Expression"
												},
												"GraphicFilepath": {
													"value": "@concat(pipeline().parameters.Customername,'/',substring(utcnow(),0,4),'/',substring(utcnow(),5,2),'/')",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "If Condition1_copy1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata1_copy1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@activity('Get Metadata1_copy1').output.exists",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Stored procedure2",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[Graphicfile_doesnotexists]",
													"storedProcedureParameters": {
														"Article": {
															"value": {
																"value": "@item().Artikel",
																"type": "Expression"
															},
															"type": "String"
														},
														"Customername": {
															"value": {
																"value": "@pipeline().parameters.Customername",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "ls_sql_a4ltriplea",
													"type": "LinkedServiceReference"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Stored procedure1",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[Graphicfile_exists]",
													"storedProcedureParameters": {
														"Article": {
															"value": {
																"value": "@item().Artikel",
																"type": "Expression"
															},
															"type": "String"
														},
														"Customername": {
															"value": {
																"value": "@pipeline().parameters.Customername",
																"type": "Expression"
															},
															"type": "String"
														},
														"Graphicfilepath": {
															"value": {
																"value": "@concat('graphicfiles','/',pipeline().parameters.Customername,'/',substring(utcnow(),0,4),'/',substring(utcnow(),5,2),'/',concat(item().Artikel,'_',pipeline().parameters.Customername,'.pdf'))",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "ls_sql_a4ltriplea",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								},
								{
									"name": "Set variable1_copy1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Graphicfilename",
										"value": {
											"value": "@concat(item().Artikel,'_',pipeline().parameters.Customername,'.pdf')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Customername": {
						"type": "string"
					},
					"lookupoutput": {
						"type": "object"
					}
				},
				"variables": {
					"Graphicfilename": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Graphicfile"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-01T11:46:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_c1_order_graphicfile')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_a4ltriplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Graphicfile_master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup into control table",
						"description": "Look up into control table for customer name",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_Triplea",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup into control table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup into control table').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Get Metadata of each customer folder",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DelimitedText1",
											"type": "DatasetReference",
											"parameters": {
												"Customerfolder": {
													"value": "@concat(item().Customername,'/',substring(utcnow(),0,4),'/',substring(utcnow(),5,2),'/','csv','/','Prestage_csvfiles')",
													"type": "Expression"
												},
												"Filename": "*"
											}
										},
										"fieldList": [
											"childItems"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Get Metadata of each customer folder",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "graphicfile_child_1",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Childitems": {
												"value": "@activity('Get Metadata of each customer folder').output.childItems",
												"type": "Expression"
											},
											"Customername": {
												"value": "@item().Customername",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Graphicfile"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-30T18:54:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_Triplea')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/pipelines/graphicfile_child_1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Master_source_raw_prestage')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup INTO CONTROLTABLE",
						"description": " up into control table -Control_table_TripleA for source folder name which is the customername",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_Triplea",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup INTO CONTROLTABLE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup INTO CONTROLTABLE').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Get Metadata of source",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_source_triplea_adls",
											"type": "DatasetReference",
											"parameters": {
												"foldername": {
													"value": "@item().Customername",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"childItems",
											"lastModified"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Get Metadata of source",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "child_source_raw_prestage",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"childitems": {
												"value": "@activity('Get Metadata of source').output.childItems",
												"type": "Expression"
											},
											"source_folder_name": {
												"value": "@item().Customername",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "soure_raw_prestage(csv,pdf)"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-28T12:07:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_Triplea')]",
				"[concat(variables('factoryId'), '/datasets/ds_source_triplea_adls')]",
				"[concat(variables('factoryId'), '/pipelines/child_source_raw_prestage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sequential_Extract from PDF_to_CSV using sas url_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Use this template to extract data from a PDF source.",
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_FMC_PDF_Raw",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach PDF file",
						"description": "Here we are getting the file name from the \nadlsa4ltriplea/FMCPDF/RAW",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Form Recognizer - POST",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "WebActivity for dynamic SAS URL generation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@pipeline().parameters.FormRecognizerURL",
											"type": "Expression"
										},
										"method": "POST",
										"headers": {
											"Ocp-Apim-Subscription-Key": {
												"value": "@pipeline().parameters.FormRecognizerKey",
												"type": "Expression"
											},
											"contet-type": "application/pdf"
										},
										"body": {
											"value": "@concat('{\"urlSource\":\"',activity('Webactivity for dynamic SAS URL generation').output.Response,'\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "GetPDFData_Dataflow",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "stage",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "1.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "sequential_JsonToTable_binderkontraktjson-type42_copy1",
											"type": "DataFlowReference",
											"parameters": {
												"Filename1": {
													"value": "'@{item().name}'",
													"type": "Expression"
												},
												"JSON_FILENAME": {
													"value": "'@{concat(item().name,'.','json')}'",
													"type": "Expression"
												},
												"CSV_FILENAME": {
													"value": "'@{concat(item().name,'.','csv')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {},
												"source2": {},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "None",
										"cacheSinks": {
											"firstRowOnly": true
										}
									}
								},
								{
									"name": "stage",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "Wait1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "sequential_stagejsonDataflow2_copy1",
											"type": "DataFlowReference",
											"parameters": {
												"Key": {
													"value": "'@{pipeline().parameters.FormRecognizerKey}'",
													"type": "Expression"
												},
												"JSON_FILENAME": {
													"value": "'@{concat(item().name,'.','json')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {
													"url": {
														"value": "@activity('Form Recognizer - POST').output.ADFWebActivityResponseHeaders['Operation-Location']",
														"type": "Expression"
													}
												},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "None",
										"cacheSinks": {
											"firstRowOnly": true
										}
									}
								},
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "Form Recognizer - POST",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 20
									}
								},
								{
									"name": "csvToAzureSqldb",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "GetPDFData_Dataflow",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Sequential_csvToSQLdb_Type4_copy1",
											"type": "DataFlowReference",
											"parameters": {
												"CSV_FILENAME": {
													"value": "'@{concat(item().name,'.','csv')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "WebActivity for dynamic SAS URL generation",
									"description": "This web activity connects to the logic apps, where it generates the sas url for the mentioned file",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-51.eastus.logic.azure.com:443/workflows/da16536601ad45388f63fcbed4239ad9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=8r4etuCTo2flU4WkzgoEIU4hfmwm6hNMXK4iQUPt4m8",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "{\n    \"blobpath\":\"@{variables('blobpath')}\"\n}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "blobpath",
										"value": {
											"value": "@concat('/fmcpdf/RAW/',item().name)\n\n",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FormRecognizerURL": {
						"type": "string",
						"defaultValue": "https://tripleaformrecog.cognitiveservices.azure.com/formrecognizer/documentModels/FMC_mixed_model:analyze?api-version=2022-08-31"
					},
					"FormRecognizerKey": {
						"type": "string",
						"defaultValue": "0987f7cf06fe4ff0a5f07ffaeb35986f"
					},
					"PDF_SourceURL": {
						"type": "string",
						"defaultValue": "https://adlsa4ltriplea.blob.core.windows.net/fmcpdf/RAW/FMC%20Purchase%20Order%20-%204500130257.pdf?sp=r&st=2023-05-24T12:36:58Z&se=2023-05-24T20:36:58Z&spr=https&sv=2022-11-02&sr=b&sig=78UR1AcvHCtdupb7ow3hQKAHlJbgdBpT0lRDknkboFw%3D"
					}
				},
				"variables": {
					"URL": {
						"type": "String"
					},
					"blobpath": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PDF Extract"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-25T13:14:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_FMC_PDF_Raw')]",
				"[concat(variables('factoryId'), '/dataflows/sequential_JsonToTable_binderkontraktjson-type42_copy1')]",
				"[concat(variables('factoryId'), '/dataflows/sequential_stagejsonDataflow2_copy1')]",
				"[concat(variables('factoryId'), '/dataflows/Sequential_csvToSQLdb_Type4_copy1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/child')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.getmetadatoutput",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "stage",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"value": "@json(pipeline().parameters.Pdfmapping)",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "Json1",
											"type": "DatasetReference",
											"parameters": {
												"Customerfolder": {
													"value": "@concat(pipeline().parameters.Customerfolder,'/',substring(utcnow(),0,4),'/',substring(utcnow(),5,2),'/','csv','/','Prestage_json_PDF')",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat(substring(item().name,0,sub(length(item().name),4)),'.json')\n",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DelimitedText1",
											"type": "DatasetReference",
											"parameters": {
												"Customerfolder": {
													"value": "@concat(pipeline().parameters.Customerfolder,'/',substring(utcnow(),0,4),'/',substring(utcnow(),5,2),'/','csv','/','Prestage_csvfiles')",
													"type": "Expression"
												},
												"Filename": {
													"value": "@concat(substring(item().name,0,sub(length(item().name),4)),'.csv')\n\n",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "blobpath",
										"value": {
											"value": "@concat('/rawtriplea/',pipeline().parameters.Customerfolder,'/',substring(utcnow(),0,4),'/',substring(utcnow(),5,2),'/','pdf/',item().name)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "WebActivity for dynamic SAS URL generation",
									"description": "This web activity connects to the logic apps, where it generates the sas url for the mentioned file",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-51.eastus.logic.azure.com:443/workflows/da16536601ad45388f63fcbed4239ad9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=8r4etuCTo2flU4WkzgoEIU4hfmwm6hNMXK4iQUPt4m8",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "{\n    \"blobpath\":\"@{variables('blobpath')}\"\n}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Form Recognizer - POST",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "WebActivity for dynamic SAS URL generation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@pipeline().parameters.FormRecognizerURL",
											"type": "Expression"
										},
										"method": "POST",
										"headers": {
											"Ocp-Apim-Subscription-Key": {
												"value": "@pipeline().parameters.FormRecognizerKey",
												"type": "Expression"
											},
											"contet-type": "application/pdf"
										},
										"body": {
											"value": "@concat('{\"urlSource\":\"',activity('Webactivity for dynamic SAS URL generation').output.Response,'\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "Form Recognizer - POST",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 30
									}
								},
								{
									"name": "stage",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "Wait1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "cloned_sequential_stagejsonDataflow2_copy2",
											"type": "DataFlowReference",
											"parameters": {
												"Key": {
													"value": "'@{pipeline().parameters.FormRecognizerKey}'",
													"type": "Expression"
												},
												"JSON_FILENAME": {
													"value": "'@{concat(substring(item().name,0,sub(length(item().name),4)),'.json')\n}'",
													"type": "Expression"
												},
												"folderpath": {
													"value": "'@{concat(pipeline().parameters.Customerfolder,'/',substring(utcnow(),0,4),'/',substring(utcnow(),5,2),'/','csv','/','Prestage_json_PDF')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {
													"url": {
														"value": "@activity('Form Recognizer - POST').output.ADFWebActivityResponseHeaders['Operation-Location']",
														"type": "Expression"
													}
												},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "None",
										"cacheSinks": {
											"firstRowOnly": true
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"getmetadatoutput": {
						"type": "array"
					},
					"Customerfolder": {
						"type": "string"
					},
					"Pdfmapping": {
						"type": "string"
					},
					"FormRecognizerURL": {
						"type": "string"
					},
					"FormRecognizerKey": {
						"type": "string"
					}
				},
				"variables": {
					"URL": {
						"type": "String"
					},
					"blobpath": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Pipeline _PDF_dynamic"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-28T10:46:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json1')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/dataflows/cloned_sequential_stagejsonDataflow2_copy2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/child_source_raw_prestage')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach file",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@array(pipeline().parameters.childitems)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Switch1",
									"description": "check the file type and switch and copy the data from source to raw accordingly",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@if(\n contains(string(item().name),'csv'),\n'csv',\nif(\n    contains(string(item().name),'pdf'),\n    'pdf',\n    'xml'\n    )\n  )",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "csv",
												"activities": [
													{
														"name": "Copy csv file",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobFSReadSettings",
																	"recursive": true,
																	"modifiedDatetimeStart": {
																		"value": "@addhours(string(utcnow()),-3)",
																		"type": "Expression"
																	},
																	"modifiedDatetimeEnd": {
																		"value": "@utcnow()",
																		"type": "Expression"
																	},
																	"wildcardFolderPath": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	},
																	"wildcardFileName": {
																		"value": "@item().name",
																		"type": "Expression"
																	},
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "DelimitedTextSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "DelimitedTextWriteSettings",
																	"quoteAllText": true,
																	"fileExtension": ".txt"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "ds_source_triplea_adls",
																"type": "DatasetReference",
																"parameters": {
																	"foldername": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "ds_raw_triplea",
																"type": "DatasetReference",
																"parameters": {
																	"source_folder": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	},
																	"filetype": "csv"
																}
															}
														]
													},
													{
														"name": "Execute csv pipeline",
														"description": "copy data from raw to pretstage",
														"type": "ExecutePipeline",
														"dependsOn": [
															{
																"activity": "Copy csv file",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "pl_csv",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"source_folder": {
																	"value": "@pipeline().parameters.source_folder_name",
																	"type": "Expression"
																},
																"Filetype": "csv",
																"Filename": {
																	"value": "@item().name",
																	"type": "Expression"
																}
															}
														}
													}
												]
											},
											{
												"value": "pdf",
												"activities": [
													{
														"name": "Copy data pdf",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobFSReadSettings",
																	"recursive": true,
																	"modifiedDatetimeStart": {
																		"value": "@addhours(string(utcnow()),-3)",
																		"type": "Expression"
																	},
																	"modifiedDatetimeEnd": {
																		"value": "@utcnow()",
																		"type": "Expression"
																	},
																	"wildcardFolderPath": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	},
																	"wildcardFileName": {
																		"value": "@item().name",
																		"type": "Expression"
																	},
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "DelimitedTextSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "DelimitedTextWriteSettings",
																	"quoteAllText": true,
																	"fileExtension": ".txt"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "ds_source_triplea_adls",
																"type": "DatasetReference",
																"parameters": {
																	"foldername": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "ds_raw_triplea",
																"type": "DatasetReference",
																"parameters": {
																	"source_folder": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	},
																	"filetype": "pdf"
																}
															}
														]
													},
													{
														"name": "Execute PDF Pipeline",
														"type": "ExecutePipeline",
														"dependsOn": [
															{
																"activity": "Copy data pdf",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "master",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {}
														}
													}
												]
											},
											{
												"value": "xml",
												"activities": [
													{
														"name": "Copy data xml",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobFSReadSettings",
																	"recursive": true,
																	"modifiedDatetimeStart": {
																		"value": "@addhours(string(utcnow()),-3)",
																		"type": "Expression"
																	},
																	"modifiedDatetimeEnd": {
																		"value": "@utcnow()",
																		"type": "Expression"
																	},
																	"wildcardFolderPath": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	},
																	"wildcardFileName": {
																		"value": "@item().name",
																		"type": "Expression"
																	},
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "DelimitedTextSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "DelimitedTextWriteSettings",
																	"quoteAllText": true,
																	"fileExtension": ".txt"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "ds_source_triplea_adls",
																"type": "DatasetReference",
																"parameters": {
																	"foldername": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "ds_raw_triplea",
																"type": "DatasetReference",
																"parameters": {
																	"source_folder": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	},
																	"filetype": "xml"
																}
															}
														]
													}
												]
											}
										]
									}
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "filename",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"childitems": {
						"type": "string"
					},
					"source_folder_name": {
						"type": "string"
					}
				},
				"variables": {
					"filename": {
						"type": "String"
					}
				},
				"folder": {
					"name": "soure_raw_prestage(csv,pdf)"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-28T12:30:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_source_triplea_adls')]",
				"[concat(variables('factoryId'), '/datasets/ds_raw_triplea')]",
				"[concat(variables('factoryId'), '/pipelines/pl_csv')]",
				"[concat(variables('factoryId'), '/pipelines/master')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/graphicfile_child_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach Customer",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.Childitems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Lookup1",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"dataset": {
											"referenceName": "ds_c1_order",
											"type": "DatasetReference",
											"parameters": {
												"Filepath": {
													"value": "@concat(pipeline().parameters.Customername,'/',substring(utcnow(),0,4),'/',substring(utcnow(),5,2),'/','csv','/','Prestage_csvfiles')\n",
													"type": "Expression"
												},
												"Filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Lookup1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Graphicfile_child_2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Customername": {
												"value": "@pipeline().parameters.Customername",
												"type": "Expression"
											},
											"lookupoutput": {
												"value": "@activity('Lookup1').output.value",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Childitems": {
						"type": "string"
					},
					"Customername": {
						"type": "string"
					}
				},
				"variables": {
					"Graphicfilename": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Graphicfile"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-30T18:54:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_c1_order')]",
				"[concat(variables('factoryId'), '/pipelines/Graphicfile_child_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup into Control Table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from [dbo].[Control_table_TripleA]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_Triplea",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup into Control Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup into Control Table').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Get Metadata1",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "Json2",
											"type": "DatasetReference",
											"parameters": {
												"Customerfolder": {
													"value": "@concat(item().Customername,'/',substring(utcnow(),0,4),'/',substring(utcnow(),5,2),'/','pdf')\n\n",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"childItems"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "JsonReadSettings"
										}
									}
								},
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Get Metadata1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "child",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"getmetadatoutput": {
												"value": "@activity('Get Metadata1').output.childItems",
												"type": "Expression"
											},
											"Customerfolder": {
												"value": "@item().Customername",
												"type": "Expression"
											},
											"Pdfmapping": {
												"value": "@item().pdf_mapping",
												"type": "Expression"
											},
											"FormRecognizerURL": {
												"value": "@concat('https://tripleaformrecog.cognitiveservices.azure.com/formrecognizer/documentModels/',item().Model_ID,':analyze?api-version=2022-08-31')",
												"type": "Expression"
											},
											"FormRecognizerKey": {
												"value": "0987f7cf06fe4ff0a5f07ffaeb35986f",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Pipeline _PDF_dynamic"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-28T10:46:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_Triplea')]",
				"[concat(variables('factoryId'), '/datasets/Json2')]",
				"[concat(variables('factoryId'), '/pipelines/child')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.getmetadatoutput",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"value": "@json(pipeline().parameters.Pdfmapping)",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "Json1",
											"type": "DatasetReference",
											"parameters": {
												"Customerfolder": {
													"value": "@pipeline().parameters.Customerfolder",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DelimitedText1",
											"type": "DatasetReference",
											"parameters": {
												"Customerfolder": {
													"value": "@pipeline().parameters.Customerfolder",
													"type": "Expression"
												},
												"Filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"getmetadatoutput": {
						"type": "array"
					},
					"Customerfolder": {
						"type": "string"
					},
					"Pdfmapping": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-26T12:01:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json1')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_c1_order",
								"type": "DatasetReference",
								"parameters": {
									"Filepath": "Customer1/2023/05/csv/Prestage_csvfiles",
									"Filename": "c1order1.csv"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata1",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_c1_order_graphicfile",
											"type": "DatasetReference",
											"parameters": {
												"graphicfilename": {
													"value": "@variables('filepath')",
													"type": "Expression"
												},
												"GraphicFilepath": {
													"value": "@concat('Customer1','/',substring(utcnow(),0,4),'/',substring(utcnow(),5,2),'/')",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@activity('Get Metadata1').output.exists",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "filepath",
										"value": {
											"value": "@concat(item().Artikel,'_',item().Customername,'.pdf')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"filepath": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Graphicfile"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-01T11:46:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_c1_order')]",
				"[concat(variables('factoryId'), '/datasets/ds_c1_order_graphicfile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WebDestination",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://formrecogdestination.cognitiveservices.azure.com/formrecognizer/documentModels:authorizeCopy?api-version=2023-07-31",
							"method": "POST",
							"headers": {
								"Ocp-Apim-Subscription-Key": "5a17bb41892344b9a77a9aeca39257b9"
							},
							"body": {
								"modelId": "Test_Dest13",
								"description": "Copied from SCUS"
							}
						}
					},
					{
						"name": "WebSource",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "WebDestination",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://testformrecog.cognitiveservices.azure.com/formrecognizer/documentModels/TestFMC1:copyTo?api-version=2023-07-31",
							"method": "POST",
							"headers": {
								"Ocp-Apim-Subscription-Key": "1c29a8971d8342ea946d80520bf52e78"
							},
							"body": {
								"value": "{\n\t\"targetResourceId\": \"@{activity('WebDestination').output.targetResourceId}\",\n\t\"targetResourceRegion\": \"@{activity('WebDestination').output.targetResourceRegion}\",\n\t\"targetModelId\": \"@{activity('WebDestination').output.targetModelId}\",\n\t\"targetModelLocation\": \"@{activity('WebDestination').output.targetModelLocation}\",\n\t\"accessToken\": \"@{activity('WebDestination').output.accessToken}\",\n\t\"expirationDateTime\": \"@{activity('WebDestination').output.expirationDateTime}\"\n  }\n\t",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-01T08:47:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_childpipeline_source_raw')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach file",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@array(pipeline().parameters.childitems)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Switch1",
									"description": "check the file type and switch and copy the data from source to raw accordingly",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@if(\n contains(string(item().name),'csv'),\n'csv',\nif(\n    contains(string(item().name),'pdf'),\n    'pdf',\n    'xml'\n    )\n  )",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "csv",
												"activities": [
													{
														"name": "Copy csv file",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobFSReadSettings",
																	"recursive": true,
																	"modifiedDatetimeStart": {
																		"value": "@addhours(string(utcnow()),-3)",
																		"type": "Expression"
																	},
																	"modifiedDatetimeEnd": {
																		"value": "@utcnow()",
																		"type": "Expression"
																	},
																	"wildcardFolderPath": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	},
																	"wildcardFileName": {
																		"value": "@item().name",
																		"type": "Expression"
																	},
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "DelimitedTextSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "DelimitedTextWriteSettings",
																	"quoteAllText": true,
																	"fileExtension": ".txt"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "ds_source_triplea_adls",
																"type": "DatasetReference",
																"parameters": {
																	"foldername": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "ds_raw_triplea",
																"type": "DatasetReference",
																"parameters": {
																	"source_folder": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	},
																	"filetype": "csv"
																}
															}
														]
													}
												]
											},
											{
												"value": "pdf",
												"activities": [
													{
														"name": "Copy data pdf",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobFSReadSettings",
																	"recursive": true,
																	"modifiedDatetimeStart": {
																		"value": "@addhours(string(utcnow()),-3)",
																		"type": "Expression"
																	},
																	"modifiedDatetimeEnd": {
																		"value": "@utcnow()",
																		"type": "Expression"
																	},
																	"wildcardFolderPath": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	},
																	"wildcardFileName": {
																		"value": "@item().name",
																		"type": "Expression"
																	},
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "DelimitedTextSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "DelimitedTextWriteSettings",
																	"quoteAllText": true,
																	"fileExtension": ".txt"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "ds_source_triplea_adls",
																"type": "DatasetReference",
																"parameters": {
																	"foldername": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "ds_raw_triplea",
																"type": "DatasetReference",
																"parameters": {
																	"source_folder": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	},
																	"filetype": "pdf"
																}
															}
														]
													}
												]
											},
											{
												"value": "xml",
												"activities": [
													{
														"name": "Copy data xml",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobFSReadSettings",
																	"recursive": true,
																	"modifiedDatetimeStart": {
																		"value": "@addhours(string(utcnow()),-3)",
																		"type": "Expression"
																	},
																	"modifiedDatetimeEnd": {
																		"value": "@utcnow()",
																		"type": "Expression"
																	},
																	"wildcardFolderPath": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	},
																	"wildcardFileName": {
																		"value": "@item().name",
																		"type": "Expression"
																	},
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "DelimitedTextSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "DelimitedTextWriteSettings",
																	"quoteAllText": true,
																	"fileExtension": ".txt"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "ds_source_triplea_adls",
																"type": "DatasetReference",
																"parameters": {
																	"foldername": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "ds_raw_triplea",
																"type": "DatasetReference",
																"parameters": {
																	"source_folder": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	},
																	"filetype": "xml"
																}
															}
														]
													}
												]
											}
										]
									}
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "filename",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"childitems": {
						"type": "string"
					},
					"source_folder_name": {
						"type": "string"
					}
				},
				"variables": {
					"filename": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Pipeline_source_to_raw"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-28T10:46:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_source_triplea_adls')]",
				"[concat(variables('factoryId'), '/datasets/ds_raw_triplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_copydata_source_to_raw_adls')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup INTO CONTROLTABLE",
						"description": " up into control table -Control_table_TripleA for source folder name which is the customername",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_Triplea",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup INTO CONTROLTABLE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup INTO CONTROLTABLE').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Get Metadata of source",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_source_triplea_adls",
											"type": "DatasetReference",
											"parameters": {
												"foldername": {
													"value": "@item().Customername",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"childItems",
											"lastModified"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Get Metadata of source",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_childpipeline_source_raw",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"childitems": {
												"value": "@activity('Get Metadata of source').output.childItems",
												"type": "Expression"
											},
											"source_folder_name": {
												"value": "@item().Customername",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Pipeline_source_to_raw"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-28T10:46:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_Triplea')]",
				"[concat(variables('factoryId'), '/datasets/ds_source_triplea_adls')]",
				"[concat(variables('factoryId'), '/pipelines/pl_childpipeline_source_raw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_csv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": "2023-05-28T00:00:00Z",
									"wildcardFolderPath": {
										"value": "@pipeline().parameters.source_folder",
										"type": "Expression"
									},
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_raw_triplea",
								"type": "DatasetReference",
								"parameters": {
									"source_folder": {
										"value": "@pipeline().parameters.source_folder",
										"type": "Expression"
									},
									"filetype": {
										"value": "@pipeline().parameters.Filetype",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {
									"Customerfolder": {
										"value": "@concat(pipeline().parameters.source_folder,'/',substring(utcnow(),0,4),'/',substring(utcnow(),5,2),'/','csv','/','Prestage_csvfiles')",
										"type": "Expression"
									},
									"Filename": {
										"value": "@concat(substring(pipeline().parameters.Filename,0,sub(length(pipeline().parameters.Filename),4)),'.csv')\n",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"source_folder": {
						"type": "String"
					},
					"Filetype": {
						"type": "String"
					},
					"Filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "soure_raw_prestage(csv,pdf)"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-29T05:35:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_raw_triplea')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_dynamicemailalertstest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sourcedata",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sinkdataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-17.eastus.logic.azure.com:443/workflows/47a7979e35b946ce9ef8be69cb0c912e/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=Yhf-YLUbiE4RcAx_8Uw-4P1Eaodwhv9vUjUO0Ib3mbw",
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"value": "{\n\"PipelineRunID\":\"@{pipeline().RunId}\",\n\"PipelineName\":\"@{pipeline().Pipeline}\",\n\"FileSystem\":\"@{pipeline().parameters.Filesystem}\",\n\"Folderpath\":\"@{pipeline().parameters.Folderpath}\",\n\"Emailbody\":\"@{pipeline().parameters.Emailbody}\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Filesystem": {
						"type": "string",
						"defaultValue": "sourceforrejectedfiles"
					},
					"Folderpath": {
						"type": "string",
						"defaultValue": "Customer1/2023/May/RejectionsLevel1"
					},
					"Emailbody": {
						"type": "String",
						"defaultValue": "errorfile"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-26T12:38:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sourcedata')]",
				"[concat(variables('factoryId'), '/datasets/ds_sinkdataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_dynamicemailalertstest_forallfiileformats')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Web1",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-17.eastus.logic.azure.com:443/workflows/47a7979e35b946ce9ef8be69cb0c912e/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=Yhf-YLUbiE4RcAx_8Uw-4P1Eaodwhv9vUjUO0Ib3mbw",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "{\n\"PipelineRunID\":\"@{pipeline().RunId}\",\n\"PipelineName\":\"@{pipeline().Pipeline}\",\n\"FileName\":\"@{item().name}\",\n\"FileSystem\":\"@{pipeline().parameters.Filesystem}\",\n\"Folderpath\":\"@{pipeline().parameters.Folderpath}\",\n\"Emailbody\":\"@{pipeline().parameters.Emailbody}\",\n\"SourcePdfFileName\":\"@{pipeline().parameters.SourcePdfFileName}\",\n\"Sourcepdfpath\":\"@{pipeline().parameters.Sourcepdfpath}\"\n}",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_dataset_for_sourcefolder_files",
								"type": "DatasetReference",
								"parameters": {
									"Folderpath": {
										"value": "@pipeline().parameters.Folderpath",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Filesystem": {
						"type": "string",
						"defaultValue": "sourceforrejectedfiles"
					},
					"Folderpath": {
						"type": "string",
						"defaultValue": "Customer1/2023/May/RejectionsLevel1"
					},
					"Emailbody": {
						"type": "String",
						"defaultValue": "errorfile"
					},
					"SourcePdfFileName": {
						"type": "string",
						"defaultValue": "FMCCustomer.pdf"
					},
					"Sourcepdfpath": {
						"type": "string",
						"defaultValue": "Customer1/2023/May"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-29T10:02:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_dataset_for_sourcefolder_files')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Customerfolder": {
						"type": "String"
					},
					"Filename": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Customerfolder",
							"type": "Expression"
						},
						"fileSystem": "prestagetriplea"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Customerfolder": {
						"type": "String"
					},
					"filename": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Customerfolder",
							"type": "Expression"
						},
						"fileSystem": "prestagetriplea"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"body": {
							"type": "object",
							"properties": {
								"analyzeResult": {
									"type": "object",
									"properties": {
										"apiVersion": {
											"type": "string"
										},
										"content": {
											"type": "string"
										},
										"documents": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"boundingRegions": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"pageNumber": {
																	"type": "string"
																},
																"polygon": {
																	"type": "array",
																	"items": {
																		"type": "string"
																	}
																}
															}
														}
													},
													"confidence": {
														"type": "string"
													},
													"docType": {
														"type": "string"
													},
													"fields": {
														"type": "object",
														"properties": {
															"Billing Information": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Contact Person": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Customer name": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Email": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"FMC_table": {
																"type": "object",
																"properties": {
																	"confidence": {
																		"type": "string"
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueArray": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"confidence": {
																					"type": "string"
																				},
																				"type": {
																					"type": "string"
																				},
																				"valueObject": {
																					"type": "object",
																					"properties": {
																						"Delivery Date": {
																							"type": "object",
																							"properties": {
																								"boundingRegions": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"pageNumber": {
																												"type": "string"
																											},
																											"polygon": {
																												"type": "array",
																												"items": {
																													"type": "string"
																												}
																											}
																										}
																									}
																								},
																								"confidence": {
																									"type": "string"
																								},
																								"content": {
																									"type": "string"
																								},
																								"spans": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"length": {
																												"type": "string"
																											},
																											"offset": {
																												"type": "string"
																											}
																										}
																									}
																								},
																								"type": {
																									"type": "string"
																								},
																								"valueString": {
																									"type": "string"
																								}
																							}
																						},
																						"Item": {
																							"type": "object",
																							"properties": {
																								"boundingRegions": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"pageNumber": {
																												"type": "string"
																											},
																											"polygon": {
																												"type": "array",
																												"items": {
																													"type": "string"
																												}
																											}
																										}
																									}
																								},
																								"confidence": {
																									"type": "string"
																								},
																								"content": {
																									"type": "string"
																								},
																								"spans": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"length": {
																												"type": "string"
																											},
																											"offset": {
																												"type": "string"
																											}
																										}
																									}
																								},
																								"type": {
																									"type": "string"
																								},
																								"valueString": {
																									"type": "string"
																								}
																							}
																						},
																						"Material Number / Description": {
																							"type": "object",
																							"properties": {
																								"boundingRegions": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"pageNumber": {
																												"type": "string"
																											},
																											"polygon": {
																												"type": "array",
																												"items": {
																													"type": "string"
																												}
																											}
																										}
																									}
																								},
																								"confidence": {
																									"type": "string"
																								},
																								"content": {
																									"type": "string"
																								},
																								"spans": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"length": {
																												"type": "string"
																											},
																											"offset": {
																												"type": "string"
																											}
																										}
																									}
																								},
																								"type": {
																									"type": "string"
																								},
																								"valueString": {
																									"type": "string"
																								}
																							}
																						},
																						"Net Amount": {
																							"type": "object",
																							"properties": {
																								"boundingRegions": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"pageNumber": {
																												"type": "string"
																											},
																											"polygon": {
																												"type": "array",
																												"items": {
																													"type": "string"
																												}
																											}
																										}
																									}
																								},
																								"confidence": {
																									"type": "string"
																								},
																								"content": {
																									"type": "string"
																								},
																								"spans": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"length": {
																												"type": "string"
																											},
																											"offset": {
																												"type": "string"
																											}
																										}
																									}
																								},
																								"type": {
																									"type": "string"
																								},
																								"valueString": {
																									"type": "string"
																								}
																							}
																						},
																						"Qty": {
																							"type": "object",
																							"properties": {
																								"boundingRegions": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"pageNumber": {
																												"type": "string"
																											},
																											"polygon": {
																												"type": "array",
																												"items": {
																													"type": "string"
																												}
																											}
																										}
																									}
																								},
																								"confidence": {
																									"type": "string"
																								},
																								"content": {
																									"type": "string"
																								},
																								"spans": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"length": {
																												"type": "string"
																											},
																											"offset": {
																												"type": "string"
																											}
																										}
																									}
																								},
																								"type": {
																									"type": "string"
																								},
																								"valueString": {
																									"type": "string"
																								}
																							}
																						},
																						"UOM": {
																							"type": "object",
																							"properties": {
																								"boundingRegions": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"pageNumber": {
																												"type": "string"
																											},
																											"polygon": {
																												"type": "array",
																												"items": {
																													"type": "string"
																												}
																											}
																										}
																									}
																								},
																								"confidence": {
																									"type": "string"
																								},
																								"content": {
																									"type": "string"
																								},
																								"spans": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"length": {
																												"type": "string"
																											},
																											"offset": {
																												"type": "string"
																											}
																										}
																									}
																								},
																								"type": {
																									"type": "string"
																								},
																								"valueString": {
																									"type": "string"
																								}
																							}
																						},
																						"Unit Price/ Cur": {
																							"type": "object",
																							"properties": {
																								"boundingRegions": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"pageNumber": {
																												"type": "string"
																											},
																											"polygon": {
																												"type": "array",
																												"items": {
																													"type": "string"
																												}
																											}
																										}
																									}
																								},
																								"confidence": {
																									"type": "string"
																								},
																								"content": {
																									"type": "string"
																								},
																								"spans": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"length": {
																												"type": "string"
																											},
																											"offset": {
																												"type": "string"
																											}
																										}
																									}
																								},
																								"type": {
																									"type": "string"
																								},
																								"valueString": {
																									"type": "string"
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															},
															"Information Email": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Information- Date": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Information- Terms of Payment": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Purchase Order": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Ship To/ Delivery Address": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Sub Total": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Total Amount": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Vendor Address": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Vendor Name": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Vendor Number": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Vendor Telephone": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Vendor VAT Number": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															}
														}
													},
													"spans": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"length": {
																	"type": "string"
																},
																"offset": {
																	"type": "string"
																}
															}
														}
													}
												}
											}
										},
										"modelId": {
											"type": "string"
										},
										"pages": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"angle": {
														"type": "string"
													},
													"height": {
														"type": "string"
													},
													"kind": {
														"type": "string"
													},
													"lines": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"content": {
																	"type": "string"
																},
																"polygon": {
																	"type": "array",
																	"items": {
																		"type": "string"
																	}
																},
																"spans": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"length": {
																				"type": "string"
																			},
																			"offset": {
																				"type": "string"
																			}
																		}
																	}
																}
															}
														}
													},
													"pageNumber": {
														"type": "string"
													},
													"spans": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"length": {
																	"type": "string"
																},
																"offset": {
																	"type": "string"
																}
															}
														}
													},
													"unit": {
														"type": "string"
													},
													"width": {
														"type": "string"
													},
													"words": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"confidence": {
																	"type": "string"
																},
																"content": {
																	"type": "string"
																},
																"polygon": {
																	"type": "array",
																	"items": {
																		"type": "string"
																	}
																},
																"span": {
																	"type": "object",
																	"properties": {
																		"length": {
																			"type": "string"
																		},
																		"offset": {
																			"type": "string"
																		}
																	}
																}
															}
														}
													}
												}
											}
										},
										"stringIndexType": {
											"type": "string"
										},
										"styles": {
											"type": "array"
										},
										"tables": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"boundingRegions": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"pageNumber": {
																	"type": "string"
																},
																"polygon": {
																	"type": "array",
																	"items": {
																		"type": "string"
																	}
																}
															}
														}
													},
													"cells": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"boundingRegions": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"pageNumber": {
																				"type": "string"
																			},
																			"polygon": {
																				"type": "array",
																				"items": {
																					"type": "string"
																				}
																			}
																		}
																	}
																},
																"columnIndex": {
																	"type": "string"
																},
																"content": {
																	"type": "string"
																},
																"kind": {
																	"type": "string"
																},
																"rowIndex": {
																	"type": "string"
																},
																"spans": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"length": {
																				"type": "string"
																			},
																			"offset": {
																				"type": "string"
																			}
																		}
																	}
																}
															}
														}
													},
													"columnCount": {
														"type": "string"
													},
													"rowCount": {
														"type": "string"
													},
													"spans": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"length": {
																	"type": "string"
																},
																"offset": {
																	"type": "string"
																}
															}
														}
													}
												}
											}
										}
									}
								},
								"createdDateTime": {
									"type": "string"
								},
								"lastUpdatedDateTime": {
									"type": "string"
								},
								"status": {
									"type": "string"
								}
							}
						},
						"headers": {
							"type": "object",
							"properties": {
								"Strict-Transport-Security": {
									"type": "string"
								},
								"apim-request-id": {
									"type": "string"
								},
								"x-envoy-upstream-service-time": {
									"type": "string"
								},
								"Content-Length": {
									"type": "string"
								},
								"Content-Type": {
									"type": "string"
								},
								"Date": {
									"type": "string"
								},
								"x-ms-region": {
									"type": "string"
								},
								"x-content-type-options": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sourcefiles",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Customerfolder": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().Customerfolder",
							"type": "Expression"
						},
						"fileSystem": "rawtriplea"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"body": {
							"type": "object",
							"properties": {
								"analyzeResult": {
									"type": "object",
									"properties": {
										"apiVersion": {
											"type": "string"
										},
										"content": {
											"type": "string"
										},
										"documents": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"boundingRegions": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"pageNumber": {
																	"type": "string"
																},
																"polygon": {
																	"type": "array",
																	"items": {
																		"type": "string"
																	}
																}
															}
														}
													},
													"confidence": {
														"type": "string"
													},
													"docType": {
														"type": "string"
													},
													"fields": {
														"type": "object",
														"properties": {
															"Billing Information": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Contact Person": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Customer name": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Email": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"FMC_table": {
																"type": "object",
																"properties": {
																	"confidence": {
																		"type": "string"
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueArray": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"confidence": {
																					"type": "string"
																				},
																				"type": {
																					"type": "string"
																				},
																				"valueObject": {
																					"type": "object",
																					"properties": {
																						"Delivery Date": {
																							"type": "object",
																							"properties": {
																								"boundingRegions": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"pageNumber": {
																												"type": "string"
																											},
																											"polygon": {
																												"type": "array",
																												"items": {
																													"type": "string"
																												}
																											}
																										}
																									}
																								},
																								"confidence": {
																									"type": "string"
																								},
																								"content": {
																									"type": "string"
																								},
																								"spans": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"length": {
																												"type": "string"
																											},
																											"offset": {
																												"type": "string"
																											}
																										}
																									}
																								},
																								"type": {
																									"type": "string"
																								},
																								"valueString": {
																									"type": "string"
																								}
																							}
																						},
																						"Item": {
																							"type": "object",
																							"properties": {
																								"boundingRegions": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"pageNumber": {
																												"type": "string"
																											},
																											"polygon": {
																												"type": "array",
																												"items": {
																													"type": "string"
																												}
																											}
																										}
																									}
																								},
																								"confidence": {
																									"type": "string"
																								},
																								"content": {
																									"type": "string"
																								},
																								"spans": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"length": {
																												"type": "string"
																											},
																											"offset": {
																												"type": "string"
																											}
																										}
																									}
																								},
																								"type": {
																									"type": "string"
																								},
																								"valueString": {
																									"type": "string"
																								}
																							}
																						},
																						"Material Number / Description": {
																							"type": "object",
																							"properties": {
																								"boundingRegions": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"pageNumber": {
																												"type": "string"
																											},
																											"polygon": {
																												"type": "array",
																												"items": {
																													"type": "string"
																												}
																											}
																										}
																									}
																								},
																								"confidence": {
																									"type": "string"
																								},
																								"content": {
																									"type": "string"
																								},
																								"spans": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"length": {
																												"type": "string"
																											},
																											"offset": {
																												"type": "string"
																											}
																										}
																									}
																								},
																								"type": {
																									"type": "string"
																								},
																								"valueString": {
																									"type": "string"
																								}
																							}
																						},
																						"Net Amount": {
																							"type": "object",
																							"properties": {
																								"boundingRegions": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"pageNumber": {
																												"type": "string"
																											},
																											"polygon": {
																												"type": "array",
																												"items": {
																													"type": "string"
																												}
																											}
																										}
																									}
																								},
																								"confidence": {
																									"type": "string"
																								},
																								"content": {
																									"type": "string"
																								},
																								"spans": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"length": {
																												"type": "string"
																											},
																											"offset": {
																												"type": "string"
																											}
																										}
																									}
																								},
																								"type": {
																									"type": "string"
																								},
																								"valueString": {
																									"type": "string"
																								}
																							}
																						},
																						"Qty": {
																							"type": "object",
																							"properties": {
																								"boundingRegions": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"pageNumber": {
																												"type": "string"
																											},
																											"polygon": {
																												"type": "array",
																												"items": {
																													"type": "string"
																												}
																											}
																										}
																									}
																								},
																								"confidence": {
																									"type": "string"
																								},
																								"content": {
																									"type": "string"
																								},
																								"spans": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"length": {
																												"type": "string"
																											},
																											"offset": {
																												"type": "string"
																											}
																										}
																									}
																								},
																								"type": {
																									"type": "string"
																								},
																								"valueString": {
																									"type": "string"
																								}
																							}
																						},
																						"UOM": {
																							"type": "object",
																							"properties": {
																								"boundingRegions": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"pageNumber": {
																												"type": "string"
																											},
																											"polygon": {
																												"type": "array",
																												"items": {
																													"type": "string"
																												}
																											}
																										}
																									}
																								},
																								"confidence": {
																									"type": "string"
																								},
																								"content": {
																									"type": "string"
																								},
																								"spans": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"length": {
																												"type": "string"
																											},
																											"offset": {
																												"type": "string"
																											}
																										}
																									}
																								},
																								"type": {
																									"type": "string"
																								},
																								"valueString": {
																									"type": "string"
																								}
																							}
																						},
																						"Unit Price/ Cur": {
																							"type": "object",
																							"properties": {
																								"boundingRegions": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"pageNumber": {
																												"type": "string"
																											},
																											"polygon": {
																												"type": "array",
																												"items": {
																													"type": "string"
																												}
																											}
																										}
																									}
																								},
																								"confidence": {
																									"type": "string"
																								},
																								"content": {
																									"type": "string"
																								},
																								"spans": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"length": {
																												"type": "string"
																											},
																											"offset": {
																												"type": "string"
																											}
																										}
																									}
																								},
																								"type": {
																									"type": "string"
																								},
																								"valueString": {
																									"type": "string"
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															},
															"Information Email": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Information- Date": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Information- Terms of Payment": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Purchase Order": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Ship To/ Delivery Address": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Sub Total": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Total Amount": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Vendor Address": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Vendor Name": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Vendor Number": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Vendor Telephone": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Vendor VAT Number": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															}
														}
													},
													"spans": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"length": {
																	"type": "string"
																},
																"offset": {
																	"type": "string"
																}
															}
														}
													}
												}
											}
										},
										"modelId": {
											"type": "string"
										},
										"pages": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"angle": {
														"type": "string"
													},
													"height": {
														"type": "string"
													},
													"kind": {
														"type": "string"
													},
													"lines": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"content": {
																	"type": "string"
																},
																"polygon": {
																	"type": "array",
																	"items": {
																		"type": "string"
																	}
																},
																"spans": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"length": {
																				"type": "string"
																			},
																			"offset": {
																				"type": "string"
																			}
																		}
																	}
																}
															}
														}
													},
													"pageNumber": {
														"type": "string"
													},
													"spans": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"length": {
																	"type": "string"
																},
																"offset": {
																	"type": "string"
																}
															}
														}
													},
													"unit": {
														"type": "string"
													},
													"width": {
														"type": "string"
													},
													"words": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"confidence": {
																	"type": "string"
																},
																"content": {
																	"type": "string"
																},
																"polygon": {
																	"type": "array",
																	"items": {
																		"type": "string"
																	}
																},
																"span": {
																	"type": "object",
																	"properties": {
																		"length": {
																			"type": "string"
																		},
																		"offset": {
																			"type": "string"
																		}
																	}
																}
															}
														}
													}
												}
											}
										},
										"stringIndexType": {
											"type": "string"
										},
										"styles": {
											"type": "array"
										},
										"tables": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"boundingRegions": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"pageNumber": {
																	"type": "string"
																},
																"polygon": {
																	"type": "array",
																	"items": {
																		"type": "string"
																	}
																}
															}
														}
													},
													"cells": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"boundingRegions": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"pageNumber": {
																				"type": "string"
																			},
																			"polygon": {
																				"type": "array",
																				"items": {
																					"type": "string"
																				}
																			}
																		}
																	}
																},
																"columnIndex": {
																	"type": "string"
																},
																"content": {
																	"type": "string"
																},
																"kind": {
																	"type": "string"
																},
																"rowIndex": {
																	"type": "string"
																},
																"spans": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"length": {
																				"type": "string"
																			},
																			"offset": {
																				"type": "string"
																			}
																		}
																	}
																}
															}
														}
													},
													"columnCount": {
														"type": "string"
													},
													"rowCount": {
														"type": "string"
													},
													"spans": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"length": {
																	"type": "string"
																},
																"offset": {
																	"type": "string"
																}
															}
														}
													}
												}
											}
										}
									}
								},
								"createdDateTime": {
									"type": "string"
								},
								"lastUpdatedDateTime": {
									"type": "string"
								},
								"status": {
									"type": "string"
								}
							}
						},
						"headers": {
							"type": "object",
							"properties": {
								"Strict-Transport-Security": {
									"type": "string"
								},
								"apim-request-id": {
									"type": "string"
								},
								"x-envoy-upstream-service-time": {
									"type": "string"
								},
								"Content-Length": {
									"type": "string"
								},
								"Content-Type": {
									"type": "string"
								},
								"Date": {
									"type": "string"
								},
								"x-ms-region": {
									"type": "string"
								},
								"x-content-type-options": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sourcefiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResource1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestService2",
					"type": "LinkedServiceReference",
					"parameters": {
						"url": {
							"value": "@dataset().url",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"url": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestService2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResource12')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestService2",
					"type": "LinkedServiceReference",
					"parameters": {
						"url": {
							"value": "@dataset().url",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"url": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestService2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResource13')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestService2",
					"type": "LinkedServiceReference",
					"parameters": {
						"url": {
							"value": "@dataset().url",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"url": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestService2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResource1311')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestService1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"url": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestService1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResource1312')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestService1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestService1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_FMC_PDF_Raw')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Triplea_adls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "RAW",
						"fileSystem": "fmcpdf"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_TripleA_adls')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Triplea_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filepath": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().filepath",
							"type": "Expression"
						},
						"fileSystem": "triplesourcefiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_TripleA_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Triplea_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "String"
					},
					"sinkdir": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().sinkdir",
							"type": "Expression"
						},
						"fileSystem": "tripleaprocessedcsvfiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "customer_name",
						"type": "String"
					},
					{
						"name": "order_number",
						"type": "String"
					},
					{
						"name": "item_number",
						"type": "String"
					},
					{
						"name": "reference",
						"type": "String"
					},
					{
						"name": "orderdate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_TripleA_sink1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Triplea_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "String"
					},
					"sinkdir": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().sinkdir",
							"type": "Expression"
						},
						"fileSystem": "tripleaprocessedcsvfiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "customer_name",
						"type": "String"
					},
					{
						"name": "order_number",
						"type": "String"
					},
					{
						"name": "item_number",
						"type": "String"
					},
					{
						"name": "reference",
						"type": "String"
					},
					{
						"name": "orderdate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_TripleA_sink2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Triplea_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "String"
					},
					"sinkdir": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().sinkdir",
							"type": "Expression"
						},
						"fileSystem": "tripleaprocessedcsvfiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "customer_name",
						"type": "String"
					},
					{
						"name": "order_number",
						"type": "String"
					},
					{
						"name": "item_number",
						"type": "String"
					},
					{
						"name": "reference",
						"type": "String"
					},
					{
						"name": "orderdate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_TripleA_source_files')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Triplea_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filepath_dir": {
						"type": "String"
					},
					"filename": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "triplesourcefiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "customer_name",
						"type": "String"
					},
					{
						"name": "order_number",
						"type": "String"
					},
					{
						"name": "item_number",
						"type": "String"
					},
					{
						"name": "reference",
						"type": "String"
					},
					{
						"name": "orderdate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_TripleA_source_files1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Triplea_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filepath_dir": {
						"type": "String"
					},
					"filename": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "triplesourcefiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "customer_name",
						"type": "String"
					},
					{
						"name": "order_number",
						"type": "String"
					},
					{
						"name": "item_number",
						"type": "String"
					},
					{
						"name": "reference",
						"type": "String"
					},
					{
						"name": "orderdate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_TripleA_source_files2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Triplea_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filepath_dir": {
						"type": "String"
					},
					"filename": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "triplesourcefiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "customer_name",
						"type": "String"
					},
					{
						"name": "order_number",
						"type": "String"
					},
					{
						"name": "item_number",
						"type": "String"
					},
					{
						"name": "reference",
						"type": "String"
					},
					{
						"name": "orderdate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_c1_order')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Filepath": {
						"type": "String"
					},
					"Filename": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Filepath",
							"type": "Expression"
						},
						"fileSystem": "prestagetriplea"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_c1_order_graphicfile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"graphicfilename": {
						"type": "String"
					},
					"GraphicFilepath": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().graphicfilename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().GraphicFilepath",
							"type": "Expression"
						},
						"fileSystem": "graphicfiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_controlfiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_a4ltriplea",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "File type",
						"type": "varchar"
					},
					{
						"name": "File name",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "control_files"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_a4ltriplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_dataset_for_sourcefolder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sourceforrejectedfiles",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Folderpath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().Folderpath",
							"type": "Expression"
						},
						"fileSystem": "sourceforrejectedfiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "customer_name",
						"type": "String"
					},
					{
						"name": "order_number",
						"type": "String"
					},
					{
						"name": "item_number",
						"type": "String"
					},
					{
						"name": "reference",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sourceforrejectedfiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_dataset_for_sourcefolder_files')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sourceforrejectedfiles",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Folderpath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().Folderpath",
							"type": "Expression"
						},
						"fileSystem": "sourceforrejectedfiles"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sourceforrejectedfiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_keyvaluepair')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_source_triplea",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "keyvalues.csv",
						"folderPath": "Processed/PDF_Order/StageforTableAndKeyValues",
						"fileSystem": "pdfextraction"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Anlieferung",
						"type": "String"
					},
					{
						"name": "Kontrakt",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_source_triplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_keyvaluepair1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_source_triplea",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "keyvalues.csv",
						"folderPath": "Processed/PDF_Order/StageforTableAndKeyValues",
						"fileSystem": "pdfextraction"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Anlieferung",
						"type": "String"
					},
					{
						"name": "Kontrakt",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_source_triplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_maintable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_source_triplea",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Table.csv",
						"folderPath": "Processed/PDF_Order/StageforTableAndKeyValues",
						"fileSystem": "pdfextraction"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "'"
				},
				"schema": [
					{
						"name": "Pos",
						"type": "String"
					},
					{
						"name": "Artikel",
						"type": "String"
					},
					{
						"name": "Bezeichnung",
						"type": "String"
					},
					{
						"name": "Termin",
						"type": "String"
					},
					{
						"name": "Menge",
						"type": "String"
					},
					{
						"name": "ME",
						"type": "String"
					},
					{
						"name": "Preis",
						"type": "String"
					},
					{
						"name": "G-Wert EUR",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_source_triplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_maintable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_source_triplea",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Table.csv",
						"folderPath": "Processed/PDF_Order/StageforTableAndKeyValues",
						"fileSystem": "pdfextraction"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "'"
				},
				"schema": [
					{
						"name": "Pos",
						"type": "String"
					},
					{
						"name": "Artikel",
						"type": "String"
					},
					{
						"name": "Bezeichnung",
						"type": "String"
					},
					{
						"name": "Termin",
						"type": "String"
					},
					{
						"name": "Menge",
						"type": "String"
					},
					{
						"name": "ME",
						"type": "String"
					},
					{
						"name": "Preis",
						"type": "String"
					},
					{
						"name": "G-Wert EUR",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_source_triplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_raw_triplea')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Triplea_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"source_folder": {
						"type": "String"
					},
					"filetype": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat(dataset().source_folder,'/',substring(utcnow(),0,4),'/',substring(utcnow(),5,2),'/',dataset().filetype,'/')",
							"type": "Expression"
						},
						"fileSystem": "rawtriplea"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sinkdata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sinktriplea",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Customer1/2023/May/RejectionsLevel1",
						"fileSystem": "sourceforrejectedfiles"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sinktriplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sinkdataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sourcefiles",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Customer1/2023/May/RejectionsLevel1",
						"fileSystem": "sourceforrejectedfiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sourcefiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_source_triplea_adls')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Triplea_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"foldername": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().foldername",
							"type": "Expression"
						},
						"fileSystem": "sourcesharepoint"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sourceallformatfiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sourcefolder",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "customer1order.csv",
						"folderPath": "customer1",
						"fileSystem": "sourcedata"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sourcefolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sourcedata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sourceforrejectedfiles",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "customer1order.csv",
						"folderPath": "Customer1",
						"fileSystem": "sourcefiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sourceforrejectedfiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_Triplea')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_a4ltriplea",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Control_table_TripleA"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_a4ltriplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/getdatalake')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Triplea_adls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "sourceforrejectedfiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "customer_name",
						"type": "String"
					},
					{
						"name": "order_number",
						"type": "String"
					},
					{
						"name": "item_number",
						"type": "String"
					},
					{
						"name": "reference",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage2_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_Triplea_adls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_Triplea_adls_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('LS_Triplea_adls_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestService1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestService1_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestService2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"url": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestService2_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_SqlServer')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('ls_SqlServer_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sinktriplea')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_sinktriplea_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_sinktriplea_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_source_triplea')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"URL": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_source_triplea_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_source_triplea_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sourcedatapdf')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_sourcedatapdf_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_sourcedatapdf_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sourcefilenames')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_sourcefilenames_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_sourcefilenames_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sourcefiles')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_sourcefiles_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_sourcefiles_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sourcefolder')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_sourcefolder_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_sourcefolder_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sourceforrejectedfiles')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_sourceforrejectedfiles_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_sourceforrejectedfiles_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sql_a4ltriplea')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_sql_a4ltriplea_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/JsonToTable_binderkontraktjson-type42')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This dataflow takes the output from Form Recognizer and extracts the table information to a storage sink.\nThis specifically works with the Form Recognizer Layout API. You can also save the transformations as a flowlet if you would like to reuse the logic in other dataflows. ",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "flatten2"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Filename1 as string",
						"}",
						"source(output(",
						"          body as (analyzeResult as (apiVersion as date, content as string, documents as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, docType as string, fields as ({Billing Information} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Contact Person} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Customer name} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), Email as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), FMC_table as (confidence as boolean, type as string, valueArray as (confidence as boolean, type as string, valueObject as ({Delivery Date} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), Item as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as short, spans as (length as short, offset as short)[], type as string, valueString as short), {Material Number / Description} as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Net Amount} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), Qty as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), UOM as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Unit Price/ Cur} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string)))[]), {Information Email} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Information- Date} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Information- Terms of Payment} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Purchase Order} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as long, spans as (length as short, offset as short)[], type as string, valueString as long), {Ship To/ Delivery Address} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Sub Total} as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Total Amount} as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Vendor Address} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Vendor Name} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Vendor Number} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as integer, spans as (length as short, offset as short)[], type as string, valueString as integer), {Vendor Telephone} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as long, spans as (length as short, offset as short)[], type as string, valueString as long), {Vendor VAT Number} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string)), spans as (length as short, offset as boolean)[])[], modelId as string, pages as (angle as boolean, height as short, kind as string, lines as (content as string, polygon as double[], spans as (length as short, offset as short)[])[], pageNumber as short, spans as (length as short, offset as short)[], unit as string, width as double, words as (confidence as double, content as string, polygon as double[], span as (length as short, offset as short))[])[], stringIndexType as string, styles as string[], tables as (boundingRegions as (pageNumber as short, polygon as double[])[], cells as (boundingRegions as (pageNumber as short, polygon as double[])[], columnIndex as short, content as string, kind as string, rowIndex as short, rowSpan as short, spans as (length as short, offset as short)[])[], columnCount as short, rowCount as short, spans as (length as short, offset as short)[])[]), createdDateTime as timestamp, lastUpdatedDateTime as timestamp, status as string),",
						"          headers as ({Content-Length} as integer, {Content-Type} as string, Date as string, {Strict-Transport-Security} as string, {apim-request-id} as string, {x-content-type-options} as string, {x-envoy-upstream-service-time} as short, {x-ms-region} as string)",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     format: 'json',",
						"     fileSystem: 'fmcpdf',",
						"     folderPath: 'STAGE',",
						"     fileName: 'jsonv3.0.json',",
						"     documentForm: 'singleDocument',",
						"     partitionBy('hash', 1)) ~> source1",
						"source(output(",
						"          body as (analyzeResult as (apiVersion as date, content as string, documents as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, docType as string, fields as ({Billing Information} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Contact Person} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Customer name} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), Email as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), FMC_table as (confidence as boolean, type as string, valueArray as (confidence as boolean, type as string, valueObject as ({Delivery Date} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), Item as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as short, spans as (length as short, offset as short)[], type as string, valueString as short), {Material Number / Description} as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Net Amount} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), Qty as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), UOM as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Unit Price/ Cur} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string)))[]), {Information Email} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Information- Date} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Information- Terms of Payment} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Purchase Order} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as long, spans as (length as short, offset as short)[], type as string, valueString as long), {Ship To/ Delivery Address} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Sub Total} as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Total Amount} as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Vendor Address} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Vendor Name} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Vendor Number} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as integer, spans as (length as short, offset as short)[], type as string, valueString as integer), {Vendor Telephone} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as long, spans as (length as short, offset as short)[], type as string, valueString as long), {Vendor VAT Number} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string)), spans as (length as short, offset as boolean)[])[], modelId as string, pages as (angle as boolean, height as short, kind as string, lines as (content as string, polygon as double[], spans as (length as short, offset as short)[])[], pageNumber as short, spans as (length as short, offset as short)[], unit as string, width as double, words as (confidence as double, content as string, polygon as double[], span as (length as short, offset as short))[])[], stringIndexType as string, styles as string[], tables as (boundingRegions as (pageNumber as short, polygon as double[])[], cells as (boundingRegions as (pageNumber as short, polygon as double[])[], columnIndex as short, content as string, kind as string, rowIndex as short, rowSpan as short, spans as (length as short, offset as short)[])[], columnCount as short, rowCount as short, spans as (length as short, offset as short)[])[]), createdDateTime as timestamp, lastUpdatedDateTime as timestamp, status as string),",
						"          headers as ({Content-Length} as integer, {Content-Type} as string, Date as string, {Strict-Transport-Security} as string, {apim-request-id} as string, {x-content-type-options} as string, {x-envoy-upstream-service-time} as short, {x-ms-region} as string)",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'json',",
						"     fileSystem: 'fmcpdf',",
						"     folderPath: 'STAGE',",
						"     fileName: 'jsonv3.0.json',",
						"     documentForm: 'documentPerLine') ~> source2",
						"source1 foldDown(unroll(body.analyzeResult.documents),",
						"     mapColumn(",
						"          {Billing Information} = body.analyzeResult.documents.fields.{Billing Information}.content,",
						"          {Contact Person} = body.analyzeResult.documents.fields.{Contact Person}.content,",
						"          {Customer Name} = body.analyzeResult.documents.fields.{Customer name}.content,",
						"          Email = body.analyzeResult.documents.fields.Email.content,",
						"          {Information Email} = body.analyzeResult.documents.fields.{Information Email}.content,",
						"          {Information Date} = body.analyzeResult.documents.fields.{Information- Date}.content,",
						"          {Information-Terms of Payment} = body.analyzeResult.documents.fields.{Information- Terms of Payment}.content,",
						"          {Purchase Order} = body.analyzeResult.documents.fields.{Purchase Order}.content,",
						"          {Ship To/ Delivery Addressntent} = body.analyzeResult.documents.fields.{Ship To/ Delivery Address}.content,",
						"          {Sub Total} = body.analyzeResult.documents.fields.{Sub Total}.content,",
						"          {Total Amount} = body.analyzeResult.documents.fields.{Total Amount}.content,",
						"          {Vendor Address} = body.analyzeResult.documents.fields.{Vendor Address}.content,",
						"          {Vendor Name} = body.analyzeResult.documents.fields.{Vendor Name}.content,",
						"          {Vendor Number} = body.analyzeResult.documents.fields.{Vendor Number}.content,",
						"          {Vendor Telephone} = body.analyzeResult.documents.fields.{Vendor Telephone}.content,",
						"          {Vendor VAT Number} = body.analyzeResult.documents.fields.{Vendor VAT Number}.content",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 derive(Lookup = 1,",
						"          File_name = $Filename1) ~> derivedColumn1",
						"source2 foldDown(unroll(body.analyzeResult.documents.fields.FMC_table.valueArray),",
						"     mapColumn(",
						"          Item = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.Item.content,",
						"          {Material Number / Description} = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.{Material Number / Description}.content,",
						"          Qty = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.Qty.content,",
						"          UOM = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.UOM.content,",
						"          {Unit Price/ Cur} = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.{Unit Price/ Cur}.content,",
						"          {Net Amount} = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.{Net Amount}.content,",
						"          {Delivery Date} = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.{Delivery Date}.content",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten2",
						"flatten2 derive(Lookup = 1) ~> derivedColumn2",
						"derivedColumn2, derivedColumn1 lookup(derivedColumn2@Lookup == derivedColumn1@Lookup,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 select(mapColumn(",
						"          Item,",
						"          {Material Number / Description},",
						"          Qty,",
						"          UOM,",
						"          {Unit Price/ Cur},",
						"          {Net Amount},",
						"          {Delivery Date},",
						"          {Billing Information},",
						"          {Contact Person},",
						"          {Customer Name},",
						"          Email,",
						"          {Information Email},",
						"          {Information Date},",
						"          {Information-Terms of Payment},",
						"          {Purchase Order},",
						"          {Ship To/ Delivery Addressntent},",
						"          {Sub Total},",
						"          {Total Amount},",
						"          {Vendor Address},",
						"          {Vendor Name},",
						"          {Vendor Number},",
						"          {Vendor Telephone},",
						"          {Vendor VAT Number},",
						"          Filename = File_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'fmcpdf',",
						"     folderPath: 'PROCESSED',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/JsonToTable_test_1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This dataflow takes the output from Form Recognizer and extracts the table information to a storage sink.\nThis specifically works with the Form Recognizer Layout API. You can also save the transformations as a flowlet if you would like to reuse the logic in other dataflows. ",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_source_triplea",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_source_triplea",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						},
						{
							"linkedService": {
								"referenceName": "ls_source_triplea",
								"type": "LinkedServiceReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "flatten2"
						},
						{
							"name": "filter1"
						},
						{
							"name": "flatten3"
						},
						{
							"name": "filter2"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "select1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "select2"
						},
						{
							"name": "pivot1"
						},
						{
							"name": "filter3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          body as (analyzeResult as (apiVersion as date, content as string, documents as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as boolean, docType as string, fields as (BillingAddress as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueAddress as (city as string, houseNumber as boolean, postalCode as short, road as string, streetAddress as string)), BillingAddressRecipient as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), CustomerAddress as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueAddress as (city as string, houseNumber as string, postalCode as short, road as string, streetAddress as string)), CustomerAddressRecipient as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), CustomerName as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), InvoiceDate as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueDate as date), InvoiceTotal as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueCurrency as (amount as double)), Items as (type as string, valueArray as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueObject as (Amount as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueCurrency as (amount as double)), Date as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueDate as date), Description as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), ProductCode as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as integer, spans as (length as short, offset as short)[], type as string, valueString as integer), Quantity as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as double, spans as (length as short, offset as short)[], type as string, valueNumber as integer), Unit as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), UnitPrice as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueCurrency as (amount as double))))[]), PaymentDetails as (type as string, valueArray as (confidence as double, type as string, valueObject as (IBAN as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), SWIFT as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string)))[]), PaymentTerm as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), ShippingAddress as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueAddress as (city as string, houseNumber as boolean, postalCode as string, road as string, streetAddress as string)), VendorAddress as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueAddress as (city as string, postalCode as string, streetAddress as string)), VendorAddressRecipient as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), VendorName as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), VendorTaxId as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string)), spans as (length as short, offset as boolean)[])[], keyValuePairs as (confidence as double, key as (boundingRegions as (pageNumber as short, polygon as double[])[], content as string, spans as (length as short, offset as short)[]), value as (boundingRegions as (pageNumber as short, polygon as double[])[], content as string, spans as (length as short, offset as short)[]))[], modelId as string, pages as (angle as double, height as double, kind as string, lines as (content as string, polygon as double[], spans as (length as short, offset as short)[])[], pageNumber as short, selectionMarks as (confidence as double, polygon as double[], span as (length as short, offset as short), state as string)[], spans as (length as short, offset as short)[], unit as string, width as double, words as (confidence as double, content as string, polygon as double[], span as (length as short, offset as short))[])[], paragraphs as (boundingRegions as (pageNumber as short, polygon as double[])[], content as string, role as string, spans as (length as short, offset as short)[])[], stringIndexType as string, styles as (confidence as boolean, isHandwritten as boolean, spans as (length as boolean, offset as short)[])[], tables as (boundingRegions as (pageNumber as short, polygon as double[])[], cells as (boundingRegions as (pageNumber as short, polygon as double[])[], columnIndex as short, columnSpan as short, content as string, kind as string, rowIndex as short, spans as (length as short, offset as short)[])[], columnCount as short, rowCount as short, spans as (length as short, offset as short)[])[]), createdDateTime as timestamp, lastUpdatedDateTime as timestamp, status as string),",
						"          headers as ({Content-Length} as integer, {Content-Type} as string, Date as string, {Strict-Transport-Security} as string, {apim-request-id} as string, {x-content-type-options} as string, {x-envoy-upstream-service-time} as short, {x-ms-region} as string)",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     format: 'json',",
						"     fileSystem: 'pdfextraction',",
						"     folderPath: 'Stage/PDF_Order',",
						"     fileName: 'jsonv3.0.json',",
						"     documentForm: 'singleDocument',",
						"     partitionBy('hash', 1)) ~> source1",
						"source1 foldDown(unroll(body.analyzeResult.tables),",
						"     mapColumn(",
						"          cells = body.analyzeResult.tables.cells,",
						"          columns = body.analyzeResult.tables.columnCount,",
						"          rows = body.analyzeResult.tables.rowCount",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"derivedColumn1 aggregate(groupBy(TabNum = tablenumber,",
						"          isHeader,",
						"          rowIndex),",
						"     text = replace(trim(trim(toString(collect(content)), '['),']'),'\"',''),",
						"     partitionBy('hash', 1)) ~> aggregate1",
						"surrogateKey1 foldDown(unroll(cells),",
						"     mapColumn(",
						"          tablenumber = page,",
						"          columnIndex = cells.columnIndex,",
						"          isHeader = cells.kind,",
						"          rowIndex = cells.rowIndex,",
						"          content = cells.content",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten2",
						"flatten1 filter(not(isNull(cells)),",
						"     partitionBy('hash', 1)) ~> filter1",
						"source1 foldDown(unroll(body.analyzeResult.keyValuePairs),",
						"     mapColumn(",
						"          Key = body.analyzeResult.keyValuePairs.key.content,",
						"          Value = body.analyzeResult.keyValuePairs.value.content",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 filter(Key=='Kontrakt'||",
						"Key=='Anlieferung'||",
						"Key=='Datum') ~> filter2",
						"filter1 keyGenerate(output(page as long),",
						"     startAt: 1L,",
						"     stepValue: 1L,",
						"     partitionBy('hash', 1)) ~> surrogateKey1",
						"filter3 select(mapColumn(",
						"          text",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"aggregate1 sort(asc(rowIndex, true),",
						"     partitionBy('hash', 1)) ~> sort1",
						"flatten2 derive(content = concat(\"'\",content,\"'\")) ~> derivedColumn1",
						"filter2 aggregate(groupBy(Key,",
						"          Value),",
						"     count = count(Key),",
						"     partitionBy('hash', 1)) ~> aggregate2",
						"aggregate2 select(mapColumn(",
						"          Key,",
						"          Value",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 pivot(pivotBy(Key),",
						"     {} = first(Value),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> pivot1",
						"sort1 filter(not((TabNum!=1)&&rowIndex==0)) ~> filter3",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'pdfextraction',",
						"     folderPath: 'Processed/PDF_Order/StageforTableAndKeyValues',",
						"     rowDelimiter: '',",
						"     columnDelimiter: '',",
						"     escapeChar: '',",
						"     quoteChar: '',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:['Table.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          text",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1",
						"pivot1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'pdfextraction',",
						"     folderPath: 'Processed/PDF_Order/StageforTableAndKeyValues',",
						"     columnDelimiter: ',',",
						"     escapeChar: '',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['keyvalues.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_source_triplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MergeAndLoadTocsv')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_maintable",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "ds_keyvaluepair",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_source_triplea",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Pos as string,",
						"          Artikel as string,",
						"          Bezeichnung as string,",
						"          Termin as string,",
						"          Menge as string,",
						"          ME as string,",
						"          Preis as string,",
						"          {G-Wert EUR} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          Anlieferung as string,",
						"          Datum as string,",
						"          Kontrakt as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source1 derive(lookupcolumn1 = 1,",
						"     partitionBy('hash', 1)) ~> derivedColumn1",
						"source2 derive(lookupcolumn2 = 1) ~> derivedColumn2",
						"derivedColumn1, derivedColumn2 lookup(lookupcolumn1 == lookupcolumn2,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 select(mapColumn(",
						"          Pos,",
						"          Artikel,",
						"          Bezeichnung,",
						"          Termin,",
						"          Menge,",
						"          ME,",
						"          Preis,",
						"          {G-Wert EUR},",
						"          Anlieferung,",
						"          Kontrakt,",
						"          Datum",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'pdfextraction',",
						"     folderPath: 'Processed/PDF_Order/Finalcsv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['Table.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_maintable')]",
				"[concat(variables('factoryId'), '/datasets/ds_keyvaluepair')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_source_triplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MergeAndLoadTocsv1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_maintable1",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "ds_keyvaluepair1",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_source_triplea",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Pos as string,",
						"          Artikel as string,",
						"          Bezeichnung as string,",
						"          Termin as string,",
						"          Menge as string,",
						"          ME as string,",
						"          Preis as string,",
						"          {G-Wert EUR} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          Anlieferung as string,",
						"          Datum as string,",
						"          Kontrakt as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source1 derive(lookupcolumn1 = 1,",
						"     partitionBy('hash', 1)) ~> derivedColumn1",
						"source2 derive(lookupcolumn2 = 1) ~> derivedColumn2",
						"derivedColumn1, derivedColumn2 lookup(lookupcolumn1 == lookupcolumn2,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 select(mapColumn(",
						"          Pos,",
						"          Artikel,",
						"          Bezeichnung,",
						"          Termin,",
						"          Menge,",
						"          ME,",
						"          Preis,",
						"          {G-Wert EUR},",
						"          Anlieferung,",
						"          Kontrakt,",
						"          Datum",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'pdfextraction',",
						"     folderPath: 'Processed/PDF_Order/Finalcsv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['Table.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_maintable1')]",
				"[concat(variables('factoryId'), '/datasets/ds_keyvaluepair1')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_source_triplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pageno_JsonToTable_dmkfile-type21_copy11')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This dataflow takes the output from Form Recognizer and extracts the table information to a storage sink.\nThis specifically works with the Form Recognizer Layout API. You can also save the transformations as a flowlet if you would like to reuse the logic in other dataflows. ",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          body as (analyzeResult as (apiVersion as date, content as string, documents as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, docType as string, fields as (Datum as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as integer)[], type as string, valueString as string), Dmk_table as (confidence as boolean, type as string, valueArray as (confidence as boolean, type as string, valueObject as (Format as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as integer)[], type as string, valueString as string), Material as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as boolean, content as integer, spans as (length as short, offset as integer)[], type as string, valueString as integer), Nettowert as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as integer)[], type as string, valueString as string), Pos as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as boolean, content as short, spans as (length as short, offset as integer)[], type as string, valueString as short), {Preis/Einh} as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as integer)[], type as string, valueString as string), Zielmenge as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as integer)[], type as string, valueString as string)))[]), Kontraktnummer as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as long, spans as (length as short, offset as integer)[], type as string, valueString as long)), spans as (length as integer, offset as boolean)[])[], modelId as string, pages as (angle as boolean, height as double, kind as string, lines as (content as string, polygon as double[], spans as (length as short, offset as integer)[])[], pageNumber as short, spans as (length as short, offset as integer)[], unit as string, width as double, words as (confidence as double, content as string, polygon as double[], span as (length as short, offset as integer))[])[], stringIndexType as string, styles as string[], tables as (boundingRegions as (pageNumber as short, polygon as double[])[], cells as (boundingRegions as (pageNumber as short, polygon as double[])[], columnIndex as short, columnSpan as short, content as string, kind as string, rowIndex as short, rowSpan as short, spans as (length as short, offset as integer)[])[], columnCount as short, rowCount as short, spans as (length as short, offset as integer)[])[]), createdDateTime as timestamp, lastUpdatedDateTime as timestamp, status as string),",
						"          headers as ({Content-Length} as integer, {Content-Type} as string, Date as string, {Strict-Transport-Security} as string, {apim-request-id} as string, {x-content-type-options} as string, {x-envoy-upstream-service-time} as short, {x-ms-region} as string)",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     format: 'json',",
						"     fileSystem: 'stage',",
						"     folderPath: 'DMK GROUP',",
						"     fileName: 'jsonv3.0.json',",
						"     documentForm: 'singleDocument',",
						"     partitionBy('hash', 1)) ~> source1",
						"source1 foldDown(unroll(body.analyzeResult.documents.fields.Dmk_table.valueArray),",
						"     mapColumn(",
						"          Pos = body.analyzeResult.documents.fields.Dmk_table.valueArray.valueObject.Pos.content,",
						"          Material = body.analyzeResult.documents.fields.Dmk_table.valueArray.valueObject.Material.content,",
						"          Zielmenge = body.analyzeResult.documents.fields.Dmk_table.valueArray.valueObject.Zielmenge.content,",
						"          {Preis/Einh.} = body.analyzeResult.documents.fields.Dmk_table.valueArray.valueObject.{Preis/Einh}.content,",
						"          Nettowert = body.analyzeResult.documents.fields.Dmk_table.valueArray.valueObject.Nettowert.content,",
						"          Format = body.analyzeResult.documents.fields.Dmk_table.valueArray.valueObject.Format.content,",
						"          Datum = body.analyzeResult.documents.fields.Datum.content,",
						"          Kontraktnummer = body.analyzeResult.documents.fields.Kontraktnummer.content,",
						"          PageNumber = body.analyzeResult.documents.fields.Dmk_table.valueArray.valueObject.Format.boundingRegions.pageNumber",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 derive(PageNumber = PageNumber[1]) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'processeda4lpdftocsv',",
						"     folderPath: 'DMK GROUP',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['Table.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     quoteAll: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sequential_csvToSQLdb_Type4_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Sequential-sasurl_extract_pdf_to_csv"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_sql_a4ltriplea",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"parameters{",
						"     CSV_FILENAME as string",
						"}",
						"source(output(",
						"          Item as short,",
						"          {Material Number / Description} as string,",
						"          Qty as string,",
						"          UOM as string,",
						"          {Unit Price/ Cur} as string,",
						"          {Net Amount} as string,",
						"          {Delivery Date} as string,",
						"          {Billing Information} as string,",
						"          {Contact Person} as string,",
						"          {Customer Name} as string,",
						"          Email as string,",
						"          {Information Email} as string,",
						"          {Information Date} as string,",
						"          {Information-Terms of Payment} as string,",
						"          {Purchase Order} as long,",
						"          {Ship To/ Delivery Addressntent} as string,",
						"          {Sub Total} as string,",
						"          {Total Amount} as string,",
						"          {Vendor Address} as string,",
						"          {Vendor Name} as string,",
						"          {Vendor Number} as integer,",
						"          {Vendor Telephone} as long,",
						"          {Vendor VAT Number} as string,",
						"          Filename as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'fmcpdf',",
						"     folderPath: 'PROCESSED',",
						"     fileName: ($CSV_FILENAME),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     multiLineRow: true) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Item as string,",
						"          {Material Number / Description} as string,",
						"          Qty as string,",
						"          UOM as string,",
						"          {Unit Price/ Cur} as string,",
						"          {Net Amount} as string,",
						"          {Delivery Date} as string,",
						"          {Billing Information} as string,",
						"          {Contact Person} as string,",
						"          {Customer Name} as string,",
						"          Email as string,",
						"          {Information Email} as string,",
						"          {Information Date} as string,",
						"          {Information-Terms of Payment} as string,",
						"          {Purchase Order} as string,",
						"          {Ship To/ Delivery Addressntent} as string,",
						"          {Sub Total} as string,",
						"          {Total Amount} as string,",
						"          {Vendor Address} as string,",
						"          {Vendor Name} as string,",
						"          {Vendor Number} as string,",
						"          {Vendor Telephone} as string,",
						"          {Vendor VAT Number} as string,",
						"          Filename as string",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'FMC_PurchaseOrder_4500130257',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Item,",
						"          {Material Number / Description},",
						"          Qty,",
						"          UOM,",
						"          {Unit Price/ Cur},",
						"          {Net Amount},",
						"          {Delivery Date},",
						"          {Billing Information},",
						"          {Contact Person},",
						"          {Customer Name},",
						"          Email,",
						"          {Information Email},",
						"          {Information Date},",
						"          {Information-Terms of Payment},",
						"          {Purchase Order},",
						"          {Ship To/ Delivery Addressntent},",
						"          {Sub Total},",
						"          {Total Amount},",
						"          {Vendor Address},",
						"          {Vendor Name},",
						"          {Vendor Number},",
						"          {Vendor Telephone},",
						"          {Vendor VAT Number},",
						"          Filename",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_a4ltriplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cloned_sequential_stagejsonDataflow2_copy2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Sequential-sasurl_extract_pdf_to_csv"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RestResource12",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"parameters{",
						"     Key as string,",
						"     JSON_FILENAME as string,",
						"     folderpath as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     httpMethod: 'GET',",
						"     timeout: 60,",
						"     requestInterval: 10,",
						"     headers: ['Ocp-Apim-Subscription-Key' -> ($Key)],",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'singleDocument']) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'json',",
						"     fileSystem: 'prestagetriplea',",
						"     folderPath: ($folderpath),",
						"     partitionFileNames:[($JSON_FILENAME)],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestResource12')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csvToSQLdb_Type21')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_sql_a4ltriplea",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Pos as short,",
						"          Material as integer,",
						"          Zielmenge as string,",
						"          {Preis/Einh.} as string,",
						"          Nettowert as string,",
						"          Etikett as string,",
						"          Format as string,",
						"          Datum as string,",
						"          Kontraktnummer as long,",
						"          PageNumber as short",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'processeda4lpdftocsv',",
						"     folderPath: 'DMK GROUP',",
						"     fileName: 'Table.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     multiLineRow: true) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Pos.} as string,",
						"          Material as string,",
						"          Zielmenge as string,",
						"          {Preis/Einh.} as string,",
						"          Nettowert as string,",
						"          Etikett as string,",
						"          Format as string,",
						"          Kontraktnummer as string,",
						"          Datum as string,",
						"          PageNumber as string",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'Rahmenvertrag_DMK_GROUP',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          {Pos.} = Pos,",
						"          Material,",
						"          Zielmenge,",
						"          {Preis/Einh.},",
						"          Nettowert,",
						"          Format,",
						"          Kontraktnummer,",
						"          Datum,",
						"          PageNumber",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_a4ltriplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csvToSQLdb_Type4')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_sql_a4ltriplea",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Item as short,",
						"          {Material Number / Description} as string,",
						"          Qty as string,",
						"          UOM as string,",
						"          {Unit Price/ Cur} as string,",
						"          {Net Amount} as string,",
						"          {Delivery Date} as string,",
						"          {Billing Information} as string,",
						"          {Contact Person} as string,",
						"          {Customer Name} as string,",
						"          Email as string,",
						"          {Information Email} as string,",
						"          {Information Date} as string,",
						"          {Information-Terms of Payment} as string,",
						"          {Purchase Order} as long,",
						"          {Ship To/ Delivery Addressntent} as string,",
						"          {Sub Total} as string,",
						"          {Total Amount} as string,",
						"          {Vendor Address} as string,",
						"          {Vendor Name} as string,",
						"          {Vendor Number} as integer,",
						"          {Vendor Telephone} as long,",
						"          {Vendor VAT Number} as string,",
						"          Filename as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'fmcpdf',",
						"     folderPath: 'PROCESSED',",
						"     fileName: 'part-merged.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     multiLineRow: true) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Item as string,",
						"          {Material Number / Description} as string,",
						"          Qty as string,",
						"          UOM as string,",
						"          {Unit Price/ Cur} as string,",
						"          {Net Amount} as string,",
						"          {Delivery Date} as string,",
						"          {Billing Information} as string,",
						"          {Contact Person} as string,",
						"          {Customer Name} as string,",
						"          Email as string,",
						"          {Information Email} as string,",
						"          {Information Date} as string,",
						"          {Information-Terms of Payment} as string,",
						"          {Purchase Order} as string,",
						"          {Ship To/ Delivery Addressntent} as string,",
						"          {Sub Total} as string,",
						"          {Total Amount} as string,",
						"          {Vendor Address} as string,",
						"          {Vendor Name} as string,",
						"          {Vendor Number} as string,",
						"          {Vendor Telephone} as string,",
						"          {Vendor VAT Number} as string,",
						"          Filename as string",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'FMC_PurchaseOrder_4500130257',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Item,",
						"          {Material Number / Description},",
						"          Qty,",
						"          UOM,",
						"          {Unit Price/ Cur},",
						"          {Net Amount},",
						"          {Delivery Date},",
						"          {Billing Information},",
						"          {Contact Person},",
						"          {Customer Name},",
						"          Email,",
						"          {Information Email},",
						"          {Information Date},",
						"          {Information-Terms of Payment},",
						"          {Purchase Order},",
						"          {Ship To/ Delivery Addressntent},",
						"          {Sub Total},",
						"          {Total Amount},",
						"          {Vendor Address},",
						"          {Vendor Name},",
						"          {Vendor Number},",
						"          {Vendor Telephone},",
						"          {Vendor VAT Number},",
						"          Filename",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_a4ltriplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_csvTosqldb')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_source_triplea",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_sql_a4ltriplea",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Pos as short,",
						"          Artikel as integer,",
						"          Bezeichnung as string,",
						"          Termin as string,",
						"          Menge as double,",
						"          ME as string,",
						"          Preis as string,",
						"          {G-Wert EUR} as string,",
						"          Anlieferung as string,",
						"          Kontrakt as integer",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'pdfextraction',",
						"     folderPath: 'Processed/PDF_Order/Finalcsv',",
						"     fileName: 'Table.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'PDF_ORDER',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_source_triplea')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_a4ltriplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_csvTosqldb1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_source_triplea",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_sql_a4ltriplea",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Pos as short,",
						"          Artikel as integer,",
						"          Bezeichnung as string,",
						"          Termin as string,",
						"          Menge as double,",
						"          ME as string,",
						"          Preis as string,",
						"          {G-Wert EUR} as string,",
						"          Anlieferung as string,",
						"          Kontrakt as integer",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'pdfextraction',",
						"     folderPath: 'Processed/PDF_Order/Finalcsv',",
						"     fileName: 'Table.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'PDF_ORDER',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_source_triplea')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_a4ltriplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/formRecognizer')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This dataflow takes the output from Form Recognizer and extracts the table information to a storage sink.\nThis specifically works with the Form Recognizer Layout API. You can also save the transformations as a flowlet if you would like to reuse the logic in other dataflows. ",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "RestService2",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_source_triplea",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "flatten2"
						},
						{
							"name": "filter1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "rank1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     OutputFolder as string",
						"}",
						"source(output(",
						"          body as (analyzeResult as (pageResults as (page as short, tables as (boundingBox as double[], cells as (boundingBox as double[], columnIndex as short, elements as string[], isHeader as boolean, rowIndex as short, text as string)[], columns as short, rows as short)[])[], readResults as (angle as boolean, height as short, lines as (appearance as (style as (confidence as double, name as string)), boundingBox as double[], text as string, words as (boundingBox as double[], confidence as double, text as string)[])[], page as short, unit as string, width as double)[], version as string), createdDateTime as timestamp, lastUpdatedDateTime as timestamp, status as string),",
						"          headers as [string,string]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     format: 'rest',",
						"     timeout: 30,",
						"     requestInterval: 0,",
						"     httpMethod: 'GET',",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> source1",
						"source1 foldDown(unroll(body.analyzeResult.pageResults.tables),",
						"     mapColumn(",
						"          page = body.analyzeResult.pageResults.page,",
						"          cells = body.analyzeResult.pageResults.tables.cells,",
						"          columns = body.analyzeResult.pageResults.tables.columns,",
						"          rows = body.analyzeResult.pageResults.tables.rows",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten2 aggregate(groupBy(TableNum,",
						"          rowIndex),",
						"     text = replace(trim(trim(toString(collect(text)), '['),']'),'\"','')) ~> aggregate1",
						"rank1 foldDown(unroll(cells),",
						"     mapColumn(",
						"          page,",
						"          TableNum,",
						"          columnIndex = cells.columnIndex,",
						"          isHeader = cells.isHeader,",
						"          rowIndex = cells.rowIndex,",
						"          text = cells.text",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten2",
						"flatten1 filter(not(isNull(cells))) ~> filter1",
						"aggregate1 aggregate(groupBy(tableNum = 'TableNumber'+toString(TableNum)),",
						"     text = replace(reduce(collect(text), '', #acc+#item+'\\n',#result),'\"','')) ~> aggregate2",
						"filter1 rank(asc(page, true),",
						"     asc(cells, true),",
						"     output(TableNum as long)) ~> rank1",
						"aggregate2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {_col0_} as string",
						"     ),",
						"     format: 'delimited',",
						"     fileSystem: ($OutputFolder),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     rowUrlColumn:'tableNum',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     quoteAll: true,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          {_col0_} = text",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestService2')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_source_triplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sequential_JsonToTable_binderkontraktjson-type42_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This dataflow takes the output from Form Recognizer and extracts the table information to a storage sink.\nThis specifically works with the Form Recognizer Layout API. You can also save the transformations as a flowlet if you would like to reuse the logic in other dataflows. ",
				"folder": {
					"name": "Sequential-sasurl_extract_pdf_to_csv"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "flatten2"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Filename1 as string,",
						"     JSON_FILENAME as string,",
						"     CSV_FILENAME as string",
						"}",
						"source(output(",
						"          body as (analyzeResult as (apiVersion as date, content as string, documents as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, docType as string, fields as ({Billing Information} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Contact Person} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Customer name} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), Email as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), FMC_table as (confidence as boolean, type as string, valueArray as (confidence as boolean, type as string, valueObject as ({Delivery Date} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), Item as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as short, spans as (length as short, offset as short)[], type as string, valueString as short), {Material Number / Description} as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Net Amount} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), Qty as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), UOM as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Unit Price/ Cur} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string)))[]), {Information Email} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Information- Date} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Information- Terms of Payment} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Purchase Order} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as long, spans as (length as short, offset as short)[], type as string, valueString as long), {Ship To/ Delivery Address} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Sub Total} as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Total Amount} as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Vendor Address} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Vendor Name} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Vendor Number} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as integer, spans as (length as short, offset as short)[], type as string, valueString as integer), {Vendor Telephone} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as long, spans as (length as short, offset as short)[], type as string, valueString as long), {Vendor VAT Number} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string)), spans as (length as short, offset as boolean)[])[], modelId as string, pages as (angle as boolean, height as short, kind as string, lines as (content as string, polygon as double[], spans as (length as short, offset as short)[])[], pageNumber as short, spans as (length as short, offset as short)[], unit as string, width as double, words as (confidence as double, content as string, polygon as double[], span as (length as short, offset as short))[])[], stringIndexType as string, styles as string[], tables as (boundingRegions as (pageNumber as short, polygon as double[])[], cells as (boundingRegions as (pageNumber as short, polygon as double[])[], columnIndex as short, content as string, kind as string, rowIndex as short, rowSpan as short, spans as (length as short, offset as short)[])[], columnCount as short, rowCount as short, spans as (length as short, offset as short)[])[]), createdDateTime as timestamp, lastUpdatedDateTime as timestamp, status as string),",
						"          headers as ({Content-Length} as integer, {Content-Type} as string, Date as string, {Strict-Transport-Security} as string, {apim-request-id} as string, {x-content-type-options} as string, {x-envoy-upstream-service-time} as short, {x-ms-region} as string)",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     format: 'json',",
						"     fileSystem: 'fmcpdf',",
						"     folderPath: 'STAGE',",
						"     fileName: ($JSON_FILENAME),",
						"     documentForm: 'singleDocument',",
						"     partitionBy('hash', 1)) ~> source1",
						"source(output(",
						"          body as (analyzeResult as (apiVersion as date, content as string, documents as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, docType as string, fields as ({Billing Information} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Contact Person} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Customer name} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), Email as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), FMC_table as (confidence as boolean, type as string, valueArray as (confidence as boolean, type as string, valueObject as ({Delivery Date} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), Item as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as short, spans as (length as short, offset as short)[], type as string, valueString as short), {Material Number / Description} as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Net Amount} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), Qty as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), UOM as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Unit Price/ Cur} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string)))[]), {Information Email} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Information- Date} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Information- Terms of Payment} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Purchase Order} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as long, spans as (length as short, offset as short)[], type as string, valueString as long), {Ship To/ Delivery Address} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Sub Total} as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Total Amount} as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Vendor Address} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Vendor Name} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Vendor Number} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as integer, spans as (length as short, offset as short)[], type as string, valueString as integer), {Vendor Telephone} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as long, spans as (length as short, offset as short)[], type as string, valueString as long), {Vendor VAT Number} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string)), spans as (length as short, offset as boolean)[])[], modelId as string, pages as (angle as boolean, height as short, kind as string, lines as (content as string, polygon as double[], spans as (length as short, offset as short)[])[], pageNumber as short, spans as (length as short, offset as short)[], unit as string, width as double, words as (confidence as double, content as string, polygon as double[], span as (length as short, offset as short))[])[], stringIndexType as string, styles as string[], tables as (boundingRegions as (pageNumber as short, polygon as double[])[], cells as (boundingRegions as (pageNumber as short, polygon as double[])[], columnIndex as short, content as string, kind as string, rowIndex as short, rowSpan as short, spans as (length as short, offset as short)[])[], columnCount as short, rowCount as short, spans as (length as short, offset as short)[])[]), createdDateTime as timestamp, lastUpdatedDateTime as timestamp, status as string),",
						"          headers as ({Content-Length} as integer, {Content-Type} as string, Date as string, {Strict-Transport-Security} as string, {apim-request-id} as string, {x-content-type-options} as string, {x-envoy-upstream-service-time} as short, {x-ms-region} as string)",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'json',",
						"     fileSystem: 'fmcpdf',",
						"     folderPath: 'STAGE',",
						"     fileName: ($JSON_FILENAME),",
						"     documentForm: 'documentPerLine') ~> source2",
						"source1 foldDown(unroll(body.analyzeResult.documents),",
						"     mapColumn(",
						"          {Billing Information} = body.analyzeResult.documents.fields.{Billing Information}.content,",
						"          {Contact Person} = body.analyzeResult.documents.fields.{Contact Person}.content,",
						"          {Customer Name} = body.analyzeResult.documents.fields.{Customer name}.content,",
						"          Email = body.analyzeResult.documents.fields.Email.content,",
						"          {Information Email} = body.analyzeResult.documents.fields.{Information Email}.content,",
						"          {Information Date} = body.analyzeResult.documents.fields.{Information- Date}.content,",
						"          {Information-Terms of Payment} = body.analyzeResult.documents.fields.{Information- Terms of Payment}.content,",
						"          {Purchase Order} = body.analyzeResult.documents.fields.{Purchase Order}.content,",
						"          {Ship To/ Delivery Addressntent} = body.analyzeResult.documents.fields.{Ship To/ Delivery Address}.content,",
						"          {Sub Total} = body.analyzeResult.documents.fields.{Sub Total}.content,",
						"          {Total Amount} = body.analyzeResult.documents.fields.{Total Amount}.content,",
						"          {Vendor Address} = body.analyzeResult.documents.fields.{Vendor Address}.content,",
						"          {Vendor Name} = body.analyzeResult.documents.fields.{Vendor Name}.content,",
						"          {Vendor Number} = body.analyzeResult.documents.fields.{Vendor Number}.content,",
						"          {Vendor Telephone} = body.analyzeResult.documents.fields.{Vendor Telephone}.content,",
						"          {Vendor VAT Number} = body.analyzeResult.documents.fields.{Vendor VAT Number}.content",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 derive(Lookup = 1,",
						"          File_name = $Filename1) ~> derivedColumn1",
						"source2 foldDown(unroll(body.analyzeResult.documents.fields.FMC_table.valueArray),",
						"     mapColumn(",
						"          Item = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.Item.content,",
						"          {Material Number / Description} = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.{Material Number / Description}.content,",
						"          Qty = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.Qty.content,",
						"          UOM = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.UOM.content,",
						"          {Unit Price/ Cur} = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.{Unit Price/ Cur}.content,",
						"          {Net Amount} = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.{Net Amount}.content,",
						"          {Delivery Date} = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.{Delivery Date}.content",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten2",
						"flatten2 derive(Lookup = 1) ~> derivedColumn2",
						"derivedColumn2, derivedColumn1 lookup(derivedColumn2@Lookup == derivedColumn1@Lookup,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 select(mapColumn(",
						"          Item,",
						"          {Material Number / Description},",
						"          Qty,",
						"          UOM,",
						"          {Unit Price/ Cur},",
						"          {Net Amount},",
						"          {Delivery Date},",
						"          {Billing Information},",
						"          {Contact Person},",
						"          {Customer Name},",
						"          Email,",
						"          {Information Email},",
						"          {Information Date},",
						"          {Information-Terms of Payment},",
						"          {Purchase Order},",
						"          {Ship To/ Delivery Addressntent},",
						"          {Sub Total},",
						"          {Total Amount},",
						"          {Vendor Address},",
						"          {Vendor Name},",
						"          {Vendor Number},",
						"          {Vendor Telephone},",
						"          {Vendor VAT Number},",
						"          Filename = File_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'fmcpdf',",
						"     folderPath: 'PROCESSED',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:[($CSV_FILENAME)],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sequential_stagejsonDataflow2_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Sequential-sasurl_extract_pdf_to_csv"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RestResource12",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"parameters{",
						"     Key as string,",
						"     JSON_FILENAME as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     httpMethod: 'GET',",
						"     timeout: 60,",
						"     requestInterval: 10,",
						"     headers: ['Ocp-Apim-Subscription-Key' -> ($Key)],",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'singleDocument']) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'json',",
						"     fileSystem: 'fmcpdf',",
						"     folderPath: 'STAGE',",
						"     partitionFileNames:[($JSON_FILENAME)],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestResource12')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stagejsonDataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RestResource1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_source_triplea",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"parameters{",
						"     Key as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     httpMethod: 'GET',",
						"     timeout: 60,",
						"     requestInterval: 10,",
						"     headers: ['Ocp-Apim-Subscription-Key' -> ($Key)],",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'singleDocument']) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'json',",
						"     fileSystem: 'pdfextraction',",
						"     folderPath: 'Stage/PDF_Order',",
						"     partitionFileNames:['jsonv3.0.json'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestResource1')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_source_triplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stagejsonDataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RestResource12",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"parameters{",
						"     Key as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     httpMethod: 'GET',",
						"     timeout: 60,",
						"     requestInterval: 10,",
						"     headers: ['Ocp-Apim-Subscription-Key' -> ($Key)],",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'singleDocument']) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'json',",
						"     fileSystem: 'fmcpdf',",
						"     folderPath: 'STAGE',",
						"     partitionFileNames:['jsonv3.0.json'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestResource12')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stagejsonDataflow311')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RestResource1311",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"parameters{",
						"     Key as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     httpMethod: 'GET',",
						"     timeout: 137,",
						"     requestInterval: 100,",
						"     headers: ['Ocp-Apim-Subscription-Key' -> ($Key)],",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'singleDocument']) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'json',",
						"     fileSystem: 'stage',",
						"     folderPath: 'DMK GROUP',",
						"     partitionFileNames:['jsonv3.0.json'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestResource1311')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]"
			]
		}
	]
}
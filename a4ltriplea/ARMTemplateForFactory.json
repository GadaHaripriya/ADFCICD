{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "a4ltriplea"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureDataLakeStorage2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage2'"
		},
		"AzureDatabricks1_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'AzureDatabricks1'"
		},
		"LS_Triplea_adls_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'LS_Triplea_adls'"
		},
		"ls_SqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_SqlServer'"
		},
		"ls_sinktriplea_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_sinktriplea'"
		},
		"ls_source_triplea_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_source_triplea'"
		},
		"ls_sourcedatapdf_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_sourcedatapdf'"
		},
		"ls_sourcefilenames_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_sourcefilenames'"
		},
		"ls_sourcefiles_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_sourcefiles'"
		},
		"ls_sourcefolder_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_sourcefolder'"
		},
		"ls_sourceforrejectedfiles_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_sourceforrejectedfiles'"
		},
		"ls_sql_a4ltriplea_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_sql_a4ltriplea'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsa4ltriplea.dfs.core.windows.net/"
		},
		"AzureDataLakeStorage2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsa4ltriplea.dfs.core.windows.net/"
		},
		"AzureDatabricks1_properties_typeProperties_existingClusterId": {
			"type": "string",
			"defaultValue": "0925-072229-bg7pclm4"
		},
		"LS_Triplea_adls_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsa4ltriplea.dfs.core.windows.net/"
		},
		"RestService1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://https://tripleaformrecog.cognitiveservices.azure.com//formrecognizer/documentModels/FMCMODEL?api-version=2022-08-31"
		},
		"RestService2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().url}"
		},
		"ls_sinktriplea_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsa4ltriplea.dfs.core.windows.net/"
		},
		"ls_source_triplea_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().URL}"
		},
		"ls_sourcedatapdf_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsa4ltriplea.dfs.core.windows.net/"
		},
		"ls_sourcefilenames_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsa4ltriplea.dfs.core.windows.net/"
		},
		"ls_sourcefiles_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsa4ltriplea.dfs.core.windows.net/"
		},
		"ls_sourcefolder_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsa4ltriplea.dfs.core.windows.net/"
		},
		"ls_sourceforrejectedfiles_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsa4ltriplea.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Dynamic json to csv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from [dbo].[Control_table_TripleA]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_Triplea",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Get Metadata1",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "Json2",
											"type": "DatasetReference",
											"parameters": {
												"Customerfolder": {
													"value": "@item().Customername",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"childItems"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "JsonReadSettings"
										}
									}
								},
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Get Metadata1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pipeline2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"getmetadatoutput": {
												"value": "@activity('Get Metadata1').output.childItems",
												"type": "Expression"
											},
											"Customerfolder": {
												"value": "@item().Customername",
												"type": "Expression"
											},
											"Pdfmapping": {
												"value": "@item().pdf_mapping",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "PDF Extract"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-25T18:44:30Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_Triplea')]",
				"[concat(variables('factoryId'), '/datasets/Json2')]",
				"[concat(variables('factoryId'), '/pipelines/pipeline2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Extract data from PDF_Using_CustomModel_FMC')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Use this template to extract data from a PDF source.",
				"activities": [
					{
						"name": "Form Recognizer - POST",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().parameters.FormRecognizerURL",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {
								"Ocp-Apim-Subscription-Key": {
									"value": "@pipeline().parameters.FormRecognizerKey",
									"type": "Expression"
								},
								"contet-type": "application/pdf"
							},
							"body": {
								"value": "@concat('{\"urlSource\":\"',pipeline().parameters.PDF_SourceURL,'\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetPDFData_Dataflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "stage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "JsonToTable_binderkontraktjson-type42",
								"type": "DataFlowReference",
								"parameters": {
									"Filename1": {
										"value": "'@{activity('Get Metadata1').output.childItems[1].name}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					},
					{
						"name": "stage",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "stagejsonDataflow2",
								"type": "DataFlowReference",
								"parameters": {
									"Key": {
										"value": "'@{pipeline().parameters.FormRecognizerKey}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {
										"url": {
											"value": "@activity('Form Recognizer - POST').output.ADFWebActivityResponseHeaders['Operation-Location']",
											"type": "Expression"
										}
									},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Form Recognizer - POST",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 20
						}
					},
					{
						"name": "csvToAzureSqldb",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "GetPDFData_Dataflow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "csvToSQLdb_Type4",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_FMC_PDF_Raw",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FormRecognizerURL": {
						"type": "string",
						"defaultValue": "https://tripleaformrecog.cognitiveservices.azure.com/formrecognizer/documentModels/FMC_mixed_model:analyze?api-version=2022-08-31"
					},
					"FormRecognizerKey": {
						"type": "string",
						"defaultValue": "0987f7cf06fe4ff0a5f07ffaeb35986f"
					},
					"PDF_SourceURL": {
						"type": "string",
						"defaultValue": "https://adlsa4ltriplea.blob.core.windows.net/fmcpdf/RAW/FMC%20Purchase%20Order%20-%204500130257.pdf?sp=r&st=2023-05-24T12:36:58Z&se=2023-05-24T20:36:58Z&spr=https&sv=2022-11-02&sr=b&sig=78UR1AcvHCtdupb7ow3hQKAHlJbgdBpT0lRDknkboFw%3D"
					}
				},
				"variables": {
					"URL": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PDF Extract"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-24T12:42:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/JsonToTable_binderkontraktjson-type42')]",
				"[concat(variables('factoryId'), '/dataflows/stagejsonDataflow2')]",
				"[concat(variables('factoryId'), '/dataflows/csvToSQLdb_Type4')]",
				"[concat(variables('factoryId'), '/datasets/ds_FMC_PDF_Raw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Extract from PDF_to_CSV using sas url')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Use this template to extract data from a PDF source.",
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_FMC_PDF_Raw",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach PDF file",
						"description": "Here we are getting the file name from the \nadlsa4ltriplea/FMCPDF/RAW",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Form Recognizer - POST",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "WebActivity for dynamic SAS URL generation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@pipeline().parameters.FormRecognizerURL",
											"type": "Expression"
										},
										"method": "POST",
										"headers": {
											"Ocp-Apim-Subscription-Key": {
												"value": "@pipeline().parameters.FormRecognizerKey",
												"type": "Expression"
											},
											"contet-type": "application/pdf"
										},
										"body": {
											"value": "@concat('{\"urlSource\":\"',activity('Webactivity for dynamic SAS URL generation').output.Response,'\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "GetPDFData_Dataflow",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "stage",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "1.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "JsonToTable_binderkontraktjson-type42",
											"type": "DataFlowReference",
											"parameters": {
												"Filename1": {
													"value": "'@{item().name}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {},
												"source2": {},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "None",
										"cacheSinks": {
											"firstRowOnly": true
										}
									}
								},
								{
									"name": "stage",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "Wait1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "stagejsonDataflow2",
											"type": "DataFlowReference",
											"parameters": {
												"Key": {
													"value": "'@{pipeline().parameters.FormRecognizerKey}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {
													"url": {
														"value": "@activity('Form Recognizer - POST').output.ADFWebActivityResponseHeaders['Operation-Location']",
														"type": "Expression"
													}
												},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "None",
										"cacheSinks": {
											"firstRowOnly": true
										}
									}
								},
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "Form Recognizer - POST",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 20
									}
								},
								{
									"name": "csvToAzureSqldb",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "GetPDFData_Dataflow",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "csvToSQLdb_Type4",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"source1": {},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "WebActivity for dynamic SAS URL generation",
									"description": "This web activity connects to the logic apps, where it generates the sas url for the mentioned file",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-51.eastus.logic.azure.com:443/workflows/da16536601ad45388f63fcbed4239ad9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=8r4etuCTo2flU4WkzgoEIU4hfmwm6hNMXK4iQUPt4m8",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "{\n    \"blobpath\":\"@{variables('blobpath')}\"\n}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "blobpath",
										"value": {
											"value": "@concat('/fmcpdf/RAW/',item().name)\n\n",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FormRecognizerURL": {
						"type": "string",
						"defaultValue": "https://tripleaformrecog.cognitiveservices.azure.com/formrecognizer/documentModels/FMC_mixed_model:analyze?api-version=2022-08-31"
					},
					"FormRecognizerKey": {
						"type": "string",
						"defaultValue": "0987f7cf06fe4ff0a5f07ffaeb35986f"
					},
					"PDF_SourceURL": {
						"type": "string",
						"defaultValue": "https://adlsa4ltriplea.blob.core.windows.net/fmcpdf/RAW/FMC%20Purchase%20Order%20-%204500130257.pdf?sp=r&st=2023-05-24T12:36:58Z&se=2023-05-24T20:36:58Z&spr=https&sv=2022-11-02&sr=b&sig=78UR1AcvHCtdupb7ow3hQKAHlJbgdBpT0lRDknkboFw%3D"
					}
				},
				"variables": {
					"URL": {
						"type": "String"
					},
					"blobpath": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PDF Extract"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-25T13:14:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_FMC_PDF_Raw')]",
				"[concat(variables('factoryId'), '/dataflows/JsonToTable_binderkontraktjson-type42')]",
				"[concat(variables('factoryId'), '/dataflows/stagejsonDataflow2')]",
				"[concat(variables('factoryId'), '/dataflows/csvToSQLdb_Type4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Extract from PDF_to_CSV using sas url_copy2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Use this template to extract data from a PDF source.",
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_FMC_PDF_Raw",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach PDF file",
						"description": "Here we are getting the file name from the \nadlsa4ltriplea/FMCPDF/RAW",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Form Recognizer - POST",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "WebActivity for dynamic SAS URL generation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@pipeline().parameters.FormRecognizerURL",
											"type": "Expression"
										},
										"method": "POST",
										"headers": {
											"Ocp-Apim-Subscription-Key": {
												"value": "@pipeline().parameters.FormRecognizerKey",
												"type": "Expression"
											},
											"contet-type": "application/pdf"
										},
										"body": {
											"value": "@concat('{\"urlSource\":\"',activity('Webactivity for dynamic SAS URL generation').output.Response,'\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "GetPDFData_Dataflow",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "stage",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "1.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "sequential_JsonToTable_binderkontraktjson-type42_copy1",
											"type": "DataFlowReference",
											"parameters": {
												"Filename1": {
													"value": "'@{item().name}'",
													"type": "Expression"
												},
												"JSON_FILENAME": {
													"value": "'@{concat(item().name,'.','json')}'",
													"type": "Expression"
												},
												"CSV_FILENAME": {
													"value": "'@{concat(item().name,'.','csv')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {},
												"source2": {},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "None",
										"cacheSinks": {
											"firstRowOnly": true
										}
									}
								},
								{
									"name": "stage",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "Wait1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "sequential_stagejsonDataflow2_copy1",
											"type": "DataFlowReference",
											"parameters": {
												"Key": {
													"value": "'@{pipeline().parameters.FormRecognizerKey}'",
													"type": "Expression"
												},
												"JSON_FILENAME": {
													"value": "'@{concat(item().name,'.','json')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {
													"url": {
														"value": "@activity('Form Recognizer - POST').output.ADFWebActivityResponseHeaders['Operation-Location']",
														"type": "Expression"
													}
												},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "None",
										"cacheSinks": {
											"firstRowOnly": true
										}
									}
								},
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "Form Recognizer - POST",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 20
									}
								},
								{
									"name": "csvToAzureSqldb",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "GetPDFData_Dataflow",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Sequential_csvToSQLdb_Type4_copy1",
											"type": "DataFlowReference",
											"parameters": {
												"CSV_FILENAME": {
													"value": "'@{concat(item().name,'.','csv')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "WebActivity for dynamic SAS URL generation",
									"description": "This web activity connects to the logic apps, where it generates the sas url for the mentioned file",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-51.eastus.logic.azure.com:443/workflows/da16536601ad45388f63fcbed4239ad9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=8r4etuCTo2flU4WkzgoEIU4hfmwm6hNMXK4iQUPt4m8",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "{\n    \"blobpath\":\"@{variables('blobpath')}\"\n}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "blobpath",
										"value": {
											"value": "@concat('/fmcpdf/RAW/',item().name)\n",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FormRecognizerURL": {
						"type": "string",
						"defaultValue": "https://tripleaformrecog.cognitiveservices.azure.com/formrecognizer/documentModels/FMC_mixed_model:analyze?api-version=2022-08-31"
					},
					"FormRecognizerKey": {
						"type": "string",
						"defaultValue": "0987f7cf06fe4ff0a5f07ffaeb35986f"
					},
					"PDF_SourceURL": {
						"type": "string",
						"defaultValue": "https://adlsa4ltriplea.blob.core.windows.net/fmcpdf/RAW/FMC%20Purchase%20Order%20-%204500130257.pdf?sp=r&st=2023-05-24T12:36:58Z&se=2023-05-24T20:36:58Z&spr=https&sv=2022-11-02&sr=b&sig=78UR1AcvHCtdupb7ow3hQKAHlJbgdBpT0lRDknkboFw%3D"
					}
				},
				"variables": {
					"URL": {
						"type": "String"
					},
					"blobpath": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PDF Extract"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-26T09:40:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_FMC_PDF_Raw')]",
				"[concat(variables('factoryId'), '/dataflows/sequential_JsonToTable_binderkontraktjson-type42_copy1')]",
				"[concat(variables('factoryId'), '/dataflows/sequential_stagejsonDataflow2_copy1')]",
				"[concat(variables('factoryId'), '/dataflows/Sequential_csvToSQLdb_Type4_copy1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Graphicfile_child_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1_copy1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.lookupoutput",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get Metadata1_copy1",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "Set variable1_copy1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_c1_order_graphicfile",
											"type": "DatasetReference",
											"parameters": {
												"graphicfilename": {
													"value": "@variables('Graphicfilename')",
													"type": "Expression"
												},
												"GraphicFilepath": {
													"value": "@concat(pipeline().parameters.Customername,'/',substring(utcnow(),0,4),'/',substring(utcnow(),5,2),'/')",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "If Condition1_copy1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata1_copy1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@activity('Get Metadata1_copy1').output.exists",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Stored procedure2",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[Graphicfile_doesnotexists]",
													"storedProcedureParameters": {
														"Article": {
															"value": {
																"value": "@item().Artikel",
																"type": "Expression"
															},
															"type": "String"
														},
														"Customername": {
															"value": {
																"value": "@pipeline().parameters.Customername",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "ls_sql_a4ltriplea",
													"type": "LinkedServiceReference"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Stored procedure1",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[Graphicfile_exists]",
													"storedProcedureParameters": {
														"Article": {
															"value": {
																"value": "@item().Artikel",
																"type": "Expression"
															},
															"type": "String"
														},
														"Customername": {
															"value": {
																"value": "@pipeline().parameters.Customername",
																"type": "Expression"
															},
															"type": "String"
														},
														"Graphicfilepath": {
															"value": {
																"value": "@concat('graphicfiles','/',pipeline().parameters.Customername,'/',substring(utcnow(),0,4),'/',substring(utcnow(),5,2),'/',concat(item().Artikel,'_',pipeline().parameters.Customername,'.pdf'))",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "ls_sql_a4ltriplea",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								},
								{
									"name": "Set variable1_copy1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Graphicfilename",
										"value": {
											"value": "@concat(item().Artikel,'_',pipeline().parameters.Customername,'.pdf')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Customername": {
						"type": "string"
					},
					"lookupoutput": {
						"type": "object"
					}
				},
				"variables": {
					"Graphicfilename": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Graphicfile"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-01T11:46:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_c1_order_graphicfile')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_a4ltriplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Graphicfile_master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup into control table",
						"description": "Look up into control table for customer name",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_Triplea",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup into control table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup into control table').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Get Metadata of each customer folder",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DelimitedText1",
											"type": "DatasetReference",
											"parameters": {
												"Customerfolder": {
													"value": "@concat(item().Customername,'/',substring(utcnow(),0,4),'/',substring(utcnow(),5,2),'/','csv','/','Prestage_csvfiles')",
													"type": "Expression"
												},
												"Filename": "*"
											}
										},
										"fieldList": [
											"childItems"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Get Metadata of each customer folder",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "graphicfile_child_1",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Childitems": {
												"value": "@activity('Get Metadata of each customer folder').output.childItems",
												"type": "Expression"
											},
											"Customername": {
												"value": "@item().Customername",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Graphicfile"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-30T18:54:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_Triplea')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/pipelines/graphicfile_child_1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Master_source_raw_prestage')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup INTO CONTROLTABLE",
						"description": " up into control table -Control_table_TripleA for source folder name which is the customername",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_Triplea",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup INTO CONTROLTABLE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup INTO CONTROLTABLE').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Get Metadata of source",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_source_triplea_adls",
											"type": "DatasetReference",
											"parameters": {
												"foldername": {
													"value": "@item().Customername",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"childItems",
											"lastModified"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Get Metadata of source",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "child_source_raw_prestage",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"childitems": {
												"value": "@activity('Get Metadata of source').output.childItems",
												"type": "Expression"
											},
											"source_folder_name": {
												"value": "@item().Customername",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "soure_raw_prestage(csv,pdf)"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-28T12:07:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_Triplea')]",
				"[concat(variables('factoryId'), '/datasets/ds_source_triplea_adls')]",
				"[concat(variables('factoryId'), '/pipelines/child_source_raw_prestage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sequential_Extract from PDF_to_CSV using sas url_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Use this template to extract data from a PDF source.",
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_FMC_PDF_Raw",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach PDF file",
						"description": "Here we are getting the file name from the \nadlsa4ltriplea/FMCPDF/RAW",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Form Recognizer - POST",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "WebActivity for dynamic SAS URL generation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@pipeline().parameters.FormRecognizerURL",
											"type": "Expression"
										},
										"method": "POST",
										"headers": {
											"Ocp-Apim-Subscription-Key": {
												"value": "@pipeline().parameters.FormRecognizerKey",
												"type": "Expression"
											},
											"contet-type": "application/pdf"
										},
										"body": {
											"value": "@concat('{\"urlSource\":\"',activity('Webactivity for dynamic SAS URL generation').output.Response,'\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "GetPDFData_Dataflow",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "stage",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "1.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "sequential_JsonToTable_binderkontraktjson-type42_copy1",
											"type": "DataFlowReference",
											"parameters": {
												"Filename1": {
													"value": "'@{item().name}'",
													"type": "Expression"
												},
												"JSON_FILENAME": {
													"value": "'@{concat(item().name,'.','json')}'",
													"type": "Expression"
												},
												"CSV_FILENAME": {
													"value": "'@{concat(item().name,'.','csv')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {},
												"source2": {},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "None",
										"cacheSinks": {
											"firstRowOnly": true
										}
									}
								},
								{
									"name": "stage",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "Wait1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "sequential_stagejsonDataflow2_copy1",
											"type": "DataFlowReference",
											"parameters": {
												"Key": {
													"value": "'@{pipeline().parameters.FormRecognizerKey}'",
													"type": "Expression"
												},
												"JSON_FILENAME": {
													"value": "'@{concat(item().name,'.','json')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {
													"url": {
														"value": "@activity('Form Recognizer - POST').output.ADFWebActivityResponseHeaders['Operation-Location']",
														"type": "Expression"
													}
												},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "None",
										"cacheSinks": {
											"firstRowOnly": true
										}
									}
								},
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "Form Recognizer - POST",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 20
									}
								},
								{
									"name": "csvToAzureSqldb",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "GetPDFData_Dataflow",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Sequential_csvToSQLdb_Type4_copy1",
											"type": "DataFlowReference",
											"parameters": {
												"CSV_FILENAME": {
													"value": "'@{concat(item().name,'.','csv')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "WebActivity for dynamic SAS URL generation",
									"description": "This web activity connects to the logic apps, where it generates the sas url for the mentioned file",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-51.eastus.logic.azure.com:443/workflows/da16536601ad45388f63fcbed4239ad9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=8r4etuCTo2flU4WkzgoEIU4hfmwm6hNMXK4iQUPt4m8",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "{\n    \"blobpath\":\"@{variables('blobpath')}\"\n}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "blobpath",
										"value": {
											"value": "@concat('/fmcpdf/RAW/',item().name)\n\n",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FormRecognizerURL": {
						"type": "string",
						"defaultValue": "https://tripleaformrecog.cognitiveservices.azure.com/formrecognizer/documentModels/FMC_mixed_model:analyze?api-version=2022-08-31"
					},
					"FormRecognizerKey": {
						"type": "string",
						"defaultValue": "0987f7cf06fe4ff0a5f07ffaeb35986f"
					},
					"PDF_SourceURL": {
						"type": "string",
						"defaultValue": "https://adlsa4ltriplea.blob.core.windows.net/fmcpdf/RAW/FMC%20Purchase%20Order%20-%204500130257.pdf?sp=r&st=2023-05-24T12:36:58Z&se=2023-05-24T20:36:58Z&spr=https&sv=2022-11-02&sr=b&sig=78UR1AcvHCtdupb7ow3hQKAHlJbgdBpT0lRDknkboFw%3D"
					}
				},
				"variables": {
					"URL": {
						"type": "String"
					},
					"blobpath": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PDF Extract"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-25T13:14:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_FMC_PDF_Raw')]",
				"[concat(variables('factoryId'), '/dataflows/sequential_JsonToTable_binderkontraktjson-type42_copy1')]",
				"[concat(variables('factoryId'), '/dataflows/sequential_stagejsonDataflow2_copy1')]",
				"[concat(variables('factoryId'), '/dataflows/Sequential_csvToSQLdb_Type4_copy1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/child')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.getmetadatoutput",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "stage",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"value": "@json(pipeline().parameters.Pdfmapping)",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "Json1",
											"type": "DatasetReference",
											"parameters": {
												"Customerfolder": {
													"value": "@concat(pipeline().parameters.Customerfolder,'/',substring(utcnow(),0,4),'/',substring(utcnow(),5,2),'/','csv','/','Prestage_json_PDF')",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat(substring(item().name,0,sub(length(item().name),4)),'.json')\n",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DelimitedText1",
											"type": "DatasetReference",
											"parameters": {
												"Customerfolder": {
													"value": "@concat(pipeline().parameters.Customerfolder,'/',substring(utcnow(),0,4),'/',substring(utcnow(),5,2),'/','csv','/','Prestage_csvfiles')",
													"type": "Expression"
												},
												"Filename": {
													"value": "@concat(substring(item().name,0,sub(length(item().name),4)),'.csv')\n\n",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "blobpath",
										"value": {
											"value": "@concat('/rawtriplea/',pipeline().parameters.Customerfolder,'/',substring(utcnow(),0,4),'/',substring(utcnow(),5,2),'/','pdf/',item().name)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "WebActivity for dynamic SAS URL generation",
									"description": "This web activity connects to the logic apps, where it generates the sas url for the mentioned file",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-51.eastus.logic.azure.com:443/workflows/da16536601ad45388f63fcbed4239ad9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=8r4etuCTo2flU4WkzgoEIU4hfmwm6hNMXK4iQUPt4m8",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "{\n    \"blobpath\":\"@{variables('blobpath')}\"\n}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Form Recognizer - POST",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "WebActivity for dynamic SAS URL generation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@pipeline().parameters.FormRecognizerURL",
											"type": "Expression"
										},
										"method": "POST",
										"headers": {
											"Ocp-Apim-Subscription-Key": {
												"value": "@pipeline().parameters.FormRecognizerKey",
												"type": "Expression"
											},
											"contet-type": "application/pdf"
										},
										"body": {
											"value": "@concat('{\"urlSource\":\"',activity('Webactivity for dynamic SAS URL generation').output.Response,'\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "Form Recognizer - POST",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 30
									}
								},
								{
									"name": "stage",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "Wait1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "cloned_sequential_stagejsonDataflow2_copy2",
											"type": "DataFlowReference",
											"parameters": {
												"Key": {
													"value": "'@{pipeline().parameters.FormRecognizerKey}'",
													"type": "Expression"
												},
												"JSON_FILENAME": {
													"value": "'@{concat(substring(item().name,0,sub(length(item().name),4)),'.json')\n}'",
													"type": "Expression"
												},
												"folderpath": {
													"value": "'@{concat(pipeline().parameters.Customerfolder,'/',substring(utcnow(),0,4),'/',substring(utcnow(),5,2),'/','csv','/','Prestage_json_PDF')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {
													"url": {
														"value": "@activity('Form Recognizer - POST').output.ADFWebActivityResponseHeaders['Operation-Location']",
														"type": "Expression"
													}
												},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "None",
										"cacheSinks": {
											"firstRowOnly": true
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"getmetadatoutput": {
						"type": "array"
					},
					"Customerfolder": {
						"type": "string"
					},
					"Pdfmapping": {
						"type": "string"
					},
					"FormRecognizerURL": {
						"type": "string"
					},
					"FormRecognizerKey": {
						"type": "string"
					}
				},
				"variables": {
					"URL": {
						"type": "String"
					},
					"blobpath": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Pipeline _PDF_dynamic"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-28T10:46:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json1')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/dataflows/cloned_sequential_stagejsonDataflow2_copy2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/child_source_raw_prestage')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach file",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@array(pipeline().parameters.childitems)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Switch1",
									"description": "check the file type and switch and copy the data from source to raw accordingly",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@if(\n contains(string(item().name),'csv'),\n'csv',\nif(\n    contains(string(item().name),'pdf'),\n    'pdf',\n    'xml'\n    )\n  )",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "csv",
												"activities": [
													{
														"name": "Copy csv file",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobFSReadSettings",
																	"recursive": true,
																	"modifiedDatetimeStart": {
																		"value": "@addhours(string(utcnow()),-3)",
																		"type": "Expression"
																	},
																	"modifiedDatetimeEnd": {
																		"value": "@utcnow()",
																		"type": "Expression"
																	},
																	"wildcardFolderPath": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	},
																	"wildcardFileName": {
																		"value": "@item().name",
																		"type": "Expression"
																	},
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "DelimitedTextSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "DelimitedTextWriteSettings",
																	"quoteAllText": true,
																	"fileExtension": ".txt"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "ds_source_triplea_adls",
																"type": "DatasetReference",
																"parameters": {
																	"foldername": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "ds_raw_triplea",
																"type": "DatasetReference",
																"parameters": {
																	"source_folder": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	},
																	"filetype": "csv"
																}
															}
														]
													},
													{
														"name": "Execute csv pipeline",
														"description": "copy data from raw to pretstage",
														"type": "ExecutePipeline",
														"dependsOn": [
															{
																"activity": "Copy csv file",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "pl_csv",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"source_folder": {
																	"value": "@pipeline().parameters.source_folder_name",
																	"type": "Expression"
																},
																"Filetype": "csv",
																"Filename": {
																	"value": "@item().name",
																	"type": "Expression"
																}
															}
														}
													}
												]
											},
											{
												"value": "pdf",
												"activities": [
													{
														"name": "Copy data pdf",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobFSReadSettings",
																	"recursive": true,
																	"modifiedDatetimeStart": {
																		"value": "@addhours(string(utcnow()),-3)",
																		"type": "Expression"
																	},
																	"modifiedDatetimeEnd": {
																		"value": "@utcnow()",
																		"type": "Expression"
																	},
																	"wildcardFolderPath": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	},
																	"wildcardFileName": {
																		"value": "@item().name",
																		"type": "Expression"
																	},
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "DelimitedTextSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "DelimitedTextWriteSettings",
																	"quoteAllText": true,
																	"fileExtension": ".txt"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "ds_source_triplea_adls",
																"type": "DatasetReference",
																"parameters": {
																	"foldername": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "ds_raw_triplea",
																"type": "DatasetReference",
																"parameters": {
																	"source_folder": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	},
																	"filetype": "pdf"
																}
															}
														]
													},
													{
														"name": "Execute PDF Pipeline",
														"type": "ExecutePipeline",
														"dependsOn": [
															{
																"activity": "Copy data pdf",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "master",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {}
														}
													}
												]
											},
											{
												"value": "xml",
												"activities": [
													{
														"name": "Copy data xml",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobFSReadSettings",
																	"recursive": true,
																	"modifiedDatetimeStart": {
																		"value": "@addhours(string(utcnow()),-3)",
																		"type": "Expression"
																	},
																	"modifiedDatetimeEnd": {
																		"value": "@utcnow()",
																		"type": "Expression"
																	},
																	"wildcardFolderPath": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	},
																	"wildcardFileName": {
																		"value": "@item().name",
																		"type": "Expression"
																	},
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "DelimitedTextSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "DelimitedTextWriteSettings",
																	"quoteAllText": true,
																	"fileExtension": ".txt"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "ds_source_triplea_adls",
																"type": "DatasetReference",
																"parameters": {
																	"foldername": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "ds_raw_triplea",
																"type": "DatasetReference",
																"parameters": {
																	"source_folder": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	},
																	"filetype": "xml"
																}
															}
														]
													}
												]
											}
										]
									}
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "filename",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"childitems": {
						"type": "string"
					},
					"source_folder_name": {
						"type": "string"
					}
				},
				"variables": {
					"filename": {
						"type": "String"
					}
				},
				"folder": {
					"name": "soure_raw_prestage(csv,pdf)"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-28T12:30:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_source_triplea_adls')]",
				"[concat(variables('factoryId'), '/datasets/ds_raw_triplea')]",
				"[concat(variables('factoryId'), '/pipelines/pl_csv')]",
				"[concat(variables('factoryId'), '/pipelines/master')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/graphicfile_child_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach Customer",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.Childitems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Lookup1",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"dataset": {
											"referenceName": "ds_c1_order",
											"type": "DatasetReference",
											"parameters": {
												"Filepath": {
													"value": "@concat(pipeline().parameters.Customername,'/',substring(utcnow(),0,4),'/',substring(utcnow(),5,2),'/','csv','/','Prestage_csvfiles')\n",
													"type": "Expression"
												},
												"Filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Lookup1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Graphicfile_child_2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Customername": {
												"value": "@pipeline().parameters.Customername",
												"type": "Expression"
											},
											"lookupoutput": {
												"value": "@activity('Lookup1').output.value",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Childitems": {
						"type": "string"
					},
					"Customername": {
						"type": "string"
					}
				},
				"variables": {
					"Graphicfilename": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Graphicfile"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-30T18:54:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_c1_order')]",
				"[concat(variables('factoryId'), '/pipelines/Graphicfile_child_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup into Control Table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from [dbo].[Control_table_TripleA]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_Triplea",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup into Control Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup into Control Table').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Get Metadata1",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "Json2",
											"type": "DatasetReference",
											"parameters": {
												"Customerfolder": {
													"value": "@concat(item().Customername,'/',substring(utcnow(),0,4),'/',substring(utcnow(),5,2),'/','pdf')\n\n",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"childItems"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "JsonReadSettings"
										}
									}
								},
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Get Metadata1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "child",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"getmetadatoutput": {
												"value": "@activity('Get Metadata1').output.childItems",
												"type": "Expression"
											},
											"Customerfolder": {
												"value": "@item().Customername",
												"type": "Expression"
											},
											"Pdfmapping": {
												"value": "@item().pdf_mapping",
												"type": "Expression"
											},
											"FormRecognizerURL": {
												"value": "@concat(pipeline().globalParameters.fr_url,item().Model_ID,':analyze?api-version=2022-08-31')",
												"type": "Expression"
											},
											"FormRecognizerKey": {
												"value": "0987f7cf06fe4ff0a5f07ffaeb35986f",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Pipeline _PDF_dynamic"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-28T10:46:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_Triplea')]",
				"[concat(variables('factoryId'), '/datasets/Json2')]",
				"[concat(variables('factoryId'), '/pipelines/child')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.getmetadatoutput",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"value": "@json(pipeline().parameters.Pdfmapping)",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "Json1",
											"type": "DatasetReference",
											"parameters": {
												"Customerfolder": {
													"value": "@pipeline().parameters.Customerfolder",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DelimitedText1",
											"type": "DatasetReference",
											"parameters": {
												"Customerfolder": {
													"value": "@pipeline().parameters.Customerfolder",
													"type": "Expression"
												},
												"Filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"getmetadatoutput": {
						"type": "array"
					},
					"Customerfolder": {
						"type": "string"
					},
					"Pdfmapping": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-26T12:01:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json1')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_c1_order",
								"type": "DatasetReference",
								"parameters": {
									"Filepath": "Customer1/2023/05/csv/Prestage_csvfiles",
									"Filename": "c1order1.csv"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata1",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_c1_order_graphicfile",
											"type": "DatasetReference",
											"parameters": {
												"graphicfilename": {
													"value": "@variables('filepath')",
													"type": "Expression"
												},
												"GraphicFilepath": {
													"value": "@concat('Customer1','/',substring(utcnow(),0,4),'/',substring(utcnow(),5,2),'/')",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@activity('Get Metadata1').output.exists",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "filepath",
										"value": {
											"value": "@concat(item().Artikel,'_',item().Customername,'.pdf')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"filepath": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Graphicfile"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-01T11:46:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_c1_order')]",
				"[concat(variables('factoryId'), '/datasets/ds_c1_order_graphicfile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WebDestination",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://formrecogdestination.cognitiveservices.azure.com/formrecognizer/documentModels:authorizeCopy?api-version=2023-07-31",
							"method": "POST",
							"headers": {
								"Ocp-Apim-Subscription-Key": "5a17bb41892344b9a77a9aeca39257b9"
							},
							"body": {
								"modelId": "Test_Dest13",
								"description": "Copied from SCUS"
							}
						}
					},
					{
						"name": "WebSource",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "WebDestination",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://testformrecog.cognitiveservices.azure.com/formrecognizer/documentModels/TestFMC1:copyTo?api-version=2023-07-31",
							"method": "POST",
							"headers": {
								"Ocp-Apim-Subscription-Key": "1c29a8971d8342ea946d80520bf52e78"
							},
							"body": {
								"value": "{\n\t\"targetResourceId\": \"@{activity('WebDestination').output.targetResourceId}\",\n\t\"targetResourceRegion\": \"@{activity('WebDestination').output.targetResourceRegion}\",\n\t\"targetModelId\": \"@{activity('WebDestination').output.targetModelId}\",\n\t\"targetModelLocation\": \"@{activity('WebDestination').output.targetModelLocation}\",\n\t\"accessToken\": \"@{activity('WebDestination').output.accessToken}\",\n\t\"expirationDateTime\": \"@{activity('WebDestination').output.expirationDateTime}\"\n  }\n\t",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-01T08:47:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "exe_pl_master_preUI",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_adf_master_preUI",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "exe_pl_master_postUI",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "exe_pl_master_preUI",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_adf_master_postUI_approvals",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Graphicfile/Final Pipeline/Master Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_adf_master_preUI')]",
				"[concat(variables('factoryId'), '/pipelines/pl_adf_master_postUI_approvals')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_UpdatePipelineEndTime')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "sc_updatePiplelineEndTime",
						"description": "Updating the Pipeline End time for all the files for the appropriate customer that are processed in the pipeline",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_sql_a4ltriplea",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "UPDATE app.tbl_TriggerTable SET PipelineEndTime = GETDATE()\n    WHERE Triggertime< '@{pipeline().parameters.PipelineStartTime}' and PipelineEndTime is null;",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"PipelineStartTime": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Graphicfile/Final Pipeline/Child Pipelines/Child Pipelines Pre-UI"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_a4ltriplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_adf_aaa_Orders_Rako_db1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lk_Update_WatermarkTable",
						"description": "Updating Watermark table with last modified date for the table app.tbl_aaa_orders_temp.",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "lk_Processed_AAA_Orders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "if exists(select 1 from app.tbl_AAA_Orders_temp)\nupdate app.tbl_watermarktable\nset last_modified_date = (\nselect max(modified_timestamp) from app.tbl_aaa_orders_temp) where table_name = 'app.tbl_aaa_orders_temp';\nselect @@ROWCOUNT",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "csvtoazuresqltable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "cp_aaa_customerorderdata_rako",
						"description": "load the Customernumber and Material number from  Azure sql -app.[tbl_aaa_master_customerorderdata_stg] table to Rako label db - dbo.tbl_aaa_input_orders table.",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select distinct CustomerNumber as KundenNummer,MaterialNumber as ArtikelNummerKunde,PageCount from app.[tbl_aaa_master_customerorderdata_stg] where modifiedTime >\n(select coalesce(last_modified_date,'1900-01-01 00:00:00') from app.tbl_watermarktable where table_name= 'app.tbl_aaa_CustomerOrderData')\nand (descriptiondq not like '%Material Number%' or\ndescriptiondq not like '%Artwork%' or descriptiondq is null)",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table dbo.tbl_aaa_input_orders",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "csvtoazuresqltable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_rakolabel_input",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "cp_Rako_aaa_Orders_Temp",
						"description": "Joining dbo.tbl_aaa_input_orders with Sorten and Stamm tables in the Rakolabel  db on the condition and loading the data into  Azure sql table : app.tbl_AAA_orders_temp",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "cp_aaa_customerorderdata_rako",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select distinct a.[Etikettennummer]\n      ,[Aenderungsindex]\n      ,a.[ArtikelnummerKunde]\n      ,a.[Stammnummer]\n      ,a.[Kundennummer]\n      ,[Sortentext]\n      ,[SortentextAusl]\n      ,[letzte_Bestaetigung]\n      ,[vorletzte_Bestaetigung]\n      ,[letzter_Auftrag]\n      ,[Sortierkriterium]\n      ,[SortierRegion]\n      ,[Garniturschluessel]\n      ,[Anzahl_Klischees]\n      ,[InLManlegenkannweg]\n      ,[InLMangelegtkannweg]\n      ,[Importdurch]\n      ,[Sortierkriterium1]\n      ,[Sortierkriterium2]\n      ,[Sortierkriterium3]\n      ,[Sortierkriterium4]\n      ,[Sortierkriterium5]\n      ,[Sortierkriterium6]\n      ,[Periodenbedarf]\n      ,[Bedarfsperiode]\n      ,[FTKNummer]\n      ,[Seite]\n      ,[GarniturID]\n      ,[Freigabeindex]\n      ,[LMSStatus]\n      ,[VorProduktion]\n      ,[Layoutnummer]\n      ,[Computer]\n      ,[GrafikDatenpfad]\n      ,[Farbtoleranzkarte]\n      ,[Farbfibel]\n      ,[VSRSzusammen]\n      ,a.[Druckplatte]\n      ,a.[Artpro]\n      ,[DispoKunde]\n      ,[LMSUpdate]\n      ,[DVS]\n      ,[Hintergrundfarbe]\n      ,[GrafikIdentNr]\n      ,[Barcode]\n      ,a.[CENStufe]\n      ,a.[Ablageort]\n      ,[GewichtEtikett]\n      ,[KontraktNummer]\n      ,[PraegeZylID]\n      ,[WicklungSorte]\n      ,[Mindestbestand]\n      ,[CENStufe2D]\n      ,a.[LackfreiesFeld]\n      ,[KundenzertifikatErstellt]\n      ,[LackKlischee]\n      ,[KundenzertifikatNr]\n      ,[KundenzertifikatStatus]\n      ,[KundenzertifikatFreigabeDatum]\n      ,[KundeKategorieProjekt]\n      ,[KundeKategorieMarke]\n      ,[KundeKategorieProdukt]\n      ,[ColorManagementSystem]\n      ,[DVSKommentar]\n      ,[PruefmerkmalEindeutig]\n      ,[FarbreferenzSystemID]\n      ,[FarbreferenzVorlageTypID]\n      ,[PruefmerkmalArtID]\n      ,[WicklungID]\n      ,[CountryCodeID]\n      ,a.[Rollenkern]\n      ,[RollenkernID]\n      ,[Abrufware]\n      ,[CustomerBusinessLine]\n      ,[CustomerProductLine]\n      ,[CAN]\n      ,[MasterFile]\n      ,a.[DWRowVersion]\n      ,[CustomerProjectNameOrBrand]\n      ,[CustomerPortfolioID]\n,[Format]\n      ,[FormatAusl]\n      ,[Druckzylindernummer]\n      ,[Etiketten_je_Rolle]\n      ,[EtikRolle_genau]\n      ,[Etiketten_je_RolleAusl]\n      ,[Klebstoff]\n      ,[Klebstoff_genau]\n      ,[KlebstoffAusl]\n      ,[Rollenaussendurchmesser]\n      ,[Rollausdurchm_genau]\n      ,[RollenaussendurchmesserAusl]\n      ,[Traegerbahnbreite]\n      ,[Traegerbahn_genau]\n      ,[Wicklung]\n      ,[Wicklung_genau]\n      ,[WicklungAusl]\n      ,[Stammtext]\n      ,[StammtextAusl]\n      ,b.[Kundennummer] as Stamm_Kundennummer\n      ,b.[Produkt]\n      ,[ProduktAusl]\n      ,[Farben_genau]\n      ,[Farbe]\n      ,[FarbeAusl]\n      ,[Material]\n      ,[Traeger_Genau]\n      ,[Traeger2_Genau]\n      ,[Kaschier_Genau]\n      ,[Heisspraeg_Genau]\n      ,[MaterialAusl]\n      ,[Zusatztext_Stanze]\n      ,b.[Rollenkern] as Stamm_Rollenkern\n      ,[Rollenkern_genau]\n      ,[RollenkernAusl]\n      ,[StammStanze]\n      ,[Materialnummer]\n      ,cast([Preisstaffelnotiz] as nvarchar(max)) as Preisstaffelnotiz\n      ,[Kontrollstufe]\n      ,[Geschw_Text]\n      ,[Speedmaster]\n      ,[Motivwechselkosten]\n      ,[StammMaterialbreite]\n      ,[DV_Datum]\n      ,[StammStanze2]\n      ,[Digital]\n      ,[StammMaterialbreite2]\n      ,[Stanze]\n      ,[Stanze2]\n      ,[Hinweis_DV]\n      ,[Kalkulationsnummer]\n      ,[Sonderfarben_genau]\n      ,[Breite]\n      ,[Hoehe]\n      ,[AnzahlNutzen]\n      ,[Textwechsel]\n      ,[Farbwechsel]\n      ,[MatBreite]\n      ,[Maschine]\n      ,[Gewinnstufe]\n      ,[Gewinnstufe_selekt]\n      ,[DBGrad]\n      ,[Schwierigkeitsgrad]\n      ,[UVLack]\n      ,b.[LackfreiesFeld] as Stamm_LackfreiesFeld\n      ,[ProblematischesGitter]\n      ,[Wendevorrichtung]\n      ,[WendemitDruck]\n      ,[Blattware]\n      ,[Lochung]\n      ,[Perforation]\n      ,[Spezialkleber]\n      ,[GoldSilberlack]\n      ,[PreisMaterial]\n      ,[PreisKaschierfolie]\n      ,[PreisHeisspraegefolie]\n      ,[PreisTraeger2]\n      ,[Geschwindigkeit]\n      ,[PreisMaterialGesamt]\n      ,[Taktzeit]\n      ,[SpezifikationinSorte]\n      ,[Teilangebotsnummer]\n      ,[Angebotsnummer]\n      ,[PreiseGueltigMenge]\n      ,[PreiseGueltigVon]\n      ,[Expresskalkulation]\n      ,[PreiseGueltigBis]\n      ,cast([technHinweis] as nvarchar(max)) as technHinweis\n      ,[Wasserfarben]\n      ,[Gitterabzug]\n      ,[Passert]\n      ,[Farbeinh]\n      ,[Farbmenge]\n      ,[Bahntrennung]\n      ,[Kleberdruck]\n      ,[Flexprint]\n      ,[Gravur]\n      ,[MattLack]\n      ,[StanzeID]\n      ,[Stanze2ID]\n      ,b.[Druckplatte] as Stamm_Druckplatte\n      ,[Einrichtekosten]\n      ,[MaschineID]\n      ,[PreisMaterialEuro]\n      ,[PreisKaschierfolieEuro]\n      ,[PreisHeisspraegefolieEuro]\n      ,[PreisMaterial2Euro]\n      ,[PreisMaterialGesamtEuro]\n      ,[EinrichtekostenEuro]\n      ,[MotivwechselkostenEuro]\n      ,b.[ArtPro] as Stamm_ArtPro\n      ,[Basisruestkosten]\n      ,[BasisruestkostenEuro]\n      ,[EinrichteWechselkosten]\n      ,[EinrichteWechselkostenEuro]\n      ,[Fortdruckkosten]\n      ,[FortdruckkostenEuro]\n      ,[Mindestbestellmenge]\n      ,[SortenProBestellung]\n      ,[FertigungenMax]\n      ,[Versandanweisung]\n      ,[Konfektionieranweisung]\n      ,[Qualitaetsanweisung]\n      ,[Produktionsanweisung]\n      ,[Grafikanweisung]\n      ,b.[Ablageort] as Stamm_Ablageort\n      ,[LackID]\n      ,[Lack2ID]\n      ,[QSProduktionsanweisung]\n      ,b.[CENStufe] as Stamm_CENStufe\n      ,[StarterFoil]\n      ,[Zusatzwerkzeug]\n      ,[TaktzeitGeprueft]\n      ,[PraegefolieMehrfachverwendung]\n      ,[DrucklaengeFlexo]\n      ,[DrucklaengeSieb]\n      ,[MaterialspezifikationStatus]\n      ,[Farbanforderungsstufe]\n      ,[GrundEtikettenNummer]\n      ,[TextWechselKostenEuro]\n      ,[FrachtkostenZuschlagEuro]\n      ,[TaktzeitDigital]\n      ,[TaktzeitDigitalGeprueft]\n      ,[FortdruckkostenTenderEuro]\n      ,[FarbanforderungsstufeRisiko]\n      ,[FarbanforderungsstufeKommentar]\n      ,[ProduktID]\n      ,[Kernstaerke]\n      ,[Kernbreite]\n      ,[Wicklungsstaerke]\n      ,[HundertProzentKontrolle]\n      ,[Messerart]\n      ,[NeutraleKonfektionierung]\n      ,[Musterangaben]\n      ,[IDAngebotPosition]\n      ,[Einrichtemeter]\n      ,[Einrichtemeter_geprueft]\n      ,[BasisruestkostenVorAenderungEuro]\n      ,[EinrichteWechselkostenVorAenderungEuro]\n      ,[FortdruckkostenVorAenderungEuro]\n      ,[EtikettJeRolleEinheit]\n      ,b.[DWRowVersion] as Stamm_DWRowVersion\n       ,KonfPruefungErforderlich as KonfPruefungErforderlich\n       ,b.FSC_IstZertifiziert as Stamm_FSC_IstZertifiziert \n,case when d.Produkttyp = 1 AND d.Bezeichnung_Lage = 'Booklabel' then 'BOOKLET' else null end as primary_component\n,case when e.produkttyp = 2 then 'BASE' else null end as secondary_component\n,i.produkt as ProductName,\ny.Seitenzahl as PageCount\nfrom dbo.tbl_aaa_input_orders z\njoin dbo.tblTripleAArticleRef_aaa_bkp y on y.TripleARef = z.ArtikelNummerKunde and \nz.Kundennummer = left(y.etikettennummer,4) and Aktiv=-1 and z.[PageCount] = y.Seitenzahl\nleft join dbo.tblStammMehrkomponentenPos_aaa_bkp d on d.etikettennummer = y.etikettennummer\nleft join dbo.tblStammMehrkomponentenPos_aaa_bkp e on e.MehrkomponentenID = d.MehrkomponentenID and e.etikettennummer = d.etikettennummer\njoin dbo.sorten_aaa_bkp a on a.etikettennummer = y.etikettennummer\njoin dbo.stamm_aaa_bkp b on b.stammnummer = a.stammnummer\njoin dbo.tblprodukt_aaa_bkp i on i.id = b.produktid",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table app.tbl_aaa_orders_temp",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_rakolabel",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_AAA_OrderDetails_temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "lk_Processed_AAA_Orders",
						"description": "Updating is_processed =1 \n in Azure sql db table: app.tbl_aaa_master_customerorderdata_stg  for the records in [app].[tbl_AAA_orders_temp].",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "cp_Rako_aaa_Orders_Temp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "if exists(select 1 from app.tbl_AAA_Orders_temp)\nupdate a\nset a.is_processed =1 from app.tbl_aaa_master_customerorderdata_stg a\njoin app.tbl_AAA_Orders_temp b on a.materialnumber = b.artikelnummerkunde and b.kundennummer = a.customernumber and a.PageCount = b.Pagecount and a.modifiedtime >\n(select last_modified_date from app.tbl_watermarktable where table_name = 'app.tbl_aaa_customerorderdata');\nselect @@ROWCOUNT",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "csvtoazuresqltable1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Graphicfile/Final Pipeline/Child Pipelines/Child Pipelines Pre-UI/5.CustomerOrderData"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-07T14:47:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/csvtoazuresqltable1')]",
				"[concat(variables('factoryId'), '/datasets/csvtoazuresqltable')]",
				"[concat(variables('factoryId'), '/datasets/ds_rakolabel_input')]",
				"[concat(variables('factoryId'), '/datasets/ds_rakolabel')]",
				"[concat(variables('factoryId'), '/datasets/ds_AAA_OrderDetails_temp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_adf_child_email_eachcustomer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "gm_rejectedfileslist",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_adls_rejections",
								"type": "DatasetReference",
								"parameters": {
									"folderpath": {
										"value": "@{pipeline().parameters.CustomerName}/@{pipeline().parameters.CustomerID}/@{pipeline().parameters.Year}/@{pipeline().parameters.Month}/@{pipeline().parameters.Week}/Level-1/",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"modifiedDatetimeStart": {
									"value": "@pipeline().parameters.PipelineStartTime",
									"type": "Expression"
								},
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "fe_rejectedfile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "gm_rejectedfileslist",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('gm_rejectedfileslist').output.childItems",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "exe_adf_child_email_eachrejectedfile",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_adf_child_email_eachrejectedfile",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceFileName": {
												"value": "@if(\nendswith(\nsubstring(\nitem().name,0,sub(length(item().name),4)),'srcpdf'\n),\nconcat(\nsubstring(\nitem().name,9,sub(length(item().name),19)),'.pdf'),\nif(\nendswith(\nsubstring(\nitem().name,0,sub(length(item().name),4)),'srccsv'\n),\nconcat(\nsubstring(\nitem().name,9,sub(length(item().name),19)),'.csv'),\nconcat(\nsubstring(\nitem().name,9,sub(length(item().name),20)),'.xlsx')\n)\n)",
												"type": "Expression"
											},
											"SourceFilePath": {
												"value": "@concat(pipeline().parameters.CustomerName,'/',pipeline().parameters.CustomerID,'/',pipeline().parameters.Year,'/',pipeline().parameters.Month,'/',pipeline().parameters.Week,'/',\nif(\nendswith(\nsubstring(\nitem().name,0,sub(length(item().name),4)),'srcpdf'\n),\nconcat('pdf/',\nsubstring(\nitem().name,9,sub(length(item().name),19)),'.pdf'),\nif(\nendswith(\nsubstring(\nitem().name,0,sub(length(item().name),4)),'srccsv'\n),\nconcat('csv/',\nsubstring(\nitem().name,9,sub(length(item().name),19)),'.csv'),\nconcat('xlsx/',\nsubstring(\nitem().name,9,sub(length(item().name),20)),'.xlsx'))\n)\n)",
												"type": "Expression"
											},
											"RejectedFileName": {
												"value": "@item().name",
												"type": "Expression"
											},
											"RejectedFilePath": {
												"value": "@concat(pipeline().parameters.CustomerName,'/',pipeline().parameters.CustomerID,'/',pipeline().parameters.Year,'/',pipeline().parameters.Month,'/',pipeline().parameters.Week,'/Level-1/',item().name)",
												"type": "Expression"
											},
											"RejectionEmailIdTO": {
												"value": "@pipeline().parameters.RejectionEmailIdTo",
												"type": "Expression"
											},
											"RejectionEmailIdCC": {
												"value": "@pipeline().parameters.RejectionEmailIdCC",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"CustomerName": {
						"type": "String",
						"defaultValue": "FMC"
					},
					"CustomerID": {
						"type": "String",
						"defaultValue": "1357"
					},
					"Year": {
						"type": "String",
						"defaultValue": "2023"
					},
					"Month": {
						"type": "String",
						"defaultValue": "07"
					},
					"Week": {
						"type": "String",
						"defaultValue": "29"
					},
					"PipelineStartTime": {
						"type": "String",
						"defaultValue": "2023-07-20T12:44:58.6313864Z"
					},
					"RejectionEmailIdTo": {
						"type": "string",
						"defaultValue": "madan.b@technovert.com"
					},
					"RejectionEmailIdCC": {
						"type": "string"
					}
				},
				"variables": {
					"filename": {
						"type": "String"
					},
					"filepath": {
						"type": "String"
					},
					"test": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Graphicfile/Final Pipeline/Child Pipelines/Child Pipelines Pre-UI/4.Email Level-1/Email-level 1-child"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-07T14:47:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adls_rejections')]",
				"[concat(variables('factoryId'), '/pipelines/pl_adf_child_email_eachrejectedfile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_adf_child_email_eachcustomer_Level2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "gm_rejectedfileslist",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_adls_rejections",
								"type": "DatasetReference",
								"parameters": {
									"folderpath": {
										"value": "@{pipeline().parameters.CustomerName}/@{pipeline().parameters.CustomerID}/@{pipeline().parameters.Year}/@{pipeline().parameters.Month}/@{pipeline().parameters.Week}/Level-2/",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"modifiedDatetimeStart": {
									"value": "@pipeline().parameters.PipelineStartTime",
									"type": "Expression"
								},
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "fe_rejectedfile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "gm_rejectedfileslist",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('gm_rejectedfileslist').output.childItems",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "exe_adf_child_email_eachrejectedfile",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_adf_child_email_eachrejectedfile_Level2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceFileName": {
												"value": "@if(\nendswith(\nsubstring(\nitem().name,0,sub(length(item().name),4)),'srcpdf'\n),\nconcat(\nsubstring(\nitem().name,9,sub(length(item().name),19)),'.pdf'),\nif(\nendswith(\nsubstring(\nitem().name,0,sub(length(item().name),4)),'srccsv'\n),\nconcat(\nsubstring(\nitem().name,9,sub(length(item().name),19)),'.csv'),\nconcat(\nsubstring(\nitem().name,9,sub(length(item().name),20)),'.xlsx')\n)\n)",
												"type": "Expression"
											},
											"SourceFilePath": {
												"value": "@concat(pipeline().parameters.CustomerName,'/',pipeline().parameters.CustomerID,'/',pipeline().parameters.SourceFilePath,'/',\nif(\nendswith(\nsubstring(\nitem().name,0,sub(length(item().name),4)),'srcpdf'\n),\nconcat('pdf/',\nsubstring(\nitem().name,9,sub(length(item().name),19)),'.pdf'),\nif(\nendswith(\nsubstring(\nitem().name,0,sub(length(item().name),4)),'srccsv'\n),\nconcat('csv/',\nsubstring(\nitem().name,9,sub(length(item().name),19)),'.csv'),\nconcat('xlsx/',\nsubstring(\nitem().name,9,sub(length(item().name),20)),'.xlsx'))\n)\n)",
												"type": "Expression"
											},
											"RejectedFileName": {
												"value": "@item().name",
												"type": "Expression"
											},
											"RejectedFilePath": {
												"value": "@concat(pipeline().parameters.CustomerName,'/',pipeline().parameters.CustomerID,'/',pipeline().parameters.Year,'/',pipeline().parameters.Month,'/',pipeline().parameters.Week,'/Level-2/',item().name)",
												"type": "Expression"
											},
											"RejectionEmailIdTO": {
												"value": "@pipeline().parameters.RejectionEmailIdTo",
												"type": "Expression"
											},
											"RejectionEmailIdCC": {
												"value": "@pipeline().parameters.RejectionEmailIdCC",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"CustomerName": {
						"type": "String",
						"defaultValue": "FMC"
					},
					"CustomerID": {
						"type": "String",
						"defaultValue": "1357"
					},
					"Year": {
						"type": "String",
						"defaultValue": "2023"
					},
					"Month": {
						"type": "String",
						"defaultValue": "07"
					},
					"Week": {
						"type": "String",
						"defaultValue": "29"
					},
					"PipelineStartTime": {
						"type": "String",
						"defaultValue": "2023-07-20T12:44:58.6313864Z"
					},
					"RejectionEmailIdTo": {
						"type": "string",
						"defaultValue": "madan.b@technovert.com"
					},
					"RejectionEmailIdCC": {
						"type": "string"
					},
					"SourceFilePath": {
						"type": "string"
					}
				},
				"variables": {
					"filename": {
						"type": "String"
					},
					"filepath": {
						"type": "String"
					},
					"test": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Graphicfile/Final Pipeline/Child Pipelines/Child Pipelines Post-UI/Email alerts"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-07T14:47:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adls_rejections')]",
				"[concat(variables('factoryId'), '/pipelines/pl_adf_child_email_eachrejectedfile_Level2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_adf_child_email_eachrejectedfile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "wb_emailworkflow",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://logic-aaa-dev-euw-3.azurewebsites.net:443/api/wf_emailforrejections/triggers/When_a_HTTP_request_is_received/invoke?api-version=2022-05-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=V_8RQ2VZweOqgoquDEjwD9QzMub_pThLRwgcwkPgM-8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"SourceFileName\":\"@{pipeline().parameters.SourceFileName}\",\n\"SourceFilepath\":\"@{pipeline().parameters.SourceFilePath}\",\n\"RejectedFileName\":\"@{pipeline().parameters.RejectedFileName}\",\n\"RejectedFilePath\":\"@{pipeline().parameters.RejectedFilePath}\",\n\"RejectionEmailIdTo\":\"@{pipeline().parameters.RejectionEmailIdTO}\",\n\"RejectedEmailIdCC\":\"@{pipeline().parameters.RejectionEmailIdCC}\"\n}\n",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string"
					},
					"SourceFilePath": {
						"type": "string"
					},
					"RejectedFileName": {
						"type": "string"
					},
					"RejectedFilePath": {
						"type": "string"
					},
					"RejectionEmailIdTO": {
						"type": "string"
					},
					"RejectionEmailIdCC": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Graphicfile/Final Pipeline/Child Pipelines/Child Pipelines Pre-UI/4.Email Level-1/Email-level 1-child"
				},
				"annotations": [],
				"lastPublishTime": "2023-07-27T08:11:44Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_adf_child_email_eachrejectedfile_Level2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "wb_emailworkflow",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://logic-aaa-dev-euw-3.azurewebsites.net:443/api/wf_emailforrejections/triggers/When_a_HTTP_request_is_received/invoke?api-version=2022-05-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=V_8RQ2VZweOqgoquDEjwD9QzMub_pThLRwgcwkPgM-8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"SourceFileName\":\"@{pipeline().parameters.SourceFileName}\",\n\"SourceFilepath\":\"@{pipeline().parameters.SourceFilePath}\",\n\"RejectedFileName\":\"@{pipeline().parameters.RejectedFileName}\",\n\"RejectedFilePath\":\"@{pipeline().parameters.RejectedFilePath}\",\n\"RejectionEmailIdTo\":\"@{pipeline().parameters.RejectionEmailIdTO}\",\n\"RejectedEmailIdCC\":\"@{pipeline().parameters.RejectionEmailIdCC}\"\n}\n",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string"
					},
					"SourceFilePath": {
						"type": "string"
					},
					"RejectedFileName": {
						"type": "string"
					},
					"RejectedFilePath": {
						"type": "string"
					},
					"RejectionEmailIdTO": {
						"type": "string"
					},
					"RejectionEmailIdCC": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Graphicfile/Final Pipeline/Child Pipelines/Child Pipelines Post-UI/Email alerts"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-07T14:47:05Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_adf_child_postUI_approvals')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "sv_pl_starttime",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipeline_starttime",
							"value": {
								"value": "@pipeline().TriggerTime",
								"type": "Expression"
							}
						}
					},
					{
						"name": "sv_year",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Year",
							"value": {
								"value": "@substring(utcnow(),0,4)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "sv_month",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Month",
							"value": {
								"value": "@substring(utcnow(),5,2)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "sv_week",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "week",
							"value": {
								"value": "@if(\n\n    lessOrEquals(int(substring(utcnow(),8,2)),7),'week-1',\n\nif(\n\n    lessOrEquals(int(substring(utcnow(),8,2)),14),'week-2',\n\nif(\n\n    lessOrEquals(int(substring(utcnow(),8,2)),21),'week-3',\nif(\n\n    lessOrEquals(int(substring(utcnow(),8,2)),28),'week-4','week-5'\n\n    )\n\n    )\n\n    )\n\t)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "exe_adf_master_email",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "exe_rejected_data_injestion",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_adf_master_email_Level2",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineStartTime": {
									"value": "@variables('pipeline_starttime')",
									"type": "Expression"
								},
								"Year": {
									"value": "@variables('Year')",
									"type": "Expression"
								},
								"Month": {
									"value": "@variables('Month')",
									"type": "Expression"
								},
								"Week": {
									"value": "@variables('week')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "exe_adf_order_creation_input",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "sv_pl_starttime",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "sv_year",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "sv_month",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "sv_week",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_adf_order_creation_input",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pipeline_starttime": {
									"value": "@variables('pipeline_starttime')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "exe_rejected_data_injestion",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "sv_year",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "sv_pl_starttime",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "sv_month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_rejected_data_injestion_v1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Year": {
									"value": "@variables('Year')",
									"type": "Expression"
								},
								"Month": {
									"value": "@variables('Month')",
									"type": "Expression"
								},
								"week": {
									"value": "@variables('week')",
									"type": "Expression"
								},
								"pipeline_starttime": {
									"value": "@variables('pipeline_starttime')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "lk_update_watermark",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "exe_adf_master_email",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "exe_adf_order_creation_input",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "update app.tbl_watermarktable\nset last_modified_date = '@{variables('pipeline_starttime')}' where table_name = 'app.tbl_Order_Creation_Inputs';\nselect 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_AAA_OrderDetails_temp",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Year": {
						"type": "String"
					},
					"Month": {
						"type": "String"
					},
					"week": {
						"type": "String"
					},
					"pipeline_starttime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Graphicfile/Final Pipeline/Child Pipelines/Child Pipelines Post-UI"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_adf_master_email_Level2')]",
				"[concat(variables('factoryId'), '/pipelines/pl_adf_order_creation_input')]",
				"[concat(variables('factoryId'), '/pipelines/pl_rejected_data_injestion_v1')]",
				"[concat(variables('factoryId'), '/datasets/ds_AAA_OrderDetails_temp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_adf_child_preUI')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "sv_pl_starttime",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipeline_starttime",
							"value": {
								"value": "@pipeline().TriggerTime",
								"type": "Expression"
							}
						}
					},
					{
						"name": "exe_adf_master_pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "sv_pl_starttime",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "sv_year",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "sv_month",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "sv_week",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_adf_master_source_raw_prestage_stage",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Pipelinestarttime": {
									"value": "@variables('pipeline_starttime')",
									"type": "Expression"
								},
								"Year": {
									"value": "@variables('Year')",
									"type": "Expression"
								},
								"Month": {
									"value": "@variables('Month')",
									"type": "Expression"
								},
								"week": {
									"value": "@variables('week')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "sv_year",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Year",
							"value": {
								"value": "@substring(pipeline().TriggerTime,0,4)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "sv_month",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Month",
							"value": {
								"value": "@substring(pipeline().TriggerTime,5,2)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "exe_adf_Sanitycheck_1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "exe_adf_master_pipeline",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_sanitycheck_1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Year": {
									"value": "@variables('Year')",
									"type": "Expression"
								},
								"Month": {
									"value": "@variables('Month')",
									"type": "Expression"
								},
								"PipelineStartTime": {
									"value": "@variables('pipeline_starttime')",
									"type": "Expression"
								},
								"week": {
									"value": "@variables('week')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Fail1",
						"type": "Fail",
						"dependsOn": [
							{
								"activity": "exe_adf_Sanitycheck_1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"message": "Sanity check-1 failed",
							"errorCode": "100"
						}
					},
					{
						"name": "exe_adf_master_email",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "exe_adf_Sanitycheck_1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_adf_master_email",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineStartTime": {
									"value": "@variables('pipeline_starttime')",
									"type": "Expression"
								},
								"Year": {
									"value": "@variables('Year')",
									"type": "Expression"
								},
								"Month": {
									"value": "@variables('Month')",
									"type": "Expression"
								},
								"Week": {
									"value": "@variables('week')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "exe_adf_existance_checks",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "exe_adf_Sanitycheck_1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_adf_second_sanity_check",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Year": {
									"value": "@variables('Year')",
									"type": "Expression"
								},
								"Month": {
									"value": "@variables('Month')",
									"type": "Expression"
								},
								"PipelineStartTime": {
									"value": "@variables('pipeline_starttime')",
									"type": "Expression"
								},
								"Week": {
									"value": "@variables('week')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "sv_week",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "week",
							"value": {
								"value": "@if(\n\n    lessOrEquals(int(substring(pipeline().TriggerTime,8,2)),7),'week-1',\n\nif(\n\n    lessOrEquals(int(substring(pipeline().TriggerTime,8,2)),14),'week-2',\n\nif(\n\n    lessOrEquals(int(substring(pipeline().TriggerTime,8,2)),21),'week-3',\nif(\n\n    lessOrEquals(int(substring(pipeline().TriggerTime,8,2)),28),'week-4','week-5'\n\n    )\n\n    )\n\n    )\n\t)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Fail2",
						"type": "Fail",
						"dependsOn": [
							{
								"activity": "exe_adf_master_pipeline",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"message": "Ingestion pipeline failed",
							"errorCode": "101"
						}
					},
					{
						"name": "exe_adf_master_aaa_customerorderdata",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "exe_adf_existance_checks",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_adf_master_aaa_CustomerOrderData_load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Year": {
									"value": "@variables('Year')",
									"type": "Expression"
								},
								"Month": {
									"value": "@variables('Month')",
									"type": "Expression"
								},
								"PipelineStartTime": {
									"value": "@variables('pipeline_starttime')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "exe_adf_UpdatePipelineEndTime",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "exe_adf_master_aaa_customerorderdata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_UpdatePipelineEndTime",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineStartTime": {
									"value": "@variables('pipeline_starttime')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"pl_starttime": {
						"type": "string"
					}
				},
				"variables": {
					"Year": {
						"type": "String"
					},
					"Month": {
						"type": "String"
					},
					"week": {
						"type": "String"
					},
					"Filename": {
						"type": "String"
					},
					"pipeline_starttime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Graphicfile/Final Pipeline/Child Pipelines/Child Pipelines Pre-UI"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-07T17:00:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_adf_master_source_raw_prestage_stage')]",
				"[concat(variables('factoryId'), '/pipelines/pl_sanitycheck_1')]",
				"[concat(variables('factoryId'), '/pipelines/pl_adf_master_email')]",
				"[concat(variables('factoryId'), '/pipelines/pl_adf_second_sanity_check')]",
				"[concat(variables('factoryId'), '/pipelines/pl_adf_master_aaa_CustomerOrderData_load')]",
				"[concat(variables('factoryId'), '/pipelines/pl_UpdatePipelineEndTime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_adf_master_aaa_CustomerOrderData_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lk_incrementaldate_watermarktable",
						"description": "getting the  last_modified_date from app.tbl_watermarktable where table_name = 'app.tbl_aaa_CustomerOrderData'",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "exe_aaa_orders_rako_db",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select last_modified_date as last_modified_date from app.tbl_watermarktable where table_name = 'app.tbl_aaa_CustomerOrderData'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "csvtoazuresqltable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "cp_aaa_Orders_stg_aaa_CustomerOrderData",
						"description": "joining app.tbl_aaa_orders_temp with app.tbl_aaa_master_customerorderdata_stg table  and loading the data into final table -  tbl_aaa_CustomerOrderData",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "lk_incrementaldate_watermarktable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select a.[MaterialNumber]\n,[PurchaseOrder]\n,[VendorNumber]\n,[VendorName]\n,[VATNumber]\n,[OrderAddressName]\n,[OrderAddressStreet]\n,[OrderAdressPostalCode]\n,[OrderAdressCity]\n,[OrderAdressCountry]\n,[Telephone]\n,[VendorEmail]\n,[Date]\n ,[TermsofPayment]\n ,[ContactPerson]\n ,[Email]\n,[DeliveryAdressName]\n ,[DeliveryAdressNameAddition]\n,[DeliveryAdressStreet]\n ,[DeliveryAdressPostalCode]\n ,[DeliveryAdressCity]\n ,[DeliveryAdressCountry]\n ,[BillingAdressName]\n ,[BillingAdressStreet]\n ,[BillingAdressPostalCode]\n ,[BillingAdressCity]\n ,[BillingAdressCountry]\n,[BillingE-Mail]\n,[BillingcustomerVATNumber]\n,[ResidentCountryVATID]\n,[HeaderText]\n,cast([Item] as int) as Item\n,[Size]\n,[WindingMethod]\n,[Qty]\n,[UOM]\n,cast(replace([UnitPriceCur],',','') as REAL) as [UnitPriceCur]\n,[NetAmount]\n,[DeliveryDate]\n,[SubTotal]\n,[TotalAmount]\n,[Description]\n,case when a.secondary_filepath is null and \nprimary_component is not null and (a.DescriptionDQ not like '%Material Number%' or a.DescriptionDQ is null) then \n\tcase when descriptiondq is null then 'BASE Artwork file has not been uploaded in Source Folder'\n\telse concat([DescriptionDQ],';','BASE Artwork file has not been uploaded in Source Folder') end\nwhen a.Primary_filepath is not null and primary_component is null and a.[Pagecount] <> 0\nand (a.DescriptionDQ not like '%Material Number%'or a.DescriptionDQ is null) then\n\tcase when descriptiondq is null then 'Master Data isnt available in RAKO Database'\n\telse concat([DescriptionDQ],';','Master Data isnt available in RAKO Database') end\nwhen a.primary_filepath is null and (a.DescriptionDQ not like '%Material Number%'or a.DescriptionDQ is null) then\ncase when descriptiondq is null then 'BOOKLABEL Artwork File is missing in Source Folder'\n\telse concat([DescriptionDQ],';','BOOKLABEL Artwork File has not been uploaded in Source Folder') end\nelse DescriptionDQ \nend as DescriptionDQ\n,cast(a.[CustomerNumber] as int) as [CustomerNumber]\n,[FileName]\n,cast([Etikettennummer] as int) as [Etikettennummer]\n,[Aenderungsindex]\n,[ArtikelnummerKunde]\n,cast([Stammnummer] as int) as Stammnummer\n,[Kundennummer]\n,[Sortentext]\n,[SortentextAusl]\n,[letzte_Bestaetigung]\n,[vorletzte_Bestaetigung]\n,[letzter_Auftrag]\n,[Sortierkriterium]\n,[SortierRegion]\n,[Garniturschluessel]\n,[Anzahl_Klischees]\n,[InLManlegenkannweg]\n,[InLMangelegtkannweg]\n,[Importdurch]\n,[Sortierkriterium1]\n,[Sortierkriterium2]\n,[Sortierkriterium3]\n,[Sortierkriterium4]\n,[Sortierkriterium5]\n,[Sortierkriterium6]\n,[Periodenbedarf]\n,[Bedarfsperiode]\n,[FTKNummer]\n,[Seite]\n,[GarniturID]\n,[Freigabeindex]\n,[LMSStatus]\n,[VorProduktion]\n,[Layoutnummer]\n,[Computer]\n,[GrafikDatenpfad]\n,[Farbtoleranzkarte]\n,[Farbfibel]\n,[VSRSzusammen]\n,[Druckplatte]\n,[Artpro]\n,[DispoKunde]\n,[LMSUpdate]\n,[DVS]\n\n\n\n,[Hintergrundfarbe]\n\n\n\n,[GrafikIdentNr]\n\n\n\n,[Barcode]\n\n\n\n,[CENStufe]\n\n\n\n,[Ablageort]\n\n\n\n,[GewichtEtikett]\n\n\n\n,[KontraktNummer]\n\n\n\n,[PraegeZylID]\n\n\n\n,[WicklungSorte]\n\n\n\n,[Mindestbestand]\n\n\n\n,[CENStufe2D]\n\n\n\n,[LackfreiesFeld]\n\n\n\n,[KundenzertifikatErstellt]\n\n\n\n,[LackKlischee]\n\n\n\n,[KundenzertifikatNr]\n\n\n\n,[KundenzertifikatStatus]\n\n\n\n,[KundenzertifikatFreigabeDatum]\n\n\n\n,[KundeKategorieProjekt]\n\n\n\n,[KundeKategorieMarke]\n\n\n\n,[KundeKategorieProdukt]\n\n\n\n,[ColorManagementSystem]\n\n\n\n,[DVSKommentar]\n\n\n\n,[PruefmerkmalEindeutig]\n\n\n\n,[FarbreferenzSystemID]\n\n\n\n,[FarbreferenzVorlageTypID]\n\n\n\n,[PruefmerkmalArtID]\n\n\n\n,[WicklungID]\n\n\n\n,[CountryCodeID]\n\n\n\n,[Rollenkern]\n\n\n\n,[RollenkernID]\n\n\n\n,[Abrufware]\n\n\n\n,[CustomerBusinessLine]\n\n\n\n,[CustomerProductLine]\n\n\n\n,[CAN]\n\n \n\n      ,[MasterFile]\n\n \n\n      ,[DWRowVersion]\n\n \n\n      ,[CustomerProjectNameOrBrand]\n\n \n\n      ,[CustomerPortfolioID]\n\n \n\n      ,[Format]\n\n \n\n      ,[FormatAusl]\n\n \n\n      ,[Druckzylindernummer]\n\n \n\n      ,[Etiketten_je_Rolle]\n\n \n\n      ,[EtikRolle_genau]\n\n \n\n      ,[Etiketten_je_RolleAusl]\n\n \n\n      ,[Klebstoff]\n\n \n\n      ,[Klebstoff_genau]\n\n \n\n      ,[KlebstoffAusl]\n\n \n\n      ,[Rollenaussendurchmesser]\n\n \n\n      ,[Rollausdurchm_genau]\n\n \n\n      ,[RollenaussendurchmesserAusl]\n\n \n\n      ,[Traegerbahnbreite]\n\n \n\n      ,[Traegerbahn_genau]\n\n \n\n      ,[Wicklung]\n\n \n\n      ,[Wicklung_genau]\n\n \n\n      ,[WicklungAusl]\n\n \n\n      ,[Stammtext]\n\n \n\n      ,[StammtextAusl]\n\n \n\n      ,[Stamm_Kundennummer]\n\n \n\n      ,[Produkt]\n\n \n\n      ,[ProduktAusl]\n\n \n\n      ,[Farben_genau]\n\n \n\n      ,[Farbe]\n\n \n\n      ,[FarbeAusl]\n\n \n\n      ,[Material]\n\n \n\n      ,[Traeger_Genau]\n\n \n\n      ,[Traeger2_Genau]\n\n \n\n      ,[Kaschier_Genau]\n\n \n\n      ,[Heisspraeg_Genau]\n\n \n\n      ,[MaterialAusl]\n\n \n\n      ,[Zusatztext_Stanze]\n\n \n\n      ,[Stamm_Rollenkern]\n\n \n\n      ,[Rollenkern_genau]\n\n \n\n      ,[RollenkernAusl]\n\n \n\n      ,[StammStanze]\n\n \n\n      ,[Materialnummer]\n\n \n\n      ,[Preisstaffelnotiz]\n\n \n\n      ,[Kontrollstufe]\n\n \n\n      ,[Geschw_Text]\n\n \n\n      ,[Speedmaster]\n\n \n\n      ,[Motivwechselkosten]\n\n \n\n      ,[StammMaterialbreite]\n\n \n\n      ,[DV_Datum]\n\n \n\n      ,[StammStanze2]\n\n \n\n      ,[Digital]\n\n \n\n      ,[StammMaterialbreite2]\n\n \n\n      ,[Stanze]\n\n \n\n      ,[Stanze2]\n\n \n\n      ,[Hinweis_DV]\n\n \n\n      ,[Kalkulationsnummer]\n\n \n\n      ,[Sonderfarben_genau]\n\n \n\n      ,[Breite]\n\n \n\n      ,[Hoehe]\n\n \n\n      ,[AnzahlNutzen]\n\n \n\n      ,[Textwechsel]\n\n \n\n      ,[Farbwechsel]\n\n \n\n      ,[MatBreite]\n\n \n\n      ,[Maschine]\n\n \n\n      ,[Gewinnstufe]\n\n \n\n      ,[Gewinnstufe_selekt]\n\n \n\n      ,[DBGrad]\n\n \n\n      ,[Schwierigkeitsgrad]\n\n \n\n      ,[UVLack]\n\n \n\n      ,[Stamm_LackfreiesFeld]\n\n \n\n      ,[ProblematischesGitter]\n\n \n\n      ,[Wendevorrichtung]\n\n \n\n      ,[WendemitDruck]\n\n \n\n      ,[Blattware]\n\n \n\n      ,[Lochung]\n\n \n\n      ,[Perforation]\n\n \n\n      ,[Spezialkleber]\n\n \n\n      ,[GoldSilberlack]\n\n \n\n      ,[PreisMaterial]\n\n \n\n      ,[PreisKaschierfolie]\n\n \n\n      ,[PreisHeisspraegefolie]\n\n \n\n      ,[PreisTraeger2]\n\n \n\n      ,[Geschwindigkeit]\n\n \n\n      ,[PreisMaterialGesamt]\n\n \n\n      ,[Taktzeit]\n\n \n\n      ,[SpezifikationinSorte]\n\n \n\n      ,[Teilangebotsnummer]\n\n \n\n      ,[Angebotsnummer]\n\n \n\n      ,[PreiseGueltigMenge]\n\n \n\n      ,[PreiseGueltigVon]\n\n \n\n      ,[Expresskalkulation]\n\n \n\n      ,[PreiseGueltigBis]\n\n \n\n      ,[technHinweis]\n\n \n\n      ,[Wasserfarben]\n\n \n\n      ,[Gitterabzug]\n\n \n\n      ,[Passert]\n\n \n\n      ,[Farbeinh]\n\n \n\n      ,[Farbmenge]\n\n \n\n      ,[Bahntrennung]\n\n \n\n      ,[Kleberdruck]\n\n \n\n      ,[Flexprint]\n\n \n\n      ,[Gravur]\n\n \n\n      ,[MattLack]\n\n \n\n      ,[StanzeID]\n\n \n\n      ,[Stanze2ID]\n\n \n\n      ,[Stamm_Druckplatte]\n\n \n\n      ,[Einrichtekosten]\n\n \n\n      ,[MaschineID]\n\n \n\n      ,[PreisMaterialEuro]\n\n \n\n      ,[PreisKaschierfolieEuro]\n\n \n\n      ,[PreisHeisspraegefolieEuro]\n\n \n\n      ,[PreisMaterial2Euro]\n\n \n\n      ,[PreisMaterialGesamtEuro]\n\n \n\n      ,[EinrichtekostenEuro]\n\n \n\n      ,[MotivwechselkostenEuro]\n\n \n\n      ,[Stamm_ArtPro]\n\n \n\n      ,[Basisruestkosten]\n\n \n\n      ,[BasisruestkostenEuro]\n\n \n\n      ,[EinrichteWechselkosten]\n\n \n\n      ,[EinrichteWechselkostenEuro]\n\n \n\n      ,[Fortdruckkosten]\n\n \n\n      ,[FortdruckkostenEuro]\n\n \n\n      ,[Mindestbestellmenge]\n\n \n\n      ,[SortenProBestellung]\n\n \n\n      ,[FertigungenMax]\n\n \n\n      ,[Versandanweisung]\n\n \n\n      ,[Konfektionieranweisung]\n\n \n\n      ,[Qualitaetsanweisung]\n\n \n\n      ,[Produktionsanweisung]\n\n \n\n      ,[Grafikanweisung]\n\n \n\n      ,[Stamm_Ablageort]\n\n \n\n      ,[LackID]\n\n \n\n      ,[Lack2ID]\n\n \n\n      ,[QSProduktionsanweisung]\n\n \n\n      ,[Stamm_CENStufe]\n\n \n\n      ,[StarterFoil]\n\n \n\n      ,[Zusatzwerkzeug]\n\n \n\n      ,[TaktzeitGeprueft]\n\n \n\n      ,[PraegefolieMehrfachverwendung]\n\n \n\n      ,[DrucklaengeFlexo]\n\n \n\n      ,[DrucklaengeSieb]\n\n \n\n      ,[MaterialspezifikationStatus]\n\n \n\n      ,[Farbanforderungsstufe]\n\n \n\n      ,[GrundEtikettenNummer]\n\n \n\n      ,[TextWechselKostenEuro]\n\n \n\n      ,[FrachtkostenZuschlagEuro]\n\n \n\n      ,[TaktzeitDigital]\n\n \n\n      ,[TaktzeitDigitalGeprueft]\n\n \n\n      ,[FortdruckkostenTenderEuro]\n\n \n\n      ,[FarbanforderungsstufeRisiko]\n\n \n\n      ,[FarbanforderungsstufeKommentar]\n\n \n\n      ,[ProduktID]\n\n \n\n      ,[Kernstaerke]\n\n \n\n      ,[Kernbreite]\n\n \n\n      ,[Wicklungsstaerke]\n\n \n\n      ,[HundertProzentKontrolle]\n\n \n\n      ,[Messerart]\n\n \n\n      ,[NeutraleKonfektionierung]\n\n \n\n      ,[Musterangaben]\n\n \n\n      ,[IDAngebotPosition]\n\n \n\n      ,[Einrichtemeter]\n\n \n\n      ,[Einrichtemeter_geprueft]\n\n \n\n      ,[BasisruestkostenVorAenderungEuro]\n\n \n\n      ,[EinrichteWechselkostenVorAenderungEuro]\n ,[FortdruckkostenVorAenderungEuro]\n ,[EtikettJeRolleEinheit]\n,[Stamm_DWRowVersion]\n,getdate() as [insertedDate]\n,null as [IsApproved]\n ,null as [ApproverComments]\n,ERPDeliveryAddressStreet as ERPDeliveryAddressStreet\n,null as [New_Etikettennummer]\n,null as [New_Stammnummer]\n,keycolumn as KeyColumn\n,case when a.secondary_filepath is null and primary_component is not null and (a.DescriptionDQ not like '%Material Number%' or a.DescriptionDQ is null) then\ncase when errorjson is null then '[{\"ErrorType\":\"Artwork File\",\"Comment\":\"BASE Artwork File has not been uploaded in Source Folder\"}]'\nelse concat(substring(errorjson,1,len(errorjson)-1),',{\"ErrorType\":\"Artwork File\",\"Comment\":\"BASE Artwork File has not been uploaded in Source Folder\"}]')\nend\nwhen a.Primary_filepath is not null and primary_component is null and a.[Pagecount] <> 0\nand (a.DescriptionDQ not like '%Material Number%'or a.DescriptionDQ is null) then case\nwhen errorjson is null\nthen '[{\"ErrorType\":\"Master Data\",\"Comment\":\"Master Data isnt available in RAKO Database\"}]'\nelse concat(substring(errorjson,1,len(errorjson)-1),',{\"ErrorType\":\"Master Data\",\"Comment\":\"Master Data isnt available in RAKO Database\"}]')\nend\nwhen a.primary_filepath is null and (a.DescriptionDQ not like '%Material Number%'or a.DescriptionDQ is null) then\ncase\nwhen errorjson is null\nthen '[{\"ErrorType\":\"Artwork File\",\"Comment\":\"BOOKLABEL Artwork File is missing in Source Folder\"}]'\nelse concat(substring(errorjson,1,len(errorjson)-1),',{\"ErrorType\":\"Artwork File\",\"Comment\":\"BOOKLABEL Artwork File has not been uploaded in Source Folder\"}]')\nend\nelse errorjson end as ErrorJSON\n ,Id as Id\n\n \n\n      ,CustomerName as CustomerName\n\n \n\n      ,'FALSE' as IsProcessed\n\n \n\n      ,FolderHierarchy as FolderHierarchy\n\n \n\n      ,a.[PageCount] as PageCount\n\n \n\n      ,b.ProductName as ProductName\n\n \n\n        ,KonfPruefungErforderlich as KonfPruefungErforderlich\n\n \n\n      ,Stamm_FSC_IstZertifiziert\n\n \n\n      ,b.TripleARef\n\n ,TriggerTableID as TriggerTableID\n\n      ,case\n       when (a.secondary_filepath is null and primary_component is not null) or (a.Primary_filepath is not null and primary_component is null and a.[Pagecount] <> 0) then 1 else IsErrorDQ end as IsErrorDQ,\n       primary_filepath as primary_filepath,secondary_filepath as secondary_filepath\nfrom\n      app.tbl_aaa_master_customerorderdata_stg a\nleft join app.tbl_AAA_Orders_temp b on a.MaterialNumber = b.ArtikelNummerKunde and a.CustomerNumber=b.KundenNummer and a.PageCount = b.PageCount\nwhere a.modifiedTime > '@{activity('lk_incrementaldate_watermarktable').output.firstRow.last_modified_date}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_asql_ArtworkFileMetadata1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_aaa_CustomerOrderData1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "lk_update_date_watermarktable",
						"description": "Updating the watermark table.",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "cp_aaa_Orders_stg_aaa_CustomerOrderData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "update app.tbl_watermarktable\r\nset last_modified_date = (select max(insertedDate) from app.tbl_aaa_CustomerOrderData)\r\nwhere table_name = 'app.tbl_aaa_CustomerOrderData';\r\nselect @@ROWCOUNT",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_AAA_OrderDetails_temp1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "exe_aaa_orders_rako_db",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_adf_aaa_Orders_Rako_db1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "sp_auditlogs-stage_master_success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "cp_aaa_Orders_stg_aaa_CustomerOrderData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_AuditLogStagetoMaster]",
							"storedProcedureParameters": {
								"Errors": {
									"value": null,
									"type": "String"
								},
								"MasterCount": {
									"value": {
										"value": "@activity('cp_aaa_Orders_stg_aaa_CustomerOrderData').output.rowsCopied",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"PipelineEndTime": {
									"value": {
										"value": "@utcNow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStartTime": {
									"value": {
										"value": "@activity('cp_aaa_Orders_stg_aaa_CustomerOrderData').output.executionDetails[0].start",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"StageCount": {
									"value": {
										"value": "@activity('cp_aaa_Orders_stg_aaa_CustomerOrderData').output.rowsRead",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"Status": {
									"value": "Success",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_sql_a4ltriplea",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_auditlogs-stage_master_failure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "cp_aaa_Orders_stg_aaa_CustomerOrderData",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_AuditLogStagetoMaster]",
							"storedProcedureParameters": {
								"Errors": {
									"value": {
										"value": "@activity('cp_aaa_Orders_stg_aaa_CustomerOrderData').output.errors",
										"type": "Expression"
									},
									"type": "String"
								},
								"MasterCount": {
									"value": {
										"value": "@activity('cp_aaa_Orders_stg_aaa_CustomerOrderData').output.rowsCopied",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"PipelineEndTime": {
									"value": {
										"value": "@utcNow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStartTime": {
									"value": {
										"value": "@activity('cp_aaa_Orders_stg_aaa_CustomerOrderData').output.executionDetails[0].start",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"StageCount": {
									"value": {
										"value": "@activity('cp_aaa_Orders_stg_aaa_CustomerOrderData').output.rowsRead",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"Status": {
									"value": "Failure",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_sql_a4ltriplea",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_SecondLevel_AuditLogs",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "cp_aaa_Orders_stg_aaa_CustomerOrderData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[app].[usp_AuditLogsStagetoMaster]",
							"storedProcedureParameters": {
								"filereportingmonth": {
									"value": {
										"value": "@pipeline().parameters.Month",
										"type": "Expression"
									},
									"type": "String"
								},
								"filereportingyear": {
									"value": {
										"value": "@pipeline().parameters.Year",
										"type": "Expression"
									},
									"type": "String"
								},
								"modifieddate": {
									"value": {
										"value": "@pipeline().parameters.PipelineStartTime",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"pipelinename": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipelinerunid": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_sql_a4ltriplea",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Year": {
						"type": "string"
					},
					"Month": {
						"type": "string"
					},
					"PipelineStartTime": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Graphicfile/Final Pipeline/Child Pipelines/Child Pipelines Pre-UI/5.CustomerOrderData"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-07T14:47:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/csvtoazuresqltable1')]",
				"[concat(variables('factoryId'), '/datasets/ds_asql_ArtworkFileMetadata1')]",
				"[concat(variables('factoryId'), '/datasets/ds_aaa_CustomerOrderData1')]",
				"[concat(variables('factoryId'), '/datasets/ds_AAA_OrderDetails_temp1')]",
				"[concat(variables('factoryId'), '/pipelines/pl_adf_aaa_Orders_Rako_db1')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_a4ltriplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_adf_master_artworkfile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lk_tbl_MainControlTable_and_TriggerTable",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select T.Id as TID,T.CustomerName as FolderName,Triggertime,FileName,FileType,IsProcessed,T.CustomerNumber as TCustomerNumber,M.Id as MID,M.CustomerName as CustomerName,M.CustomerNumber as CustomerNumber,CSVColumnMapping,XLSXColumnMapping,PDFMapping,FormRecogniserModelID,ModifiedBy,ModifiedDate,PDFSourceColumns,PDFTargetColumns,CSVTargetColumns,CSVSourceColumns,XLSXSourceColumns,XLSXTargetColumns,FormRecogniserTableName,IsCSVHeaderAvailable,IsXLSXHeaderAvailable from [app].[tbl_TriggerTable] AS T left join [app].[tbl_MainControlTable] AS M on  T.CustomerNumber=M.CustomerNumber where t.Triggertime<= '@{pipeline().parameters.Pipleline_starttime}' and IsProcessed=0 and FileType='ArtworkFile' and PipelineEndTime is null\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_asql_maincontroltable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "fe_MainControlTable",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "lk_tbl_MainControlTable_and_TriggerTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lk_tbl_MainControlTable_and_TriggerTable').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "cp_artwork_source_raw",
									"description": "Copying the File from Source to Raw with defined Folder structure -Dynamically.",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"modifiedDatetimeEnd": {
													"value": "@pipeline().parameters.Pipleline_starttime",
													"type": "Expression"
												},
												"wildcardFolderPath": {
													"value": "@concat(item().CustomerName,'/',item().CustomerNumber,'/ArtworkFiles/')",
													"type": "Expression"
												},
												"wildcardFileName": {
													"value": "@item().FileName",
													"type": "Expression"
												},
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false,
										"parallelCopies": 10
									},
									"inputs": [
										{
											"referenceName": "ds_artwork_source",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_artworkfile_raw",
											"type": "DatasetReference",
											"parameters": {
												"folderpath": {
													"value": "@concat(item().CustomerName,'/',item().CustomerNumber,'/',pipeline().parameters.Year,'/',pipeline().parameters.Month,'/',pipeline().parameters.week,'/','ArtworkFiles/')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "cp_extract_xml",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "cp_artwork_source_raw",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "XmlSource",
											"additionalColumns": [
												{
													"name": "FileName",
													"value": {
														"value": "@item().FileName",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "XmlReadSettings",
												"validationMode": "none",
												"namespaces": true
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"parallelCopies": 10,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "$['dataReception']['originalFilename']"
													},
													"sink": {
														"name": "originalFilename",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['dataReception']['pages']"
													},
													"sink": {
														"name": "pages",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['dataReception']['pagesDeclaration']"
													},
													"sink": {
														"name": "pagesDeclaration",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['dataReception']['application']"
													},
													"sink": {
														"name": "application",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['dataReception']['labelSKU']"
													},
													"sink": {
														"name": "labelSKU",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['dataReception']['labelSKUDescription']"
													},
													"sink": {
														"name": "labelSKUDescription",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['dataReception']['productSKU']"
													},
													"sink": {
														"name": "productSKU",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['dataReception']['filePath']"
													},
													"sink": {
														"name": "filePath",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['dataReception']['@customer']"
													},
													"sink": {
														"name": "CustomerName",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['FileName']"
													},
													"sink": {
														"name": "FileName",
														"type": "String"
													}
												}
											],
											"collectionReference": ""
										}
									},
									"inputs": [
										{
											"referenceName": "ds_xml_raw",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@item().FileName",
													"type": "Expression"
												},
												"FolderPath": {
													"value": "@concat(item().CustomerName,'/',item().CustomerNumber,'/',pipeline().parameters.Year,'/',pipeline().parameters.Month,'/',pipeline().parameters.week,'/','ArtworkFiles/')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_asql_ArtworkFileMetadata",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "sp_update_Triggertable",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "cp_extract_xml",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[app].[usp_Triggertable_Update]",
										"storedProcedureParameters": {
											"FileName": {
												"value": {
													"value": "@item().FileName",
													"type": "Expression"
												},
												"type": "String"
											},
											"Pipeline_starttime": {
												"value": {
													"value": "@pipeline().parameters.Pipleline_starttime",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_sql_a4ltriplea",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Pipleline_starttime": {
						"type": "string"
					},
					"Year": {
						"type": "string"
					},
					"Month": {
						"type": "string"
					},
					"week": {
						"type": "string"
					}
				},
				"variables": {
					"PipelineStartTime": {
						"type": "String"
					},
					"week": {
						"type": "String"
					},
					"time": {
						"type": "String"
					},
					"date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Graphicfile/Final Pipeline/Child Pipelines/Child Pipelines Pre-UI/3.Existence check Sanity Level-2/ArtworkFileHandling"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-07T14:47:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_asql_maincontroltable')]",
				"[concat(variables('factoryId'), '/datasets/ds_artwork_source')]",
				"[concat(variables('factoryId'), '/datasets/ds_artworkfile_raw')]",
				"[concat(variables('factoryId'), '/datasets/ds_xml_raw')]",
				"[concat(variables('factoryId'), '/datasets/ds_asql_ArtworkFileMetadata')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_a4ltriplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_adf_master_email')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lk_tbl_MainControlTable_TriggerTable",
						"description": "Look up into control table -\n[app].[tbl_MainControlTable] for source folder name which is the customername",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM [app].[tbl_MainControlTable]\nWHERE CustomerNumber in (\nSELECT DISTINCT CustomerNumber from [app].[tbl_TriggerTable]\nWHERE Triggertime< '@{pipeline().parameters.PipelineStartTime}' and IsProcessed=1 and FileType='OrderFile' and FirstSanity_IsProcessed=1 and IsRejection_Processed=0 and PipelineEndTime is null)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_asql_maincontroltable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "fe_Customer",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "lk_tbl_MainControlTable_TriggerTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lk_tbl_MainControlTable_TriggerTable').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "gm_check_rejectionfolderexistance",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_adls_rejections",
											"type": "DatasetReference",
											"parameters": {
												"folderpath": {
													"value": "@{item().CustomerName}/@{item().CustomerNumber}/@{pipeline().parameters.Year}/@{pipeline().parameters.Month}/@{pipeline().parameters.Week}/Level-1/",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								},
								{
									"name": "if_check_gm_result",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "gm_check_rejectionfolderexistance",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@activity('gm_check_rejectionfolderexistance').output.exists",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "exe_adf_child_email_eachcustomer",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "pl_adf_child_email_eachcustomer",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"CustomerName": {
															"value": "@item().CustomerName",
															"type": "Expression"
														},
														"CustomerID": {
															"value": "@item().CustomerNumber",
															"type": "Expression"
														},
														"Year": {
															"value": "@pipeline().parameters.Year",
															"type": "Expression"
														},
														"Month": {
															"value": "@pipeline().parameters.Month",
															"type": "Expression"
														},
														"Week": {
															"value": "@pipeline().parameters.Week",
															"type": "Expression"
														},
														"PipelineStartTime": {
															"value": "@pipeline().parameters.PipelineStartTime",
															"type": "Expression"
														},
														"RejectionEmailIdTo": {
															"value": "@item().RejectionEmailIdTO",
															"type": "Expression"
														},
														"RejectionEmailIdCC": {
															"value": "@item().RejectionEmailIdCC",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "sp_Triggertable_update",
												"description": "Here we are updating Rejection_Isprocessed with1 if the rejection file is processed.",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "exe_adf_child_email_eachcustomer",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[app].[usp_Triggertable_Rejectionprocess_Update]",
													"storedProcedureParameters": {
														"CustomerName": {
															"value": {
																"value": "@item().CustomerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"Pipeline_starttime": {
															"value": {
																"value": "@pipeline().parameters.PipelineStartTime",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "ls_sql_a4ltriplea",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"PipelineStartTime": {
						"type": "String"
					},
					"Year": {
						"type": "string"
					},
					"Month": {
						"type": "string"
					},
					"Week": {
						"type": "string"
					}
				},
				"variables": {
					"week": {
						"type": "String"
					},
					"time": {
						"type": "String"
					},
					"date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Graphicfile/Final Pipeline/Child Pipelines/Child Pipelines Pre-UI/4.Email Level-1"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-07T14:47:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_asql_maincontroltable')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls_rejections')]",
				"[concat(variables('factoryId'), '/pipelines/pl_adf_child_email_eachcustomer')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_a4ltriplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_adf_master_email_Level2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lk_tbl_aaa_CustomerOrderData",
						"description": "",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "With CTE as(\nSELECT DISTINCT CustomerNumber,CustomerName,FolderHierarchy FROM [app].[tbl_aaa_CustomerOrderData]\nWHERE ApprovalTimestamp BETWEEN (\n\t\t\tSELECT last_modified_date\n\t\t\tFROM app.tbl_watermarktable\n\t\t\tWHERE table_name = 'app.tbl_Order_Creation_Inputs'\n\t\t\t) and '@{pipeline().parameters.PipelineStartTime}' and IsApproved=0 \n)\nSELECT CTE.CustomerName,\nCTE.CustomerNumber,\nFolderHierarchy,\nMC.RejectionEmailIdTO,\nMC.RejectionEmailIdCC\nFROM CTE\nJOIN [app].[tbl_MainControlTable] MC\nON MC.CustomerNumber=CTE.CustomerNumber",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_asql_maincontroltable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "fe_Customer",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "lk_tbl_aaa_CustomerOrderData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lk_tbl_aaa_CustomerOrderData').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "gm_check_rejectionfolderexistance",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_adls_rejections",
											"type": "DatasetReference",
											"parameters": {
												"folderpath": {
													"value": "@{item().CustomerName}/@{item().CustomerNumber}/@{pipeline().parameters.Year}/@{pipeline().parameters.Month}/@{pipeline().parameters.Week}/Level-2/",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								},
								{
									"name": "if_check_gm_result",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "gm_check_rejectionfolderexistance",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@activity('gm_check_rejectionfolderexistance').output.exists",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "exe_adf_child_email_eachcustomer",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "pl_adf_child_email_eachcustomer_Level2",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"CustomerName": {
															"value": "@item().CustomerName",
															"type": "Expression"
														},
														"CustomerID": {
															"value": "@item().CustomerNumber",
															"type": "Expression"
														},
														"Year": {
															"value": "@pipeline().parameters.Year",
															"type": "Expression"
														},
														"Month": {
															"value": "@pipeline().parameters.Month",
															"type": "Expression"
														},
														"Week": {
															"value": "@pipeline().parameters.Week",
															"type": "Expression"
														},
														"PipelineStartTime": {
															"value": "@pipeline().parameters.PipelineStartTime",
															"type": "Expression"
														},
														"RejectionEmailIdTo": {
															"value": "@item().RejectionEmailIdTO",
															"type": "Expression"
														},
														"RejectionEmailIdCC": {
															"value": "@item().RejectionEmailIdCC",
															"type": "Expression"
														},
														"SourceFilePath": {
															"value": "@item().FolderHierarchy",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"PipelineStartTime": {
						"type": "String"
					},
					"Year": {
						"type": "string"
					},
					"Month": {
						"type": "string"
					},
					"Week": {
						"type": "string"
					}
				},
				"variables": {
					"week": {
						"type": "String"
					},
					"time": {
						"type": "String"
					},
					"date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Graphicfile/Final Pipeline/Child Pipelines/Child Pipelines Post-UI/Email alerts"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-07T14:47:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_asql_maincontroltable')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls_rejections')]",
				"[concat(variables('factoryId'), '/pipelines/pl_adf_child_email_eachcustomer_Level2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_adf_master_postUI_approvals')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "exe_adf_master_pipeline_postUI",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_adf_child_postUI_approvals",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "wb_pipelinesuccess_email",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "exe_adf_master_pipeline_postUI",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://logic-aaa-dev-euw-3.azurewebsites.net:443/api/wf_pipelinesuccess_postUI/triggers/When_a_HTTP_request_is_received/invoke?api-version=2022-05-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=Fp-ZyEg7Z_9klbQoIBhHo_V61390eee3l3j3qfrughQ",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Pipelinename\":\"@{pipeline().Pipeline}\",\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "wb_pipelinefailure_email",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "exe_adf_master_pipeline_postUI",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://logic-aaa-dev-euw-3.azurewebsites.net:443/api/wf_pipelineFailure/triggers/When_a_HTTP_request_is_received/invoke?api-version=2022-05-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=b5CJOeqZcyEjbwEi6sZ2GZv7YK7LpHKOjGHc-EQaNec",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Pipelinename\":\"@{pipeline().Pipeline}\",\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Graphicfile/Final Pipeline/Master Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_adf_child_postUI_approvals')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_adf_master_preUI')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "exe_adf_master_pipeline_preUI",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_adf_pre_UI",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "wb_pipelinesuccess_email",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "exe_adf_master_pipeline_preUI",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://logic-aaa-dev-euw-3.azurewebsites.net:443/api/wf_pipelinecomplete/triggers/When_a_HTTP_request_is_received/invoke?api-version=2022-05-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=1fTPFOE63huyqdMTntICdmHsVhsLEMgIz_MNc3-Rfjo",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Pipelinename\":\"@{pipeline().Pipeline}\",\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "wb_pipelinefailure_email",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "exe_adf_master_pipeline_preUI",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://logic-aaa-dev-euw-3.azurewebsites.net:443/api/wf_pipelineFailure/triggers/When_a_HTTP_request_is_received/invoke?api-version=2022-05-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=b5CJOeqZcyEjbwEi6sZ2GZv7YK7LpHKOjGHc-EQaNec",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Pipelinename\":\"@{pipeline().Pipeline}\",\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"lk": {
						"type": "String"
					},
					"lk1": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Graphicfile/Final Pipeline/Master Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_adf_pre_UI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_adf_master_raw_prestage_pdf')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "sv_pdf_file_path",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pdffilepath",
							"value": {
								"value": "@concat(pipeline().parameters.Customerfolder,'/',pipeline().parameters.Customernumber,'/',pipeline().parameters.Year,'/',pipeline().parameters.Month,'/',pipeline().parameters.week,'/','pdf/',pipeline().parameters.FileName)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "wb_SASURLgeneration",
						"description": "This web activity connects to the logic apps, where it generates the sas url for the mentioned file",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "sv_pdf_file_path",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://logic-aaa-dev-euw-3.azurewebsites.net:443/api/wf_dynamicSASURL/triggers/When_a_HTTP_request_is_received/invoke?api-version=2022-05-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=ppdkYq3E7E5A8etHrIVXzcAB5GQy5Lu9knySWkOsWpw",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n    \"blobpath\":\"@{variables('pdffilepath')}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "wb_frc_post",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "wb_SASURLgeneration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().parameters.FormRecognizerURL",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {
								"Ocp-Apim-Subscription-Key": {
									"value": "@pipeline().parameters.FormRecognizerKey",
									"type": "Expression"
								},
								"contet-type": "application/pdf"
							},
							"body": {
								"value": "@concat('{\"urlSource\":\"',activity('wb_SASURLgeneration').output.blobUri,'\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "wt_10",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "wb_frc_post",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 10
						}
					},
					{
						"name": "cp_prestage_json_csv",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "cp_prestage_json",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"value": "@json(pipeline().parameters.Pdfmapping)\n\n",
								"type": "Expression"
							}
						},
						"inputs": [
							{
								"referenceName": "ds_adls_prestage_json",
								"type": "DatasetReference",
								"parameters": {
									"Customerfolder": {
										"value": "@concat(pipeline().parameters.Customerfolder,'/',pipeline().parameters.Customernumber,'/',pipeline().parameters.Year,'/',pipeline().parameters.Month,'/',pipeline().parameters.week,'/','src_pdf','/','json')",
										"type": "Expression"
									},
									"filename": {
										"value": "@concat(substring(pipeline().parameters.FileName,0,sub(length(pipeline().parameters.FileName),4)),'.json')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls_prestage_json_csv",
								"type": "DatasetReference",
								"parameters": {
									"Customerfolder": {
										"value": "@concat(pipeline().parameters.Customerfolder,'/',pipeline().parameters.Customernumber,'/',pipeline().parameters.Year,'/',pipeline().parameters.Month,'/',pipeline().parameters.week,'/','src_pdf','/','raw_csv')",
										"type": "Expression"
									},
									"Filename": {
										"value": "@concat(substring(pipeline().parameters.FileName,0,sub(length(pipeline().parameters.FileName),4)),'.csv')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "cp_prestage_json",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "wt_10",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Ocp-Apim-Subscription-Key": {
										"value": "@pipeline().parameters.FormRecognizerKey",
										"type": "Expression"
									}
								},
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_rest_frc1",
								"type": "DatasetReference",
								"parameters": {
									"url": {
										"value": "@activity('wb_frc_post').output.ADFWebActivityResponseHeaders['Operation-Location']",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls_prestage_json",
								"type": "DatasetReference",
								"parameters": {
									"Customerfolder": {
										"value": "@concat(pipeline().parameters.Customerfolder,'/',pipeline().parameters.Customernumber,'/',pipeline().parameters.Year,'/',pipeline().parameters.Month,'/',pipeline().parameters.week,'/','src_pdf','/','json')",
										"type": "Expression"
									},
									"filename": {
										"value": "@concat(substring(pipeline().parameters.FileName,0,sub(length(pipeline().parameters.FileName),4)),'.json')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "sp_auditlogs-raw_prestage_success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "cp_prestage_json_csv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[app].[usp_AuditLogsRawToPrestage]",
							"storedProcedureParameters": {
								"CustomerNumber": {
									"value": {
										"value": "@pipeline().parameters.Customernumber",
										"type": "Expression"
									},
									"type": "String"
								},
								"Errors": {
									"value": null,
									"type": "String"
								},
								"FilenameatPrestage": {
									"value": {
										"value": "@replace(pipeline().parameters.FileName,'pdf','csv')",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineEndTime": {
									"value": {
										"value": "@utcNow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStartTime": {
									"value": {
										"value": "@pipeline().parameters.PipelineStartTime",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Raw_Source_filetype": {
									"value": "pdf",
									"type": "String"
								},
								"Status": {
									"value": "success",
									"type": "String"
								},
								"TriggerID": {
									"value": {
										"value": "@pipeline().parameters.TriggerID",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_sql_a4ltriplea",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_auditlogs-raw_prestage_failure_pdf",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "cp_prestage_json_csv",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[app].[usp_AuditLogsRawToPrestage]",
							"storedProcedureParameters": {
								"CustomerNumber": {
									"value": {
										"value": "@pipeline().parameters.Customernumber",
										"type": "Expression"
									},
									"type": "String"
								},
								"Errors": {
									"value": {
										"value": "@activity('cp_prestage_json_csv').output.errors[0].Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"FilenameatPrestage": {
									"value": {
										"value": "@replace(pipeline().parameters.FileName,'pdf','csv')",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineEndTime": {
									"value": {
										"value": "@utcNow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStartTime": {
									"value": {
										"value": "@pipeline().parameters.PipelineStartTime",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Raw_Source_filetype": {
									"value": "pdf",
									"type": "String"
								},
								"Status": {
									"value": "failure",
									"type": "String"
								},
								"TriggerID": {
									"value": {
										"value": "@pipeline().parameters.TriggerID",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_sql_a4ltriplea",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineStartTime",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "nb_datacleaninig_pdf",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "cp_prestage_json_csv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/Data Cleaning/DC_AAA_v1",
							"baseParameters": {
								"CustomerName": {
									"value": "@pipeline().parameters.Customerfolder",
									"type": "Expression"
								},
								"FileFormat": "pdf",
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"ReportingMonth": {
									"value": "@pipeline().parameters.Month",
									"type": "Expression"
								},
								"ReportingYear": {
									"value": "@pipeline().parameters.Year",
									"type": "Expression"
								},
								"file_name": {
									"value": "@replace(pipeline().parameters.FileName,'pdf','csv')",
									"type": "Expression"
								},
								"week": {
									"value": "@pipeline().parameters.week",
									"type": "Expression"
								},
								"CustomerNumber": {
									"value": "@pipeline().parameters.Customernumber",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks1",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"source_folder": {
						"type": "string"
					},
					"Customerfolder": {
						"type": "string"
					},
					"Pdfmapping": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"FormRecognizerURL": {
						"type": "string"
					},
					"FormRecognizerKey": {
						"type": "string"
					},
					"Year": {
						"type": "string"
					},
					"Month": {
						"type": "string"
					},
					"PipelineStartTime": {
						"type": "string"
					},
					"Customernumber": {
						"type": "string"
					},
					"week": {
						"type": "string"
					},
					"TriggerID": {
						"type": "string"
					}
				},
				"variables": {
					"pdffilepath": {
						"type": "String"
					},
					"PipelineStartTime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Graphicfile/Final Pipeline/Child Pipelines/Child Pipelines Pre-UI/1.Ingestion Pipelines/Ingestion Master/Ingestion Child/Pipeline_raw_prestage_pdf"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-07T14:47:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adls_prestage_json')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls_prestage_json_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_rest_frc1')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_a4ltriplea')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_adf_master_source_raw_prestage_stage')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "fe_MainControlTable",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "lk_tbl_Triggertable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lk_tbl_Triggertable').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "sw_fileformat",
									"description": "check the file type and switch and copy the data from source to raw accordingly",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "sv_filename",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@if(\n endswith(string(item().FileName),'csv'),\n'csv',\nif(\n    endswith(string(item().FileName),'pdf'),\n    'pdf',\nif(\n    endswith(string(item().FileName),'xml'),\n    'xml',\n    'xlsx'\n    )\n  )\n  )",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "csv",
												"activities": [
													{
														"name": "cp_source_raw_csv",
														"description": "Copying the File from Source to Raw with defined Folder structure -Dynamically.",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobFSReadSettings",
																	"recursive": true,
																	"modifiedDatetimeEnd": {
																		"value": "@pipeline().parameters.PipelineStartTime",
																		"type": "Expression"
																	},
																	"wildcardFolderPath": {
																		"value": "@concat(item().CustomerName,'/',item().CustomerNumber,'/OrderFiles')",
																		"type": "Expression"
																	},
																	"wildcardFileName": {
																		"value": "@item().FileName",
																		"type": "Expression"
																	},
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "DelimitedTextSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "DelimitedTextWriteSettings",
																	"quoteAllText": true,
																	"fileExtension": ".csv"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "ds_adls_source_csv",
																"type": "DatasetReference",
																"parameters": {
																	"foldername": {
																		"value": "@item().CustomerName",
																		"type": "Expression"
																	},
																	"IsCSVHeaderAvailable": {
																		"value": "@item().IsCSVHeaderAvailable",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "ds_adls_raw_csv",
																"type": "DatasetReference",
																"parameters": {
																	"source_folder": {
																		"value": "@item().CustomerName",
																		"type": "Expression"
																	},
																	"filetype": "csv",
																	"year": {
																		"value": "@pipeline().parameters.Year",
																		"type": "Expression"
																	},
																	"month": {
																		"value": "@pipeline().parameters.Month",
																		"type": "Expression"
																	},
																	"Customernumber": {
																		"value": "@item().CustomerNumber",
																		"type": "Expression"
																	},
																	"week": {
																		"value": "@pipeline().parameters.week",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "expl_raw_prestage_csv",
														"description": "copy data from raw to pretstage",
														"type": "ExecutePipeline",
														"dependsOn": [
															{
																"activity": "cp_source_raw_csv",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "pl_adf_raw_prestage_stage_csv",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"source_folder": {
																	"value": "@item().CustomerName",
																	"type": "Expression"
																},
																"Filetype": "csv",
																"Filename": {
																	"value": "@item().FileName",
																	"type": "Expression"
																},
																"CSVColumnMapping": {
																	"value": "@item().CSVColumnMapping",
																	"type": "Expression"
																},
																"Year": {
																	"value": "@pipeline().parameters.Year",
																	"type": "Expression"
																},
																"Month": {
																	"value": "@pipeline().parameters.Month",
																	"type": "Expression"
																},
																"week": {
																	"value": "@pipeline().parameters.week",
																	"type": "Expression"
																},
																"Customernumber": {
																	"value": "@item().CustomerNumber",
																	"type": "Expression"
																},
																"TriggerID": {
																	"value": "@item().TID",
																	"type": "Expression"
																}
															}
														}
													},
													{
														"name": "sp_auditlogs-source_raw_success_csv",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "cp_source_raw_csv",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[app].[usp_AuditLogsSourceToRaw]",
															"storedProcedureParameters": {
																"CustomerNumber": {
																	"value": {
																		"value": "@item().CustomerNumber",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"Errors": {
																	"value": null,
																	"type": "String"
																},
																"Filename_at_Raw": {
																	"value": {
																		"value": "@item().FileName",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"FileNameatSource": {
																	"value": {
																		"value": "@item().FileName",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"PipelineEndTime": {
																	"value": {
																		"value": "@utcNow()",
																		"type": "Expression"
																	},
																	"type": "DateTime"
																},
																"PipelineName": {
																	"value": {
																		"value": "@pipeline().Pipeline",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"PipelineRunId": {
																	"value": {
																		"value": "@pipeline().RunId",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"PipelineStartTime": {
																	"value": {
																		"value": "@activity('cp_source_raw_csv').output.executionDetails[0].start",
																		"type": "Expression"
																	},
																	"type": "DateTime"
																},
																"SourceFileType": {
																	"value": "csv",
																	"type": "String"
																},
																"Status": {
																	"value": "success",
																	"type": "String"
																},
																"TriggerID": {
																	"value": {
																		"value": "@item().TID",
																		"type": "Expression"
																	},
																	"type": "String"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "ls_sql_a4ltriplea",
															"type": "LinkedServiceReference"
														}
													},
													{
														"name": "sp_auditlogs-source_raw_failure",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "cp_source_raw_csv",
																"dependencyConditions": [
																	"Failed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[app].[usp_AuditLogsSourceToRaw]",
															"storedProcedureParameters": {
																"CustomerNumber": {
																	"value": {
																		"value": "@item().CustomerNumber",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"Errors": {
																	"value": {
																		"value": "@activity('cp_source_raw_csv').output.error",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"Filename_at_Raw": {
																	"value": {
																		"value": "@item().FileName",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"FileNameatSource": {
																	"value": {
																		"value": "@item().FileName",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"PipelineEndTime": {
																	"value": {
																		"value": "@utcNow()",
																		"type": "Expression"
																	},
																	"type": "DateTime"
																},
																"PipelineName": {
																	"value": {
																		"value": "@pipeline().Pipeline",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"PipelineRunId": {
																	"value": {
																		"value": "@pipeline().RunId",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"PipelineStartTime": {
																	"value": {
																		"value": "@activity('cp_source_raw_csv').output.executionDetails[0].start",
																		"type": "Expression"
																	},
																	"type": "DateTime"
																},
																"SourceFileType": {
																	"value": "csv",
																	"type": "String"
																},
																"Status": {
																	"value": "failure",
																	"type": "String"
																},
																"TriggerID": {
																	"value": {
																		"value": "@item().TID",
																		"type": "Expression"
																	},
																	"type": "String"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "ls_sql_a4ltriplea",
															"type": "LinkedServiceReference"
														}
													},
													{
														"name": "sp_update_Triggertable_csv",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "expl_raw_prestage_csv",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[app].[usp_Triggertable_Update]",
															"storedProcedureParameters": {
																"FileName": {
																	"value": {
																		"value": "@item().FileName",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"Pipeline_starttime": {
																	"value": {
																		"value": "@pipeline().parameters.Pipelinestarttime",
																		"type": "Expression"
																	},
																	"type": "String"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "ls_sql_a4ltriplea",
															"type": "LinkedServiceReference"
														}
													}
												]
											},
											{
												"value": "pdf",
												"activities": [
													{
														"name": "cp_source_raw_pdf",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobFSReadSettings",
																	"recursive": true,
																	"wildcardFolderPath": {
																		"value": "@concat(item().CustomerName,'/',item().CustomerNumber,'/OrderFiles')",
																		"type": "Expression"
																	},
																	"wildcardFileName": {
																		"value": "@item().FileName",
																		"type": "Expression"
																	},
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "DelimitedTextSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "DelimitedTextWriteSettings",
																	"quoteAllText": true,
																	"fileExtension": ".txt"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "ds_adls_source_csv",
																"type": "DatasetReference",
																"parameters": {
																	"foldername": {
																		"value": "@item().CustomerName",
																		"type": "Expression"
																	},
																	"IsCSVHeaderAvailable": "true"
																}
															}
														],
														"outputs": [
															{
																"referenceName": "ds_adls_raw_csv",
																"type": "DatasetReference",
																"parameters": {
																	"source_folder": {
																		"value": "@item().CustomerName",
																		"type": "Expression"
																	},
																	"filetype": "pdf",
																	"year": {
																		"value": "@pipeline().parameters.Year",
																		"type": "Expression"
																	},
																	"month": {
																		"value": "@pipeline().parameters.Month",
																		"type": "Expression"
																	},
																	"Customernumber": {
																		"value": "@item().CustomerNumber",
																		"type": "Expression"
																	},
																	"week": {
																		"value": "@pipeline().parameters.week",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "expl_master_raw_prestage_pdf",
														"type": "ExecutePipeline",
														"dependsOn": [
															{
																"activity": "cp_source_raw_pdf",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "pl_adf_master_raw_prestage_pdf",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"source_folder": {
																	"value": "@item().CustomerName",
																	"type": "Expression"
																},
																"Customerfolder": {
																	"value": "@item().CustomerName",
																	"type": "Expression"
																},
																"Pdfmapping": {
																	"value": "@item().PDFMapping",
																	"type": "Expression"
																},
																"FileName": {
																	"value": "@item().FileName",
																	"type": "Expression"
																},
																"FormRecognizerURL": {
																	"value": "@concat('https://frc-aaa-dev-euw-1.cognitiveservices.azure.com/formrecognizer/documentModels/',item().FormRecogniserModelID,':analyze?api-version=2022-08-31')",
																	"type": "Expression"
																},
																"FormRecognizerKey": {
																	"value": "13dd1d54d2b045449b043cdc92ac6bb9",
																	"type": "Expression"
																},
																"Year": {
																	"value": "@pipeline().parameters.Year",
																	"type": "Expression"
																},
																"Month": {
																	"value": "@pipeline().parameters.Month",
																	"type": "Expression"
																},
																"PipelineStartTime": {
																	"value": "@pipeline().parameters.PipelineStartTime",
																	"type": "Expression"
																},
																"Customernumber": {
																	"value": "@item().CustomerNumber",
																	"type": "Expression"
																},
																"week": {
																	"value": "@pipeline().parameters.week",
																	"type": "Expression"
																},
																"TriggerID": {
																	"value": "@item().TID",
																	"type": "Expression"
																}
															}
														}
													},
													{
														"name": "sp_auditlogs-source_raw_success_pdf",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "cp_source_raw_pdf",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[app].[usp_AuditLogsSourceToRaw]",
															"storedProcedureParameters": {
																"CustomerNumber": {
																	"value": {
																		"value": "@item().CustomerNumber",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"Errors": {
																	"value": null,
																	"type": "String"
																},
																"Filename_at_Raw": {
																	"value": {
																		"value": "@item().FileName",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"FileNameatSource": {
																	"value": {
																		"value": "@item().FileName",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"PipelineEndTime": {
																	"value": {
																		"value": "@utcNow()",
																		"type": "Expression"
																	},
																	"type": "DateTime"
																},
																"PipelineName": {
																	"value": {
																		"value": "@pipeline().Pipeline",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"PipelineRunId": {
																	"value": {
																		"value": "@pipeline().RunId",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"PipelineStartTime": {
																	"value": {
																		"value": "@activity('cp_source_raw_pdf').output.executionDetails[0].start",
																		"type": "Expression"
																	},
																	"type": "DateTime"
																},
																"SourceFileType": {
																	"value": "pdf",
																	"type": "String"
																},
																"Status": {
																	"value": "success",
																	"type": "String"
																},
																"TriggerID": {
																	"value": {
																		"value": "@item().TID",
																		"type": "Expression"
																	},
																	"type": "String"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "ls_sql_a4ltriplea",
															"type": "LinkedServiceReference"
														}
													},
													{
														"name": "sp_auditlogs-source_raw_failure_pdf",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "cp_source_raw_pdf",
																"dependencyConditions": [
																	"Failed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[app].[usp_AuditLogsSourceToRaw]",
															"storedProcedureParameters": {
																"CustomerNumber": {
																	"value": {
																		"value": "@item().CustomerNumber",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"Errors": {
																	"value": {
																		"value": "@activity('cp_source_raw_pdf').output.error",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"Filename_at_Raw": {
																	"value": {
																		"value": "@item().FileName",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"FileNameatSource": {
																	"value": {
																		"value": "@item().FileName",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"PipelineEndTime": {
																	"value": {
																		"value": "@utcNow()",
																		"type": "Expression"
																	},
																	"type": "DateTime"
																},
																"PipelineName": {
																	"value": {
																		"value": "@pipeline().Pipeline",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"PipelineRunId": {
																	"value": {
																		"value": "@pipeline().RunId",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"PipelineStartTime": {
																	"value": {
																		"value": "@activity('cp_source_raw_pdf').output.executionDetails[0].start",
																		"type": "Expression"
																	},
																	"type": "DateTime"
																},
																"SourceFileType": {
																	"value": "pdf",
																	"type": "String"
																},
																"Status": {
																	"value": "failure",
																	"type": "String"
																},
																"TriggerID": {
																	"value": {
																		"value": "@item().TID",
																		"type": "Expression"
																	},
																	"type": "String"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "ls_sql_a4ltriplea",
															"type": "LinkedServiceReference"
														}
													},
													{
														"name": "sp_update_Triggertable_pdf",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "expl_master_raw_prestage_pdf",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[app].[usp_Triggertable_Update]",
															"storedProcedureParameters": {
																"FileName": {
																	"value": {
																		"value": "@item().FileName",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"Pipeline_starttime": {
																	"value": {
																		"value": "@pipeline().parameters.Pipelinestarttime",
																		"type": "Expression"
																	},
																	"type": "String"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "ls_sql_a4ltriplea",
															"type": "LinkedServiceReference"
														}
													}
												]
											},
											{
												"value": "xml",
												"activities": [
													{
														"name": "Wait1",
														"type": "Wait",
														"dependsOn": [],
														"userProperties": [],
														"typeProperties": {
															"waitTimeInSeconds": 1
														}
													}
												]
											},
											{
												"value": "xlsx",
												"activities": [
													{
														"name": "cp_source_raw_xlsx",
														"description": "Copying the File from Source to Raw with defined Folder structure -Dynamically.",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "BinarySource",
																"storeSettings": {
																	"type": "AzureBlobFSReadSettings",
																	"recursive": true,
																	"modifiedDatetimeEnd": {
																		"value": "@pipeline().parameters.PipelineStartTime",
																		"type": "Expression"
																	},
																	"wildcardFolderPath": {
																		"value": "@concat(item().CustomerName,'/',item().CustomerNumber,'/OrderFiles')",
																		"type": "Expression"
																	},
																	"wildcardFileName": {
																		"value": "@item().FileName",
																		"type": "Expression"
																	},
																	"deleteFilesAfterCompletion": false
																},
																"formatSettings": {
																	"type": "BinaryReadSettings"
																}
															},
															"sink": {
																"type": "BinarySink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "ds_adls_source_xlsx",
																"type": "DatasetReference",
																"parameters": {
																	"foldername": {
																		"value": "@item().CustomerName",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "ds_adls_raw_xlsx",
																"type": "DatasetReference",
																"parameters": {
																	"source_folder": {
																		"value": "@item().CustomerName",
																		"type": "Expression"
																	},
																	"filetype": "xlsx",
																	"year": {
																		"value": "@pipeline().parameters.Year",
																		"type": "Expression"
																	},
																	"month": {
																		"value": "@pipeline().parameters.Month",
																		"type": "Expression"
																	},
																	"Customernumber": {
																		"value": "@item().CustomerNumber",
																		"type": "Expression"
																	},
																	"week": {
																		"value": "@pipeline().parameters.week",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "expl_raw_prestage_xlsx",
														"type": "ExecutePipeline",
														"dependsOn": [
															{
																"activity": "cp_source_raw_xlsx",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "pl_adf_raw_prestage_stage_xlsx",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"source_folder": {
																	"value": "@item().CustomerName\n",
																	"type": "Expression"
																},
																"Filetype": "xlsx",
																"Filename": {
																	"value": "@item().FileName",
																	"type": "Expression"
																},
																"XLSXColumnMapping": {
																	"value": "@item().XLSXColumnMapping",
																	"type": "Expression"
																},
																"Year": {
																	"value": "@pipeline().parameters.Year",
																	"type": "Expression"
																},
																"Month": {
																	"value": "@pipeline().parameters.Month",
																	"type": "Expression"
																},
																"Customernumber": {
																	"value": "@item().CustomerNumber",
																	"type": "Expression"
																},
																"week": {
																	"value": "@pipeline().parameters.week",
																	"type": "Expression"
																},
																"Pipelinestarttime": {
																	"value": "@pipeline().parameters.Pipelinestarttime",
																	"type": "Expression"
																},
																"TriggerID": {
																	"value": "@item().TID",
																	"type": "Expression"
																}
															}
														}
													},
													{
														"name": "sp_auditlogs-source_raw_success_xlsx",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "cp_source_raw_xlsx",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[app].[usp_AuditLogsSourceToRaw]",
															"storedProcedureParameters": {
																"CustomerNumber": {
																	"value": {
																		"value": "@item().CustomerNumber",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"Errors": {
																	"value": null,
																	"type": "String"
																},
																"Filename_at_Raw": {
																	"value": {
																		"value": "@item().FileName",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"FileNameatSource": {
																	"value": {
																		"value": "@item().FileName",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"PipelineEndTime": {
																	"value": {
																		"value": "@utcNow()",
																		"type": "Expression"
																	},
																	"type": "DateTime"
																},
																"PipelineName": {
																	"value": {
																		"value": "@pipeline().Pipeline",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"PipelineRunId": {
																	"value": {
																		"value": "@pipeline().RunId",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"PipelineStartTime": {
																	"value": {
																		"value": "@activity('cp_source_raw_xlsx').output.executionDetails[0].start",
																		"type": "Expression"
																	},
																	"type": "DateTime"
																},
																"SourceFileType": {
																	"value": "xlsx",
																	"type": "String"
																},
																"Status": {
																	"value": "success",
																	"type": "String"
																},
																"TriggerID": {
																	"value": {
																		"value": "@item().TID",
																		"type": "Expression"
																	},
																	"type": "String"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "ls_sql_a4ltriplea",
															"type": "LinkedServiceReference"
														}
													},
													{
														"name": "sp_auditlogs-source_raw_failure_xlsx",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "cp_source_raw_xlsx",
																"dependencyConditions": [
																	"Failed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[app].[usp_AuditLogsSourceToRaw]",
															"storedProcedureParameters": {
																"CustomerNumber": {
																	"value": {
																		"value": "@item().CustomerNumber",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"Errors": {
																	"value": {
																		"value": "@activity('cp_source_raw_xlsx').output.value.error",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"Filename_at_Raw": {
																	"value": {
																		"value": "@item().FileName",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"FileNameatSource": {
																	"value": {
																		"value": "@item().FileName",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"PipelineEndTime": {
																	"value": {
																		"value": "@utcNow()",
																		"type": "Expression"
																	},
																	"type": "DateTime"
																},
																"PipelineName": {
																	"value": {
																		"value": "@pipeline().Pipeline",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"PipelineRunId": {
																	"value": {
																		"value": "@pipeline().RunId",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"PipelineStartTime": {
																	"value": {
																		"value": "@activity('cp_source_raw_xlsx').output.executionDetails[0].start",
																		"type": "Expression"
																	},
																	"type": "DateTime"
																},
																"SourceFileType": {
																	"value": "xlsx",
																	"type": "String"
																},
																"Status": {
																	"value": "failure",
																	"type": "String"
																},
																"TriggerID": {
																	"value": {
																		"value": "@item().TID",
																		"type": "Expression"
																	},
																	"type": "String"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "ls_sql_a4ltriplea",
															"type": "LinkedServiceReference"
														}
													},
													{
														"name": "sp_update_Triggertable_xlsx",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "expl_raw_prestage_xlsx",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[app].[usp_Triggertable_Update]",
															"storedProcedureParameters": {
																"FileName": {
																	"value": {
																		"value": "@item().FileName",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"Pipeline_starttime": {
																	"value": {
																		"value": "@pipeline().parameters.Pipelinestarttime",
																		"type": "Expression"
																	},
																	"type": "String"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "ls_sql_a4ltriplea",
															"type": "LinkedServiceReference"
														}
													}
												]
											}
										]
									}
								},
								{
									"name": "sv_filename",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Filename",
										"value": {
											"value": "@item().FileName\n",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "lk_tbl_Triggertable",
						"description": "Look up into control table -\n[app].[tbl_MainControlTable] for source folder name which is the customername",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select T.Id as TID,T.CustomerName as FolderName,max(Triggertime) as Triggertime,FileName,FileType,IsProcessed,T.CustomerNumber as TCustomerNumber,M.Id as MID,M.CustomerName as CustomerName,M.CustomerNumber as CustomerNumber,CSVColumnMapping,XLSXColumnMapping,PDFMapping,FormRecogniserModelID,ModifiedBy,ModifiedDate,PDFSourceColumns,PDFTargetColumns,CSVTargetColumns,CSVSourceColumns,XLSXSourceColumns,XLSXTargetColumns,FormRecogniserTableName,IsCSVHeaderAvailable,IsXLSXHeaderAvailable from [app].[tbl_TriggerTable] AS T left join [app].[tbl_MainControlTable] AS M on T.CustomerNumber=M.CustomerNumber where t.Triggertime< '@{pipeline().parameters.Pipelinestarttime}' and IsProcessed=0 and FileType='OrderFile' and PipelineEndTime is null GROUP BY T.ID,T.CustomerName,FileName,FileType,IsProcessed,T.CustomerNumber,M.ID,M.CustomerName,M.CustomerNumber,CSVColumnMapping,XLSXColumnMapping,PDFMapping,FormRecogniserModelID,ModifiedBy,ModifiedDate,PDFSourceColumns,PDFTargetColumns,CSVTargetColumns,CSVSourceColumns,XLSXSourceColumns,XLSXTargetColumns,FormRecogniserTableName,IsCSVHeaderAvailable,IsXLSXHeaderAvailable;\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_asql_maincontroltable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "nb_startcluster",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/Common_Functions/Common_Functions_DQ&DC"
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks1",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Pipelinestarttime": {
						"type": "string"
					},
					"Year": {
						"type": "string"
					},
					"Month": {
						"type": "string"
					},
					"week": {
						"type": "string"
					}
				},
				"variables": {
					"PipelineStartTime": {
						"type": "String"
					},
					"Filename": {
						"type": "String"
					},
					"utcnow": {
						"type": "String"
					},
					"pipeline_starttime": {
						"type": "String"
					},
					"week": {
						"type": "String"
					},
					"time": {
						"type": "String"
					},
					"date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Graphicfile/Final Pipeline/Child Pipelines/Child Pipelines Pre-UI/1.Ingestion Pipelines/Ingestion Master"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-07T14:47:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_asql_maincontroltable')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks1')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls_source_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls_raw_csv')]",
				"[concat(variables('factoryId'), '/pipelines/pl_adf_raw_prestage_stage_csv')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_a4ltriplea')]",
				"[concat(variables('factoryId'), '/pipelines/pl_adf_master_raw_prestage_pdf')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls_source_xlsx')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls_raw_xlsx')]",
				"[concat(variables('factoryId'), '/pipelines/pl_adf_raw_prestage_stage_xlsx')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_adf_order_creation_input')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lk_tbl_aaa_customerorderdata",
						"description": "incremenetally giving paremeters for etiketten number updation in Rako Label",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select Etikettennummer,MaterialNumber,PurchaseOrder,Item,CustomerNumber,StammNummer,PageCount,primary_filepath,secondary_filepath\nfrom app.tbl_aaa_CustomerOrderData\nwhere IsApproved = 1 and Isprocessed <> 1 and ApprovalTimestamp BETWEEN (\n\t\t\tSELECT last_modified_date\n\t\t\tFROM app.tbl_watermarktable\n\t\t\tWHERE table_name = 'app.tbl_Order_Creation_Inputs'\n\t\t\t) and '@{pipeline().parameters.pipeline_starttime}';\nselect @@rowcount ",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "csvtoazuresqltable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "fe_tbl_customerorderdata",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "lk_tbl_aaa_customerorderdata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lk_tbl_aaa_customerorderdata').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "lk_usp_spSorteCopy",
									"description": "passing the new etiketten number to the sortencopy proc",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "lk_tbl_sorten_etikettennummer",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "DECLARE @var int= (select case when @{activity('lk_tbl_sorten_etikettennummer').output.firstRow.New_Etikettennummer}=0 then 1 else 0 end ),@output bigint\n\nexec [dbo].[spTripleA_SorteCopy_bkp] @EtikettennummerSource = @{item().Etikettennummer}, \n@EtikettennummerDestination = @{activity('lk_tbl_sorten_etikettennummer').output.firstRow.New_Etikettennummer},\n @ASKWInclude = 0,@NeuerReferenzArtikel = \n@var,@GrafikDatenpfad='@{item().primary_filepath}',@GrafikDatenpfadBASE='@{item().secondary_filepath}',@ArtikelnummerKunde='@{item().MaterialNumber}',@Printlabel = @output output;\nselect @output as NewLabel;\n\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_rakolabel",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "lk_tbl_sorten_etikettennummer",
									"description": "finding the next etiketten number value",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select max(Etikettennummer) as Max_Etikettennummer,\n\tcase \n\t\twhen RIGHT(cast(max(Etikettennummer) as int),2)= 99 \n\t\t\tTHEN  \n\t\t\t0\n\t\telse cast(max(Etikettennummer) as int)+1 \n\t\tend as New_Etikettennummer\nfrom dbo.sorten_aaa_bkp where stammnummer = @{item().StammNummer} and KundenNummer = left(@{item().StammNummer},4)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_rakolabel",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "lk_tbl_sorten",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(activity('lk_tbl_sorten').output,'firstRow')",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "lk_tbl_aaa_customerorderdata_etikettennummer",
												"description": "updatingt he new etiketten and stamm in the customerorderdata table",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "update app.tbl_aaa_CustomerOrderData\nset New_Etikettennummer = '@{activity('lk_tbl_sorten').output.firstRow.New_Etikettennummer}',New_Stammnummer = '@{substring(string(activity('lk_tbl_sorten').output.firstRow.New_Etikettennummer),0,7)}'\nwhere Etikettennummer = '@{item().Etikettennummer}' and \nMaterialNumber = '@{item().MaterialNumber}' and \nPurchaseOrder = '@{item().PurchaseOrder}' and\nItem = '@{item().Item}' \nand CustomerNumber = '@{item().CustomerNumber}'\nand PageCount = '@{item().PageCount}'\nand primary_filepath = '@{item().primary_filepath}'\nand secondary_filepath = '@{item().secondary_filepath}'\nand Stammnummer = '@{item().StammNummer}'\nselect @@ROWCOUNT",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "csvtoazuresqltable",
														"type": "DatasetReference",
														"parameters": {}
													},
													"firstRowOnly": false
												}
											}
										]
									}
								},
								{
									"name": "lk_tbl_sorten",
									"description": "checking if the newly generated etiketten number is in the sorten table",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "lk_usp_spSorteCopy",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select Etikettennummer as New_Etikettennummer from dbo.sorten_aaa_bkp where Etikettennummer = \n@{activity('lk_usp_spSorteCopy').output.firstRow.NewLabel}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_rakolabel",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					},
					{
						"name": "cp_Customer_Order_Input_table",
						"description": "copy data to order creation input table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "fe_tbl_customerorderdata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select distinct 3020 as Personalnummer,CustomerNumber as Kundennummer,cast(New_Stammnummer as int) as Stammnummer,\ncast(New_Etikettennummer as int) as Etikettennummer,PurchaseOrder as Bestellnummer ,\ncast(Qty as int) as Auflage,\nDeliveryDate as Liefertermin,\nUnitPriceCur as Bestellpreis,\nItem as BestellnummerPosition\nfrom app.tbl_aaa_CustomerOrderData where IsApproved = 1 and ApprovalTimestamp>\n(select coalesce(last_modified_date,'1900-01-01 00:00:00') from app.tbl_watermarktable \nwhere table_name = 'app.tbl_Order_Creation_Inputs') and New_Etikettennummer is not null",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_AAA_Orders_existance",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_rakolabel_ordercreationinput",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "cp_aaa_customerorderdate_update",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "cp_Customer_Order_Input_table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select etikettennummer from dbo.tbl_order_creation_input",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"sqlWriterStoredProcedureName": "[[app].[usp_order_input_check]",
								"sqlWriterTableType": "dbo.etikettennummer",
								"storedProcedureTableTypeParameterName": "etikettennummer",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_rakolabel_ordercreationinput",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "csvtoazuresqltable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"pipeline_starttime": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Graphicfile/Final Pipeline/Child Pipelines/Child Pipelines Post-UI"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-07T14:47:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/csvtoazuresqltable')]",
				"[concat(variables('factoryId'), '/datasets/ds_AAA_Orders_existance')]",
				"[concat(variables('factoryId'), '/datasets/ds_rakolabel_ordercreationinput')]",
				"[concat(variables('factoryId'), '/datasets/ds_rakolabel')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_adf_pre_UI')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "sv_pl_starttime",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipeline_starttime",
							"value": {
								"value": "@pipeline().TriggerTime",
								"type": "Expression"
							}
						}
					},
					{
						"name": "lk_tbl_Triggertable",
						"description": "Look up into control table -\n[app].[tbl_MainControlTable] for source folder name which is the customername",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "sv_pl_starttime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "IF EXISTS\n(\nselect T.Id as TID,T.CustomerName as FolderName,max(Triggertime) as Triggertime,FileName,FileType,IsProcessed,T.CustomerNumber as TCustomerNumber,M.Id as MID,M.CustomerName as CustomerName,M.CustomerNumber as CustomerNumber,CSVColumnMapping,XLSXColumnMapping,PDFMapping,FormRecogniserModelID,ModifiedBy,ModifiedDate,PDFSourceColumns,PDFTargetColumns,CSVTargetColumns,CSVSourceColumns,XLSXSourceColumns,XLSXTargetColumns,FormRecogniserTableName,IsCSVHeaderAvailable,IsXLSXHeaderAvailable from [app].[tbl_TriggerTable] AS T left join [app].[tbl_MainControlTable] AS M on T.CustomerNumber=M.CustomerNumber where t.Triggertime< '@{variables('pipeline_starttime')}' and IsProcessed=0 and FileType='OrderFile' and PipelineEndTime is null GROUP BY T.ID,T.CustomerName,FileName,FileType,IsProcessed,T.CustomerNumber,M.ID,M.CustomerName,M.CustomerNumber,CSVColumnMapping,XLSXColumnMapping,PDFMapping,FormRecogniserModelID,ModifiedBy,ModifiedDate,PDFSourceColumns,PDFTargetColumns,CSVTargetColumns,CSVSourceColumns,XLSXSourceColumns,XLSXTargetColumns,FormRecogniserTableName,IsCSVHeaderAvailable,IsXLSXHeaderAvailable\n)\nSELECT 'True';\nELSE\nSELECT 'False'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_asql_maincontroltable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "If Condition",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "lk_tbl_Triggertable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(string(activity('lk_tbl_Triggertable').output.firstRow),'True')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Wait2",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "exe_adf_preUI_child",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_adf_child_preUI",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"pl_starttime": {
												"value": "@variables('pipeline_starttime')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"pipeline_starttime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Graphicfile/Final Pipeline/Child Pipelines/Child Pipelines Pre-UI"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_asql_maincontroltable')]",
				"[concat(variables('factoryId'), '/pipelines/pl_adf_child_preUI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_adf_raw_prestage_stage_csv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "cp_raw_prestage_csv",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": "2023-05-28T00:00:00Z",
									"wildcardFolderPath": {
										"value": "@concat(pipeline().parameters.source_folder,'/',pipeline().parameters.Customernumber,'/',pipeline().parameters.Year,'/',pipeline().parameters.Month,'/',pipeline().parameters.week,'/',pipeline().parameters.Filetype,'/')",
										"type": "Expression"
									},
									"wildcardFileName": {
										"value": "@pipeline().parameters.Filename",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"value": "@json(pipeline().parameters.CSVColumnMapping)",
								"type": "Expression"
							}
						},
						"inputs": [
							{
								"referenceName": "ds_adls_raw_csv",
								"type": "DatasetReference",
								"parameters": {
									"source_folder": {
										"value": "@pipeline().parameters.source_folder",
										"type": "Expression"
									},
									"filetype": {
										"value": "@pipeline().parameters.Filetype",
										"type": "Expression"
									},
									"year": {
										"value": "@pipeline().parameters.Year",
										"type": "Expression"
									},
									"month": {
										"value": "@pipeline().parameters.Month",
										"type": "Expression"
									},
									"Customernumber": {
										"value": "@pipeline().parameters.Customernumber",
										"type": "Expression"
									},
									"week": {
										"value": "@pipeline().parameters.week",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls_prestage_csv",
								"type": "DatasetReference",
								"parameters": {
									"Customerfolder": {
										"value": "@concat(pipeline().parameters.source_folder,'/',pipeline().parameters.Customernumber,'/',pipeline().parameters.Year,'/',pipeline().parameters.Month,'/',pipeline().parameters.week,'/','parsed_csv')",
										"type": "Expression"
									},
									"Filename": {
										"value": "@concat(substring(pipeline().parameters.Filename,0,sub(length(pipeline().parameters.Filename),4)),'srccsv.csv')\n",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "sp_auditlogs-raw_prestage_success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "cp_raw_prestage_csv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[app].[usp_AuditLogsRawToPrestage]",
							"storedProcedureParameters": {
								"CustomerNumber": {
									"value": {
										"value": "@pipeline().parameters.Customernumber",
										"type": "Expression"
									},
									"type": "String"
								},
								"Errors": {
									"value": null,
									"type": "String"
								},
								"FilenameatPrestage": {
									"value": {
										"value": "@pipeline().parameters.Filename",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineEndTime": {
									"value": {
										"value": "@utcNow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStartTime": {
									"value": {
										"value": "@activity('cp_raw_prestage_csv').output.executionDetails[0].start",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Raw_Source_filetype": {
									"value": {
										"value": "@pipeline().parameters.Filetype",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "success",
									"type": "String"
								},
								"TriggerID": {
									"value": {
										"value": "@pipeline().parameters.TriggerID",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_sql_a4ltriplea",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_auditlogs-raw_prestage_failure_csv",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "cp_raw_prestage_csv",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[app].[usp_AuditLogsRawToPrestage]",
							"storedProcedureParameters": {
								"CustomerNumber": {
									"value": {
										"value": "@pipeline().parameters.Customernumber",
										"type": "Expression"
									},
									"type": "String"
								},
								"Errors": {
									"value": {
										"value": "@activity('cp_raw_prestage_csv').output.errors[0].Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"FilenameatPrestage": {
									"value": {
										"value": "@pipeline().parameters.Filename",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineEndTime": {
									"value": {
										"value": "@utcNow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStartTime": {
									"value": {
										"value": "@activity('cp_raw_prestage_csv').output.executionDetails[0].start",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Raw_Source_filetype": {
									"value": {
										"value": "@pipeline().parameters.Filetype",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "failure",
									"type": "String"
								},
								"TriggerID": {
									"value": {
										"value": "@pipeline().parameters.TriggerID",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_sql_a4ltriplea",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"source_folder": {
						"type": "String"
					},
					"Filetype": {
						"type": "String"
					},
					"Filename": {
						"type": "string"
					},
					"CSVColumnMapping": {
						"type": "string"
					},
					"Year": {
						"type": "string"
					},
					"Month": {
						"type": "string"
					},
					"week": {
						"type": "string"
					},
					"Customernumber": {
						"type": "string"
					},
					"TriggerID": {
						"type": "string"
					}
				},
				"variables": {
					"PipelineStartTime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Graphicfile/Final Pipeline/Child Pipelines/Child Pipelines Pre-UI/1.Ingestion Pipelines/Ingestion Master/Ingestion Child"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-07T14:47:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adls_raw_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls_prestage_csv')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_a4ltriplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_adf_raw_prestage_stage_xlsx')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "cp_raw_prestage_xlsx",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "@concat(pipeline().parameters.source_folder,'/',pipeline().parameters.Customernumber,'/',pipeline().parameters.Year,'/',pipeline().parameters.Month,'/',pipeline().parameters.week,'/',pipeline().parameters.Filetype,'/')",
										"type": "Expression"
									},
									"wildcardFileName": {
										"value": "@pipeline().parameters.Filename",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"value": "@pipeline().parameters.XLSXColumnMapping",
								"type": "Expression"
							}
						},
						"inputs": [
							{
								"referenceName": "ds_adls_raw_prestage_xlsx",
								"type": "DatasetReference",
								"parameters": {
									"source_folder": {
										"value": "@pipeline().parameters.source_folder",
										"type": "Expression"
									},
									"filetype": "xlsx",
									"year": {
										"value": "@pipeline().parameters.Year",
										"type": "Expression"
									},
									"month": {
										"value": "@pipeline().parameters.Month",
										"type": "Expression"
									},
									"Customernumber": {
										"value": "@pipeline().parameters.Customernumber",
										"type": "Expression"
									},
									"week": {
										"value": "@pipeline().parameters.week",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls_prestage_csv",
								"type": "DatasetReference",
								"parameters": {
									"Customerfolder": {
										"value": "@concat(pipeline().parameters.source_folder,'/',pipeline().parameters.Customernumber,'/',pipeline().parameters.Year,'/',pipeline().parameters.Month,'/',pipeline().parameters.week,'/','parsed_csv')",
										"type": "Expression"
									},
									"Filename": {
										"value": "@replace(pipeline().parameters.Filename,'.xlsx','srcxlsx.csv')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "sp_auditlogs-raw_prestage_success_xlsx",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "cp_raw_prestage_xlsx",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[app].[usp_AuditLogsRawToPrestage]",
							"storedProcedureParameters": {
								"CustomerNumber": {
									"value": {
										"value": "@pipeline().parameters.Customernumber",
										"type": "Expression"
									},
									"type": "String"
								},
								"Errors": {
									"value": null,
									"type": "String"
								},
								"FilenameatPrestage": {
									"value": {
										"value": "@replace(pipeline().parameters.Filename,'xlsx','csv')",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineEndTime": {
									"value": {
										"value": "@utcNow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStartTime": {
									"value": {
										"value": "@pipeline().parameters.Pipelinestarttime",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Raw_Source_filetype": {
									"value": {
										"value": "@pipeline().parameters.Filetype",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "success",
									"type": "String"
								},
								"TriggerID": {
									"value": {
										"value": "@pipeline().parameters.TriggerID",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_sql_a4ltriplea",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_auditlogs-raw_prestage_failure_xlsx",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "cp_raw_prestage_xlsx",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[app].[usp_AuditLogsRawToPrestage]",
							"storedProcedureParameters": {
								"CustomerNumber": {
									"value": {
										"value": "@pipeline().parameters.Customernumber",
										"type": "Expression"
									},
									"type": "String"
								},
								"Errors": {
									"value": {
										"value": "@activity('cp_raw_prestage_xlsx').output.errors[0].Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"FilenameatPrestage": {
									"value": {
										"value": "@replace(pipeline().parameters.Filename,'xlsx','csv')",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineEndTime": {
									"value": {
										"value": "@utcNow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStartTime": {
									"value": {
										"value": "@pipeline().parameters.Pipelinestarttime",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Raw_Source_filetype": {
									"value": {
										"value": "@pipeline().parameters.Filetype",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "failure",
									"type": "String"
								},
								"TriggerID": {
									"value": {
										"value": "@pipeline().parameters.TriggerID",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_sql_a4ltriplea",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"source_folder": {
						"type": "string"
					},
					"Filetype": {
						"type": "string"
					},
					"Filename": {
						"type": "string"
					},
					"XLSXColumnMapping": {
						"type": "object"
					},
					"Year": {
						"type": "string"
					},
					"Month": {
						"type": "string"
					},
					"Customernumber": {
						"type": "string"
					},
					"week": {
						"type": "string"
					},
					"Pipelinestarttime": {
						"type": "string"
					},
					"TriggerID": {
						"type": "string"
					}
				},
				"variables": {
					"PipelineStartTime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Graphicfile/Final Pipeline/Child Pipelines/Child Pipelines Pre-UI/1.Ingestion Pipelines/Ingestion Master/Ingestion Child"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-07T14:47:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adls_raw_prestage_xlsx')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls_prestage_csv')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_a4ltriplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_adf_second_sanity_check')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lk_error_flag_aaa_orders",
						"description": "Updating app.tbl_aaa_customerorderdata_stg table with iserrordq, descriptiondq, ERPdeliveryAdrressStreet, ErrorJson for the records where modified time> last modified date that we got from the first lookup.\nUpdating app.tbl_aaa_customerorderdata table with Iserrordq, Descriptiondq, IsApproved as null, Modified date as getdate(), for the records where Isapproved = -1, and Approval time stamp is greater than last modofied date from the first lookup.",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "cp_aaa_customerorderdata_existancecheck",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "if exists(select 1 from app.tbl_AAA_Orders_existance_temp)\nupdate a\nset a.iserrordq = b.is_error,a.descriptiondq=b.error_description,a.ERPDeliveryAddressStreet= case when b.ERP_DeliveryAddressStreet = '' then null else ERP_DeliveryAddressStreet end \nfrom app.tbl_aaa_customerorderdata_stg a join app.tbl_AAA_Orders_existance_temp b \non a.CustomerNumber = b.Kundennummer and a.MaterialNumber = b.ArtikelNummerKunde and a.DeliveryAdressStreet = b.DeliveryAddressStreet\nand a.PurchaseOrder = b.PurchaseOrder and a.Item = b.Item\nwhere a.modifiedTime>\n'@{activity('lk_getdate_watermark').output.firstRow.last_modified_date}';\nselect @@ROWCOUNT",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "csvtoazuresqltable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "lk_getdate_watermark",
						"description": "Getting the last modified date and pipeline start time from the watermark table for the table: app.tbl_aaa_CustomerOrderData_stg",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select last_modified_date as last_modified_date,getdate() as pipeline_starttime from app.tbl_watermarktable where table_name = 'app.tbl_aaa_CustomerOrderData_stg'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "csvtoazuresqltable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "lk_update_watermark",
						"description": "Updating the Watermark table  for tbl_aaa_CustomerOrderData_stg with\nmax(Modified time) from tbl_aaa_CustomerOrderData_stg table. ",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "lk_aaa_master_customerorderdata_stg_update",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "update app.tbl_watermarktable\nset last_modified_date = (select coalesce(max(modifiedTime),'1900-01-01 00:00:00') from app.tbl_aaa_CustomerOrderData_stg)\nwhere table_name = 'app.tbl_aaa_CustomerOrderData_stg';\nselect 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "csvtoazuresqltable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "exe_adf_pl_sanitycheck_2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "exe_adf_master_artworkfile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_sanitycheck_2",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Year": {
									"value": "@pipeline().parameters.Year",
									"type": "Expression"
								},
								"Month": {
									"value": "@pipeline().parameters.Month",
									"type": "Expression"
								},
								"PipelineStartTime": {
									"value": "@pipeline().parameters.PipelineStartTime",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "exe_adf_master_artworkfile",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "lk_error_flag_aaa_orders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_adf_master_artworkfile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Pipleline_starttime": {
									"value": "@pipeline().parameters.PipelineStartTime",
									"type": "Expression"
								},
								"Year": {
									"value": "@pipeline().parameters.Year",
									"type": "Expression"
								},
								"Month": {
									"value": "@pipeline().parameters.Month",
									"type": "Expression"
								},
								"week": {
									"value": "@pipeline().parameters.Week",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "lk_aaa_master_customerorderdata_stg_update",
						"description": "Updating the table app.tbl_aaa_master_customerorderdata_stg with the error json needed for front end display.",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "exe_adf_pl_sanitycheck_2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "update app.tbl_aaa_master_customerorderdata_stg\nset errorjson = concat( '[' ,\ncase when descriptiondq like '%Delivery Address%' then concat('{\"ErrorType\":\"Shipping Address\",','\"Comment\":\"Delivery Address Street is mismatching with ERP System\"}',\ncase when descriptiondq like '%Material Number%' or descriptiondq like '%Purchase Order%' or descriptiondq like '%Customer Number%' or descriptiondq like '%Artwork%' or descriptiondq like '%CustomerOrder%' then ',' end) end,\ncase when descriptiondq like '%Material Number%'  then concat('{\"ErrorType\":\"Material Number\",','\"Comment\":\"Material Number is missing in ERP System\"}',\ncase when descriptiondq like '%Purchase Order%' or descriptiondq like '%Customer Number%' or descriptiondq like '%Artwork%' or descriptiondq like '%CustomerOrder%' then ',' end) end,\ncase when descriptiondq like '%Purchase Order%'  then concat('{\"ErrorType\":\"Purchase Order\",','\"Comment\":\"Purchase Order Item already exists in ERP\"}',case when descriptiondq like '%Customer Number%' or descriptiondq like '%Artwork%' or descriptiondq like '%CustomerOrder%' then ',' end) end,\ncase when descriptiondq like '%Customer Number%'  then concat('{\"ErrorType\":\"Customer Number\",','\"Comment\":\"Customer Number is missing in ERP System\"}',case when descriptiondq like '%Artwork%' or descriptiondq like '%CustomerOrder%' then ',' end) end,\ncase when descriptiondq like '%Artwork File%' then concat('{\"ErrorType\":\"Artwork File\",','\"Comment\":\"BOOKLABEL & BASE Artwork File  is missing in ERP System\"}',case when descriptiondq like '%CustomerOrder%' then concat(',{\"ErrorType\":\"Partial Duplicate\"','\"Comment\":\"Order data loaded has duplicates records\"}') end) end,\n']') where iserrordq=1 and modifiedTime >'@{activity('lk_getdate_watermark').output.firstRow.last_modified_date}';\nupdate d\nset d.IsErrorDQ = coalesce(is_error,0),descriptiondq = case when coalesce(is_error,0) = 0 then null else error_description end,IsApproved = case when coalesce(is_error,0)= 0 then null else d.IsApproved end,ModifiedDate = getdate(),\nERPDeliveryAddressStreet = ERP_DeliveryAddressStreet,\nErrorJson = case when coalesce(is_error,0) = 1 then concat( '[' ,\ncase when error_description like '%Delivery Address%' then concat('{\"ErrorType\":\"Shipping Address\",','\"Comment\":\"Delivery Address Street is mismatching with ERP System\"}',\ncase when error_description like '%Material Number%' or descriptiondq like '%Purchase Order%' or descriptiondq like '%Customer Number%' or descriptiondq like '%Artwork%' or descriptiondq like '%CustomerOrder%'  then  ',' end) end,\ncase when error_description like '%Material Number%'  then concat('{\"ErrorType\":\"Material Number\",','\"Comment\":\"Material Number is missing in ERP System\"}',\ncase when error_description like '%Purchase Order%' or descriptiondq like '%Customer Number%' or descriptiondq like '%Artwork%' or descriptiondq like '%CustomerOrder%' then ',' end) end,\ncase when error_description like '%Purchase Order%'  then concat('{\"ErrorType\":\"Purchase Order\",','\"Comment\":\"Purchase Order Item already exists in ERP\"}',case when descriptiondq like '%Customer Number%' or descriptiondq like '%Artwork%' or descriptiondq like '%CustomerOrder%' then ',' end) end,\ncase when error_description like '%Customer Number%'  then concat('{\"ErrorType\":\"Customer Number\",','\"Comment\":\"Customer Number is missing in ERP System\"}',case when descriptiondq like '%Artwork%' or descriptiondq like '%CustomerOrder%' then ',' end) end,\ncase when error_description like '%Artwork File%' then concat('{\"ErrorType\":\"Artwork File\",','\"Comment\":\"Artwork File  is missing in ERP System\"}',case when descriptiondq like '%CustomerOrder%' then concat(',{\"ErrorType\":\"Partial Duplicate\"','\"Comment\":\"Order data loaded has duplicates records\"}') end) end,\n']') else null end\nfrom \napp.tbl_aaa_customerorderdata d left join app.tbl_AAA_Orders_existance_temp c\non d.CustomerNumber = c.Kundennummer and d.MaterialNumber = c.ArtikelNummerKunde and d.DeliveryAdressStreet = c.DeliveryAddressStreet\nand d.PurchaseOrder = c.PurchaseOrder and d.Item = c.Item\nwhere d.IsApproved = -1 and d.ApprovalTimestamp >'@{activity('lk_getdate_watermark').output.firstRow.last_modified_date}';\nselect @@ROWCOUNT",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "csvtoazuresqltable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "cp_aaa_customerorderdata_stg_existance",
						"description": "Getting the lastest/incremental  Materialnumber, Customernumber, Delivery address street, item, Purchase order data from app.tbl_aaa_customerorderdata_stg table and also getting the same fields from app.tbl_aaa_customerorderdata table where Isapproved= -1.\n\nLoading the above data into table : dbo.tbl_aaa_Orders_ExistanceCheck in the Rako label db.\n\nsource- Azure sql\nsink-Rako label db.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "lk_getdate_watermark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select cast(CustomerNumber as int) as KundenNummer,MaterialNumber as ArtikelNummerKunde,DeliveryAdressStreet as DeliveryAdressStreet,PurchaseOrder as PurchaseOrder,cast(Item as int) as Item\nfrom app.tbl_aaa_customerorderdata_stg where modifiedTime >'@{activity('lk_getdate_watermark').output.firstRow.last_modified_date}'\nunion\nselect CustomerNumber as KundenNummer,MaterialNumber as ArtikelNummerKunde,DeliveryAdressStreet as DeliveryAdessStreet,PurchaseOrder as PurchaseOrder,Item as Item\nfrom app.tbl_aaa_customerorderdata where ApprovalTimestamp >'@{activity('lk_getdate_watermark').output.firstRow.last_modified_date}' and IsApproved = -1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table dbo.tbl_aaa_Orders_ExistanceCheck",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "csvtoazuresqltable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_rakolabel",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "cp_aaa_customerorderdata_existancecheck",
						"description": "Doing the 2nd level existence check for parameters sent to Rako from dbo.tbl_aaa_Orders_ExistanceCheck, the output of the check is loaded into tbl_AAA_Orders_existance_temp table in Azure sql database.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "cp_aaa_customerorderdata_stg_existance",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": ";with cte as(\r\nselect a.KundenNummer,a.ArtikelNummerKunde,a.DeliveryAdressStreet,a.Item,a.PurchaseOrder,cast(1 as bit) as [is_error],\r\n'Customer Number is not found in ERP System' as error_description\r\nfrom dbo.tbl_aaa_Orders_ExistanceCheck a\r\nleft join dbo.kunden_aaa_bkp b on a.KundenNummer = b.Kundennummer  where b.kundennummer is null\r\nunion\r\nselect a.KundenNummer,a.ArtikelNummerKunde,a.DeliveryAdressStreet, a.Item,a.PurchaseOrder,cast(1 as bit) as [is_error],\r\n'Material Number is not found in ERP System' as error_description\r\nfrom dbo.tbl_aaa_Orders_ExistanceCheck a\r\nleft join dbo.tbltripleaarticleref_aaa_bkp c on c.TripleARef = a.ArtikelNummerKunde and left(c.etikettennummer,4) = a.kundennummer where c.TripleARef is null\r\nunion\r\nselect a.KundenNummer,a.ArtikelNummerKunde,a.DeliveryAdressStreet,a.Item,a.PurchaseOrder,cast(1 as bit) as [is_error],\r\n'Delivery Address Street mismatching with ERP System' as error_description\r\nfrom dbo.tbl_aaa_Orders_ExistanceCheck a\r\nleft join dbo.adressen_aaa_bkp d on d.kundennummer = a.kundennummer and d.IsActive= '-1' and d.Adressart = '1'\r\nwhere (a.DeliveryAdressStreet <> d.Strasse or d.kundennummer is null)\r\nunion\r\nselect distinct a.KundenNummer,a.ArtikelNummerKunde,a.DeliveryAdressStreet,a.Item,a.PurchaseOrder,cast(1 as bit) as [is_error],\r\n'Purchase Order already exists in ERP System' as error_description\r\nfrom dbo.tbl_aaa_Orders_ExistanceCheck a\r\njoin (\r\nSELECT T.Bestellnummer_Kunde,T.BestellnummerPosition,R.ArtikelnummerKunde FROM [RakoLabel].[dbo].[Teilauftraege_aaa_bkp] T\r\nJOIN \r\n[RakoLabel].[dbo].[Rechnungspositionen_aaa_bkp] R\r\nON T.Teilauftragsnummer=R.Teilauftragsnummer\r\n)b on a.PurchaseOrder = b.Bestellnummer_Kunde and a.Item = b.BestellnummerPosition and a.ArtikelNummerKunde = b.ArtikelnummerKunde)\r\n,cte1 as(select KundenNummer,ArtikelNummerKunde,DeliveryAdressStreet,Item,PurchaseOrder,[is_error],\r\nstring_agg(error_description,';') as error_description from cte\r\ngroup by KundenNummer,ArtikelNummerKunde,DeliveryAdressStreet,Item,is_error,PurchaseOrder)\r\nselect \r\n c1.KundenNummer,c1.ArtikelNummerKunde,c1.DeliveryAdressStreet as DeliveryAddressStreet ,c1.Item,c1.PurchaseOrder,is_error,c1.error_description,\r\n (case when c1.error_description like '%Delivery Address%' then strasse else null end) as ERP_DeliveryAddressStreet\r\n from cte1 c1\r\n left join dbo.adressen_aaa_bkp d on d.kundennummer = c1.kundennummer and IsActive= '-1' and Adressart = '1';\r\n select @@ROWCOUNT",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table app.tbl_AAA_Orders_existance_temp",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_rakolabel",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_AAA_Orders_existance",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Year": {
						"type": "string"
					},
					"Month": {
						"type": "string"
					},
					"PipelineStartTime": {
						"type": "string"
					},
					"Week": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Graphicfile/Final Pipeline/Child Pipelines/Child Pipelines Pre-UI/3.Existence check Sanity Level-2"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-07T14:47:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/csvtoazuresqltable')]",
				"[concat(variables('factoryId'), '/pipelines/pl_sanitycheck_2')]",
				"[concat(variables('factoryId'), '/pipelines/pl_adf_master_artworkfile')]",
				"[concat(variables('factoryId'), '/datasets/ds_rakolabel')]",
				"[concat(variables('factoryId'), '/datasets/ds_AAA_Orders_existance')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_childpipeline_source_raw')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach file",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@array(pipeline().parameters.childitems)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Switch1",
									"description": "check the file type and switch and copy the data from source to raw accordingly",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@if(\n contains(string(item().name),'csv'),\n'csv',\nif(\n    contains(string(item().name),'pdf'),\n    'pdf',\n    'xml'\n    )\n  )",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "csv",
												"activities": [
													{
														"name": "Copy csv file",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobFSReadSettings",
																	"recursive": true,
																	"modifiedDatetimeStart": {
																		"value": "@addhours(string(utcnow()),-3)",
																		"type": "Expression"
																	},
																	"modifiedDatetimeEnd": {
																		"value": "@utcnow()",
																		"type": "Expression"
																	},
																	"wildcardFolderPath": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	},
																	"wildcardFileName": {
																		"value": "@item().name",
																		"type": "Expression"
																	},
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "DelimitedTextSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "DelimitedTextWriteSettings",
																	"quoteAllText": true,
																	"fileExtension": ".txt"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "ds_source_triplea_adls",
																"type": "DatasetReference",
																"parameters": {
																	"foldername": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "ds_raw_triplea",
																"type": "DatasetReference",
																"parameters": {
																	"source_folder": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	},
																	"filetype": "csv"
																}
															}
														]
													}
												]
											},
											{
												"value": "pdf",
												"activities": [
													{
														"name": "Copy data pdf",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobFSReadSettings",
																	"recursive": true,
																	"modifiedDatetimeStart": {
																		"value": "@addhours(string(utcnow()),-3)",
																		"type": "Expression"
																	},
																	"modifiedDatetimeEnd": {
																		"value": "@utcnow()",
																		"type": "Expression"
																	},
																	"wildcardFolderPath": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	},
																	"wildcardFileName": {
																		"value": "@item().name",
																		"type": "Expression"
																	},
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "DelimitedTextSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "DelimitedTextWriteSettings",
																	"quoteAllText": true,
																	"fileExtension": ".txt"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "ds_source_triplea_adls",
																"type": "DatasetReference",
																"parameters": {
																	"foldername": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "ds_raw_triplea",
																"type": "DatasetReference",
																"parameters": {
																	"source_folder": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	},
																	"filetype": "pdf"
																}
															}
														]
													}
												]
											},
											{
												"value": "xml",
												"activities": [
													{
														"name": "Copy data xml",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobFSReadSettings",
																	"recursive": true,
																	"modifiedDatetimeStart": {
																		"value": "@addhours(string(utcnow()),-3)",
																		"type": "Expression"
																	},
																	"modifiedDatetimeEnd": {
																		"value": "@utcnow()",
																		"type": "Expression"
																	},
																	"wildcardFolderPath": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	},
																	"wildcardFileName": {
																		"value": "@item().name",
																		"type": "Expression"
																	},
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "DelimitedTextSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "DelimitedTextWriteSettings",
																	"quoteAllText": true,
																	"fileExtension": ".txt"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "ds_source_triplea_adls",
																"type": "DatasetReference",
																"parameters": {
																	"foldername": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "ds_raw_triplea",
																"type": "DatasetReference",
																"parameters": {
																	"source_folder": {
																		"value": "@pipeline().parameters.source_folder_name",
																		"type": "Expression"
																	},
																	"filetype": "xml"
																}
															}
														]
													}
												]
											}
										]
									}
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "filename",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"childitems": {
						"type": "string"
					},
					"source_folder_name": {
						"type": "string"
					}
				},
				"variables": {
					"filename": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Pipeline_source_to_raw"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-28T10:46:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_source_triplea_adls')]",
				"[concat(variables('factoryId'), '/datasets/ds_raw_triplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_copydata_source_to_raw_adls')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup INTO CONTROLTABLE",
						"description": " up into control table -Control_table_TripleA for source folder name which is the customername",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_Triplea",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup INTO CONTROLTABLE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup INTO CONTROLTABLE').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Get Metadata of source",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_source_triplea_adls",
											"type": "DatasetReference",
											"parameters": {
												"foldername": {
													"value": "@item().Customername",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"childItems",
											"lastModified"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Get Metadata of source",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_childpipeline_source_raw",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"childitems": {
												"value": "@activity('Get Metadata of source').output.childItems",
												"type": "Expression"
											},
											"source_folder_name": {
												"value": "@item().Customername",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Pipeline_source_to_raw"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-28T10:46:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_Triplea')]",
				"[concat(variables('factoryId'), '/datasets/ds_source_triplea_adls')]",
				"[concat(variables('factoryId'), '/pipelines/pl_childpipeline_source_raw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_csv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": "2023-05-28T00:00:00Z",
									"wildcardFolderPath": {
										"value": "@pipeline().parameters.source_folder",
										"type": "Expression"
									},
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_raw_triplea",
								"type": "DatasetReference",
								"parameters": {
									"source_folder": {
										"value": "@pipeline().parameters.source_folder",
										"type": "Expression"
									},
									"filetype": {
										"value": "@pipeline().parameters.Filetype",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {
									"Customerfolder": {
										"value": "@concat(pipeline().parameters.source_folder,'/',substring(utcnow(),0,4),'/',substring(utcnow(),5,2),'/','csv','/','Prestage_csvfiles')",
										"type": "Expression"
									},
									"Filename": {
										"value": "@concat(substring(pipeline().parameters.Filename,0,sub(length(pipeline().parameters.Filename),4)),'.csv')\n",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"source_folder": {
						"type": "String"
					},
					"Filetype": {
						"type": "String"
					},
					"Filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "soure_raw_prestage(csv,pdf)"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-29T05:35:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_raw_triplea')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_dynamicemailalertstest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sourcedata",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sinkdataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-17.eastus.logic.azure.com:443/workflows/47a7979e35b946ce9ef8be69cb0c912e/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=Yhf-YLUbiE4RcAx_8Uw-4P1Eaodwhv9vUjUO0Ib3mbw",
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"value": "{\n\"PipelineRunID\":\"@{pipeline().RunId}\",\n\"PipelineName\":\"@{pipeline().Pipeline}\",\n\"FileSystem\":\"@{pipeline().parameters.Filesystem}\",\n\"Folderpath\":\"@{pipeline().parameters.Folderpath}\",\n\"Emailbody\":\"@{pipeline().parameters.Emailbody}\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Filesystem": {
						"type": "string",
						"defaultValue": "sourceforrejectedfiles"
					},
					"Folderpath": {
						"type": "string",
						"defaultValue": "Customer1/2023/May/RejectionsLevel1"
					},
					"Emailbody": {
						"type": "String",
						"defaultValue": "errorfile"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-26T12:38:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sourcedata')]",
				"[concat(variables('factoryId'), '/datasets/ds_sinkdataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_dynamicemailalertstest_forallfiileformats')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Web1",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-17.eastus.logic.azure.com:443/workflows/47a7979e35b946ce9ef8be69cb0c912e/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=Yhf-YLUbiE4RcAx_8Uw-4P1Eaodwhv9vUjUO0Ib3mbw",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "{\n\"PipelineRunID\":\"@{pipeline().RunId}\",\n\"PipelineName\":\"@{pipeline().Pipeline}\",\n\"FileName\":\"@{item().name}\",\n\"FileSystem\":\"@{pipeline().parameters.Filesystem}\",\n\"Folderpath\":\"@{pipeline().parameters.Folderpath}\",\n\"Emailbody\":\"@{pipeline().parameters.Emailbody}\",\n\"SourcePdfFileName\":\"@{pipeline().parameters.SourcePdfFileName}\",\n\"Sourcepdfpath\":\"@{pipeline().parameters.Sourcepdfpath}\"\n}",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_dataset_for_sourcefolder_files",
								"type": "DatasetReference",
								"parameters": {
									"Folderpath": {
										"value": "@pipeline().parameters.Folderpath",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Filesystem": {
						"type": "string",
						"defaultValue": "sourceforrejectedfiles"
					},
					"Folderpath": {
						"type": "string",
						"defaultValue": "Customer1/2023/May/RejectionsLevel1"
					},
					"Emailbody": {
						"type": "String",
						"defaultValue": "errorfile"
					},
					"SourcePdfFileName": {
						"type": "string",
						"defaultValue": "FMCCustomer.pdf"
					},
					"Sourcepdfpath": {
						"type": "string",
						"defaultValue": "Customer1/2023/May"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-29T10:02:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_dataset_for_sourcefolder_files')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_rejected_data_injestion_v1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "fe_rejected_data_injestion",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "lk_tbl_aaa_CustomerOrderData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lk_tbl_aaa_CustomerOrderData').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "cp_rejected_data_injestion",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT [Id]\n      ,[CustomerName]\n      ,[CustomerNumber]\n      ,[MaterialNumber]\n      ,[Application]\n      ,[FileName]\n      ,[filePath]\n      ,[PurchaseOrder]\n      ,[Item]\n      ,[Size]\n      ,[Description]\n      ,[Qty]\n      ,[WindingMethod]\n      ,[UOM]\n      ,[UnitPriceCur]\n      ,[NetAmount]\n      ,[DeliveryDate]\n      ,[VendorNumber]\n      ,[VendorName]\n      ,[VATNumber]\n      ,[OrderAddressName]\n      ,[OrderAddressStreet]\n      ,[OrderAdressPostalCode]\n      ,[OrderAdressCity]\n      ,[OrderAdressCountry]\n      ,[Telephone]\n      ,[VendorEmail]\n      ,[Date]\n      ,[TermsofPayment]\n      ,[ContactPerson]\n      ,[Email]\n      ,[DeliveryAdressName]\n      ,[DeliveryAdressNameAddition]\n      ,[DeliveryAdressStreet]\n      ,[DeliveryAdressPostalCode]\n      ,[DeliveryAdressCity]\n      ,[DeliveryAdressCountry]\n      ,[BillingAdressName]\n      ,[BillingAdressStreet]\n      ,[BillingAdressPostalCode]\n      ,[BillingAdressCity]\n      ,[BillingAdressCountry]\n      ,[BillingE-Mail]\n      ,[BillingcustomerVATNumber]\n      ,[ResidentCountryVATID]\n      ,[HeaderText]\n      ,[SubTotal]\n      ,[TotalAmount]\n      ,[modified_timestamp]\n      ,[FolderHierarchy]\n      ,[KeyColumn]\n      ,[IsErrorDQ]\n      ,[DescriptionDQ]\n   \n      ,[ERPDeliveryAddressStreet]\n      \n      ,[insertedDate]\n      ,[IsApproved]\n      ,[Approver]\n      ,[ApproverComments]\n      ,[ApprovalTimestamp]\n\n FROM [app].[tbl_aaa_CustomerOrderData]\nWHERE IsApproved=0 and FileName='@{item().FileName}' and ApprovalTimestamp between (SELECT last_modified_date FROM app.tbl_watermarktable WHERE table_name ='app.tbl_Order_Creation_Inputs') and '@{pipeline().parameters.pipeline_starttime}'\n    ",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_aaa_CustomerOrderData",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_rejected_data_injestion",
											"type": "DatasetReference",
											"parameters": {
												"Folderpath": {
													"value": "@{item().CustomerName}/@{item().CustomerNumber}/@{pipeline().parameters.Year}/@{pipeline().parameters.Month}/@{pipeline().parameters.Week}/Level-2/",
													"type": "Expression"
												},
												"FileName": {
													"value": "@concat('Rejected-',item().FileName)",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "lk_tbl_aaa_CustomerOrderData",
						"description": "",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "WITH CTE\nAS (\n\tSELECT DISTINCT CustomerNumber\n\t,CustomerName\n\t,FileName FROM [app].[tbl_aaa_CustomerOrderData] WHERE ApprovalTimestamp BETWEEN (\n\t\t\tSELECT last_modified_date\n\t\t\tFROM app.tbl_watermarktable\n\t\t\tWHERE table_name = 'app.tbl_Order_Creation_Inputs'\n\t\t\t) and '@{pipeline().parameters.pipeline_starttime}' and IsApproved=0 \n\t) SELECT CTE.CustomerName\n\t,CTE.CustomerNumber\n\t,CTE.FileName FROM CTE \n\tJOIN [app].[tbl_MainControlTable] MC ON MC.CustomerNumber = CTE.CustomerNumber",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_asql_maincontroltable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Year": {
						"type": "string"
					},
					"Month": {
						"type": "string"
					},
					"week": {
						"type": "string"
					},
					"pipeline_starttime": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Graphicfile/Final Pipeline/Child Pipelines/Child Pipelines Post-UI/Rejected Data Ingestion"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_asql_maincontroltable')]",
				"[concat(variables('factoryId'), '/datasets/ds_aaa_CustomerOrderData')]",
				"[concat(variables('factoryId'), '/datasets/ds_rejected_data_injestion')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_sanitycheck_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lk_tbl_MainControlTable_TriggerTable",
						"description": "Look up into control table -\n[app].[tbl_MainControlTable] for source folder name which is the customername",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select T.Id as TID,T.CustomerName as FolderName,Triggertime,FileName,FileType,IsProcessed,T.CustomerNumber as TCustomerNumber,M.Id as MID,M.CustomerName as CustomerName,M.CustomerNumber as CustomerNumber,CSVColumnMapping,XLSXColumnMapping,PDFMapping,FormRecogniserModelID,ModifiedBy,ModifiedDate,PDFSourceColumns,PDFTargetColumns,CSVTargetColumns,CSVSourceColumns,XLSXSourceColumns,XLSXTargetColumns,FormRecogniserTableName,IsCSVHeaderAvailable,IsXLSXHeaderAvailable from [app].[tbl_TriggerTable] AS T left join [app].[tbl_MainControlTable] AS M on  T.CustomerNumber=M.CustomerNumber where t.Triggertime< '@{pipeline().parameters.PipelineStartTime}' and IsProcessed=1 and FileType='OrderFile' and FirstSanity_IsProcessed=0 and PipelineEndTime is null\n\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_asql_maincontroltable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "fe_MainControlTable",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "lk_tbl_MainControlTable_TriggerTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lk_tbl_MainControlTable_TriggerTable').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "nb_dataquality_1",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/Shared/Data Quality/DQ_AAA_FirstLevel_v3",
										"baseParameters": {
											"CustomerName": {
												"value": "@item().CustomerName",
												"type": "Expression"
											},
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"PipelineRunId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ReportingMonth": {
												"value": "@pipeline().parameters.Month",
												"type": "Expression"
											},
											"ReportingYear": {
												"value": "@pipeline().parameters.Year",
												"type": "Expression"
											},
											"SanityChecklevel": "Firstlevel",
											"week": {
												"value": "@pipeline().parameters.week",
												"type": "Expression"
											},
											"CustomerNumber": {
												"value": "@item().CustomerNumber",
												"type": "Expression"
											},
											"file_name": {
												"value": "@if(\n    endswith(string(item().FileName),'.csv'),\n    replace(item().FileName,'.csv','srccsv.csv'),\nif(\n    endswith(string(item().FileName),'pdf'),\n    replace(item().FileName,'.pdf','srcpdf.csv')\n,\nif(\n    endswith(string(item().FileName),'xml'),\n    replace(item().FileName,'.xml','srcxml.csv')\n,\n    replace(item().FileName,'.xlsx','srcxlsx.csv')\n\n    )\n  )\n  )",
												"type": "Expression"
											},
											"TriggerTableID": {
												"value": "@string(item().TID)  ",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureDatabricks1",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "sp_update_triggertable_sanity",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "nb_dataquality_1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[app].[usp_Triggertable_Sanity_Update]",
										"storedProcedureParameters": {
											"FileName": {
												"value": {
													"value": "@if(\n    endswith(string(item().FileName),'srccsv.csv'),\n    replace(item().FileName,'srccsv.csv','.csv'),\nif(\n    endswith(string(item().FileName),'srcpdf.csv'),\n    replace(item().FileName,'srcpdf.csv','.pdf')\n,\nif(\n    endswith(string(item().FileName),'srcxml.csv'),\n    replace(item().FileName,'srcxml.csv','.xml')\n,\n    replace(item().FileName,'srcxlsx.csv','.xlsx')\n\n    )\n  )\n  )",
													"type": "Expression"
												},
												"type": "String"
											},
											"Pipeline_starttime": {
												"value": {
													"value": "@pipeline().parameters.PipelineStartTime",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_sql_a4ltriplea",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "sp_error_notebook",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "nb_dataquality_1",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[app].[usp_tbl_AuditLogsSanityChecks]",
										"storedProcedureParameters": {
											"BadRecords": {
												"value": null,
												"type": "String"
											},
											"CustomerName": {
												"value": {
													"value": "@item().CustomerName",
													"type": "Expression"
												},
												"type": "String"
											},
											"CustomerNumber": {
												"value": {
													"value": "@item().CustomerNumber",
													"type": "Expression"
												},
												"type": "String"
											},
											"Errors": {
												"value": {
													"value": "@activity('nb_dataquality_1').Error.message\n",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@if(\n    endswith(string(item().FileName),'srccsv.csv'),\n    replace(item().FileName,'srccsv.csv','.csv'),\nif(\n    endswith(string(item().FileName),'srcpdf.csv'),\n    replace(item().FileName,'srcpdf.csv','.pdf')\n,\nif(\n    endswith(string(item().FileName),'srcxml.csv'),\n    replace(item().FileName,'srcxml.csv','.xml')\n,\n    replace(item().FileName,'srcxlsx.csv','.xlsx')\n\n    )\n  )\n  )\n",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileReportingMonth": {
												"value": {
													"value": "@formatDateTime(utcnow(), 'MM')",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileReportingYear": {
												"value": {
													"value": "@formatDateTime(utcnow(), 'yyyy')",
													"type": "Expression"
												},
												"type": "String"
											},
											"GoodRecords": {
												"value": null,
												"type": "String"
											},
											"LogTime": {
												"value": {
													"value": "@activity('nb_dataquality_1').ExecutionEndTime\n",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineRunId": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": "Failed",
												"type": "String"
											},
											"TriggerTableID": {
												"value": {
													"value": "@item().TID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_sql_a4ltriplea",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Year": {
						"type": "string"
					},
					"Month": {
						"type": "string"
					},
					"PipelineStartTime": {
						"type": "string"
					},
					"week": {
						"type": "string"
					}
				},
				"variables": {
					"utcnow": {
						"type": "String"
					},
					"pipeline_starttime": {
						"type": "String"
					},
					"week": {
						"type": "String"
					},
					"time": {
						"type": "String"
					},
					"date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Graphicfile/Final Pipeline/Child Pipelines/Child Pipelines Pre-UI/2.Sanity Level-1"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-07T14:47:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_asql_maincontroltable')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks1')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_a4ltriplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_sanitycheck_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "fe_customernumber",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "lk_tbl_triggertable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lk_tbl_triggertable').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "nb_dataquality_2",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/Shared/Data Quality/DQ_AAA_Secondlevel_v2",
										"baseParameters": {
											"CustomerName": {
												"value": "@item().CustomerName",
												"type": "Expression"
											},
											"SanityChecklevel": "Secondlevel",
											"StartTime": {
												"value": "@pipeline().parameters.PipelineStartTime",
												"type": "Expression"
											},
											"CustomerNumber": {
												"value": "@item().CustomerNumber",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureDatabricks1",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "lk_tbl_triggertable",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT distinct CustomerNumber,CustomerName from [app].[tbl_TriggerTable]  where Triggertime< '@{pipeline().parameters.PipelineStartTime}' and Isprocessed=1 and FirstSanity_IsProcessed=1 and PipelineEndTime is null\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "csvtoazuresqltable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Year": {
						"type": "string"
					},
					"Month": {
						"type": "string"
					},
					"PipelineStartTime": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Graphicfile/Final Pipeline/Child Pipelines/Child Pipelines Pre-UI/3.Existence check Sanity Level-2/Sanitychecks"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-07T14:47:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/csvtoazuresqltable')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Customerfolder": {
						"type": "String"
					},
					"Filename": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Customerfolder",
							"type": "Expression"
						},
						"fileSystem": "prestagetriplea"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Customerfolder": {
						"type": "String"
					},
					"filename": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Customerfolder",
							"type": "Expression"
						},
						"fileSystem": "prestagetriplea"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"body": {
							"type": "object",
							"properties": {
								"analyzeResult": {
									"type": "object",
									"properties": {
										"apiVersion": {
											"type": "string"
										},
										"content": {
											"type": "string"
										},
										"documents": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"boundingRegions": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"pageNumber": {
																	"type": "string"
																},
																"polygon": {
																	"type": "array",
																	"items": {
																		"type": "string"
																	}
																}
															}
														}
													},
													"confidence": {
														"type": "string"
													},
													"docType": {
														"type": "string"
													},
													"fields": {
														"type": "object",
														"properties": {
															"Billing Information": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Contact Person": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Customer name": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Email": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"FMC_table": {
																"type": "object",
																"properties": {
																	"confidence": {
																		"type": "string"
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueArray": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"confidence": {
																					"type": "string"
																				},
																				"type": {
																					"type": "string"
																				},
																				"valueObject": {
																					"type": "object",
																					"properties": {
																						"Delivery Date": {
																							"type": "object",
																							"properties": {
																								"boundingRegions": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"pageNumber": {
																												"type": "string"
																											},
																											"polygon": {
																												"type": "array",
																												"items": {
																													"type": "string"
																												}
																											}
																										}
																									}
																								},
																								"confidence": {
																									"type": "string"
																								},
																								"content": {
																									"type": "string"
																								},
																								"spans": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"length": {
																												"type": "string"
																											},
																											"offset": {
																												"type": "string"
																											}
																										}
																									}
																								},
																								"type": {
																									"type": "string"
																								},
																								"valueString": {
																									"type": "string"
																								}
																							}
																						},
																						"Item": {
																							"type": "object",
																							"properties": {
																								"boundingRegions": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"pageNumber": {
																												"type": "string"
																											},
																											"polygon": {
																												"type": "array",
																												"items": {
																													"type": "string"
																												}
																											}
																										}
																									}
																								},
																								"confidence": {
																									"type": "string"
																								},
																								"content": {
																									"type": "string"
																								},
																								"spans": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"length": {
																												"type": "string"
																											},
																											"offset": {
																												"type": "string"
																											}
																										}
																									}
																								},
																								"type": {
																									"type": "string"
																								},
																								"valueString": {
																									"type": "string"
																								}
																							}
																						},
																						"Material Number / Description": {
																							"type": "object",
																							"properties": {
																								"boundingRegions": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"pageNumber": {
																												"type": "string"
																											},
																											"polygon": {
																												"type": "array",
																												"items": {
																													"type": "string"
																												}
																											}
																										}
																									}
																								},
																								"confidence": {
																									"type": "string"
																								},
																								"content": {
																									"type": "string"
																								},
																								"spans": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"length": {
																												"type": "string"
																											},
																											"offset": {
																												"type": "string"
																											}
																										}
																									}
																								},
																								"type": {
																									"type": "string"
																								},
																								"valueString": {
																									"type": "string"
																								}
																							}
																						},
																						"Net Amount": {
																							"type": "object",
																							"properties": {
																								"boundingRegions": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"pageNumber": {
																												"type": "string"
																											},
																											"polygon": {
																												"type": "array",
																												"items": {
																													"type": "string"
																												}
																											}
																										}
																									}
																								},
																								"confidence": {
																									"type": "string"
																								},
																								"content": {
																									"type": "string"
																								},
																								"spans": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"length": {
																												"type": "string"
																											},
																											"offset": {
																												"type": "string"
																											}
																										}
																									}
																								},
																								"type": {
																									"type": "string"
																								},
																								"valueString": {
																									"type": "string"
																								}
																							}
																						},
																						"Qty": {
																							"type": "object",
																							"properties": {
																								"boundingRegions": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"pageNumber": {
																												"type": "string"
																											},
																											"polygon": {
																												"type": "array",
																												"items": {
																													"type": "string"
																												}
																											}
																										}
																									}
																								},
																								"confidence": {
																									"type": "string"
																								},
																								"content": {
																									"type": "string"
																								},
																								"spans": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"length": {
																												"type": "string"
																											},
																											"offset": {
																												"type": "string"
																											}
																										}
																									}
																								},
																								"type": {
																									"type": "string"
																								},
																								"valueString": {
																									"type": "string"
																								}
																							}
																						},
																						"UOM": {
																							"type": "object",
																							"properties": {
																								"boundingRegions": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"pageNumber": {
																												"type": "string"
																											},
																											"polygon": {
																												"type": "array",
																												"items": {
																													"type": "string"
																												}
																											}
																										}
																									}
																								},
																								"confidence": {
																									"type": "string"
																								},
																								"content": {
																									"type": "string"
																								},
																								"spans": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"length": {
																												"type": "string"
																											},
																											"offset": {
																												"type": "string"
																											}
																										}
																									}
																								},
																								"type": {
																									"type": "string"
																								},
																								"valueString": {
																									"type": "string"
																								}
																							}
																						},
																						"Unit Price/ Cur": {
																							"type": "object",
																							"properties": {
																								"boundingRegions": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"pageNumber": {
																												"type": "string"
																											},
																											"polygon": {
																												"type": "array",
																												"items": {
																													"type": "string"
																												}
																											}
																										}
																									}
																								},
																								"confidence": {
																									"type": "string"
																								},
																								"content": {
																									"type": "string"
																								},
																								"spans": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"length": {
																												"type": "string"
																											},
																											"offset": {
																												"type": "string"
																											}
																										}
																									}
																								},
																								"type": {
																									"type": "string"
																								},
																								"valueString": {
																									"type": "string"
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															},
															"Information Email": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Information- Date": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Information- Terms of Payment": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Purchase Order": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Ship To/ Delivery Address": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Sub Total": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Total Amount": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Vendor Address": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Vendor Name": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Vendor Number": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Vendor Telephone": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Vendor VAT Number": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															}
														}
													},
													"spans": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"length": {
																	"type": "string"
																},
																"offset": {
																	"type": "string"
																}
															}
														}
													}
												}
											}
										},
										"modelId": {
											"type": "string"
										},
										"pages": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"angle": {
														"type": "string"
													},
													"height": {
														"type": "string"
													},
													"kind": {
														"type": "string"
													},
													"lines": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"content": {
																	"type": "string"
																},
																"polygon": {
																	"type": "array",
																	"items": {
																		"type": "string"
																	}
																},
																"spans": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"length": {
																				"type": "string"
																			},
																			"offset": {
																				"type": "string"
																			}
																		}
																	}
																}
															}
														}
													},
													"pageNumber": {
														"type": "string"
													},
													"spans": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"length": {
																	"type": "string"
																},
																"offset": {
																	"type": "string"
																}
															}
														}
													},
													"unit": {
														"type": "string"
													},
													"width": {
														"type": "string"
													},
													"words": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"confidence": {
																	"type": "string"
																},
																"content": {
																	"type": "string"
																},
																"polygon": {
																	"type": "array",
																	"items": {
																		"type": "string"
																	}
																},
																"span": {
																	"type": "object",
																	"properties": {
																		"length": {
																			"type": "string"
																		},
																		"offset": {
																			"type": "string"
																		}
																	}
																}
															}
														}
													}
												}
											}
										},
										"stringIndexType": {
											"type": "string"
										},
										"styles": {
											"type": "array"
										},
										"tables": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"boundingRegions": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"pageNumber": {
																	"type": "string"
																},
																"polygon": {
																	"type": "array",
																	"items": {
																		"type": "string"
																	}
																}
															}
														}
													},
													"cells": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"boundingRegions": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"pageNumber": {
																				"type": "string"
																			},
																			"polygon": {
																				"type": "array",
																				"items": {
																					"type": "string"
																				}
																			}
																		}
																	}
																},
																"columnIndex": {
																	"type": "string"
																},
																"content": {
																	"type": "string"
																},
																"kind": {
																	"type": "string"
																},
																"rowIndex": {
																	"type": "string"
																},
																"spans": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"length": {
																				"type": "string"
																			},
																			"offset": {
																				"type": "string"
																			}
																		}
																	}
																}
															}
														}
													},
													"columnCount": {
														"type": "string"
													},
													"rowCount": {
														"type": "string"
													},
													"spans": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"length": {
																	"type": "string"
																},
																"offset": {
																	"type": "string"
																}
															}
														}
													}
												}
											}
										}
									}
								},
								"createdDateTime": {
									"type": "string"
								},
								"lastUpdatedDateTime": {
									"type": "string"
								},
								"status": {
									"type": "string"
								}
							}
						},
						"headers": {
							"type": "object",
							"properties": {
								"Strict-Transport-Security": {
									"type": "string"
								},
								"apim-request-id": {
									"type": "string"
								},
								"x-envoy-upstream-service-time": {
									"type": "string"
								},
								"Content-Length": {
									"type": "string"
								},
								"Content-Type": {
									"type": "string"
								},
								"Date": {
									"type": "string"
								},
								"x-ms-region": {
									"type": "string"
								},
								"x-content-type-options": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sourcefiles",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Customerfolder": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().Customerfolder",
							"type": "Expression"
						},
						"fileSystem": "rawtriplea"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"body": {
							"type": "object",
							"properties": {
								"analyzeResult": {
									"type": "object",
									"properties": {
										"apiVersion": {
											"type": "string"
										},
										"content": {
											"type": "string"
										},
										"documents": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"boundingRegions": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"pageNumber": {
																	"type": "string"
																},
																"polygon": {
																	"type": "array",
																	"items": {
																		"type": "string"
																	}
																}
															}
														}
													},
													"confidence": {
														"type": "string"
													},
													"docType": {
														"type": "string"
													},
													"fields": {
														"type": "object",
														"properties": {
															"Billing Information": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Contact Person": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Customer name": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Email": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"FMC_table": {
																"type": "object",
																"properties": {
																	"confidence": {
																		"type": "string"
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueArray": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"confidence": {
																					"type": "string"
																				},
																				"type": {
																					"type": "string"
																				},
																				"valueObject": {
																					"type": "object",
																					"properties": {
																						"Delivery Date": {
																							"type": "object",
																							"properties": {
																								"boundingRegions": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"pageNumber": {
																												"type": "string"
																											},
																											"polygon": {
																												"type": "array",
																												"items": {
																													"type": "string"
																												}
																											}
																										}
																									}
																								},
																								"confidence": {
																									"type": "string"
																								},
																								"content": {
																									"type": "string"
																								},
																								"spans": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"length": {
																												"type": "string"
																											},
																											"offset": {
																												"type": "string"
																											}
																										}
																									}
																								},
																								"type": {
																									"type": "string"
																								},
																								"valueString": {
																									"type": "string"
																								}
																							}
																						},
																						"Item": {
																							"type": "object",
																							"properties": {
																								"boundingRegions": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"pageNumber": {
																												"type": "string"
																											},
																											"polygon": {
																												"type": "array",
																												"items": {
																													"type": "string"
																												}
																											}
																										}
																									}
																								},
																								"confidence": {
																									"type": "string"
																								},
																								"content": {
																									"type": "string"
																								},
																								"spans": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"length": {
																												"type": "string"
																											},
																											"offset": {
																												"type": "string"
																											}
																										}
																									}
																								},
																								"type": {
																									"type": "string"
																								},
																								"valueString": {
																									"type": "string"
																								}
																							}
																						},
																						"Material Number / Description": {
																							"type": "object",
																							"properties": {
																								"boundingRegions": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"pageNumber": {
																												"type": "string"
																											},
																											"polygon": {
																												"type": "array",
																												"items": {
																													"type": "string"
																												}
																											}
																										}
																									}
																								},
																								"confidence": {
																									"type": "string"
																								},
																								"content": {
																									"type": "string"
																								},
																								"spans": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"length": {
																												"type": "string"
																											},
																											"offset": {
																												"type": "string"
																											}
																										}
																									}
																								},
																								"type": {
																									"type": "string"
																								},
																								"valueString": {
																									"type": "string"
																								}
																							}
																						},
																						"Net Amount": {
																							"type": "object",
																							"properties": {
																								"boundingRegions": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"pageNumber": {
																												"type": "string"
																											},
																											"polygon": {
																												"type": "array",
																												"items": {
																													"type": "string"
																												}
																											}
																										}
																									}
																								},
																								"confidence": {
																									"type": "string"
																								},
																								"content": {
																									"type": "string"
																								},
																								"spans": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"length": {
																												"type": "string"
																											},
																											"offset": {
																												"type": "string"
																											}
																										}
																									}
																								},
																								"type": {
																									"type": "string"
																								},
																								"valueString": {
																									"type": "string"
																								}
																							}
																						},
																						"Qty": {
																							"type": "object",
																							"properties": {
																								"boundingRegions": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"pageNumber": {
																												"type": "string"
																											},
																											"polygon": {
																												"type": "array",
																												"items": {
																													"type": "string"
																												}
																											}
																										}
																									}
																								},
																								"confidence": {
																									"type": "string"
																								},
																								"content": {
																									"type": "string"
																								},
																								"spans": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"length": {
																												"type": "string"
																											},
																											"offset": {
																												"type": "string"
																											}
																										}
																									}
																								},
																								"type": {
																									"type": "string"
																								},
																								"valueString": {
																									"type": "string"
																								}
																							}
																						},
																						"UOM": {
																							"type": "object",
																							"properties": {
																								"boundingRegions": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"pageNumber": {
																												"type": "string"
																											},
																											"polygon": {
																												"type": "array",
																												"items": {
																													"type": "string"
																												}
																											}
																										}
																									}
																								},
																								"confidence": {
																									"type": "string"
																								},
																								"content": {
																									"type": "string"
																								},
																								"spans": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"length": {
																												"type": "string"
																											},
																											"offset": {
																												"type": "string"
																											}
																										}
																									}
																								},
																								"type": {
																									"type": "string"
																								},
																								"valueString": {
																									"type": "string"
																								}
																							}
																						},
																						"Unit Price/ Cur": {
																							"type": "object",
																							"properties": {
																								"boundingRegions": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"pageNumber": {
																												"type": "string"
																											},
																											"polygon": {
																												"type": "array",
																												"items": {
																													"type": "string"
																												}
																											}
																										}
																									}
																								},
																								"confidence": {
																									"type": "string"
																								},
																								"content": {
																									"type": "string"
																								},
																								"spans": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"length": {
																												"type": "string"
																											},
																											"offset": {
																												"type": "string"
																											}
																										}
																									}
																								},
																								"type": {
																									"type": "string"
																								},
																								"valueString": {
																									"type": "string"
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															},
															"Information Email": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Information- Date": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Information- Terms of Payment": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Purchase Order": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Ship To/ Delivery Address": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Sub Total": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Total Amount": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Vendor Address": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Vendor Name": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Vendor Number": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Vendor Telephone": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Vendor VAT Number": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															}
														}
													},
													"spans": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"length": {
																	"type": "string"
																},
																"offset": {
																	"type": "string"
																}
															}
														}
													}
												}
											}
										},
										"modelId": {
											"type": "string"
										},
										"pages": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"angle": {
														"type": "string"
													},
													"height": {
														"type": "string"
													},
													"kind": {
														"type": "string"
													},
													"lines": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"content": {
																	"type": "string"
																},
																"polygon": {
																	"type": "array",
																	"items": {
																		"type": "string"
																	}
																},
																"spans": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"length": {
																				"type": "string"
																			},
																			"offset": {
																				"type": "string"
																			}
																		}
																	}
																}
															}
														}
													},
													"pageNumber": {
														"type": "string"
													},
													"spans": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"length": {
																	"type": "string"
																},
																"offset": {
																	"type": "string"
																}
															}
														}
													},
													"unit": {
														"type": "string"
													},
													"width": {
														"type": "string"
													},
													"words": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"confidence": {
																	"type": "string"
																},
																"content": {
																	"type": "string"
																},
																"polygon": {
																	"type": "array",
																	"items": {
																		"type": "string"
																	}
																},
																"span": {
																	"type": "object",
																	"properties": {
																		"length": {
																			"type": "string"
																		},
																		"offset": {
																			"type": "string"
																		}
																	}
																}
															}
														}
													}
												}
											}
										},
										"stringIndexType": {
											"type": "string"
										},
										"styles": {
											"type": "array"
										},
										"tables": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"boundingRegions": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"pageNumber": {
																	"type": "string"
																},
																"polygon": {
																	"type": "array",
																	"items": {
																		"type": "string"
																	}
																}
															}
														}
													},
													"cells": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"boundingRegions": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"pageNumber": {
																				"type": "string"
																			},
																			"polygon": {
																				"type": "array",
																				"items": {
																					"type": "string"
																				}
																			}
																		}
																	}
																},
																"columnIndex": {
																	"type": "string"
																},
																"content": {
																	"type": "string"
																},
																"kind": {
																	"type": "string"
																},
																"rowIndex": {
																	"type": "string"
																},
																"spans": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"length": {
																				"type": "string"
																			},
																			"offset": {
																				"type": "string"
																			}
																		}
																	}
																}
															}
														}
													},
													"columnCount": {
														"type": "string"
													},
													"rowCount": {
														"type": "string"
													},
													"spans": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"length": {
																	"type": "string"
																},
																"offset": {
																	"type": "string"
																}
															}
														}
													}
												}
											}
										}
									}
								},
								"createdDateTime": {
									"type": "string"
								},
								"lastUpdatedDateTime": {
									"type": "string"
								},
								"status": {
									"type": "string"
								}
							}
						},
						"headers": {
							"type": "object",
							"properties": {
								"Strict-Transport-Security": {
									"type": "string"
								},
								"apim-request-id": {
									"type": "string"
								},
								"x-envoy-upstream-service-time": {
									"type": "string"
								},
								"Content-Length": {
									"type": "string"
								},
								"Content-Type": {
									"type": "string"
								},
								"Date": {
									"type": "string"
								},
								"x-ms-region": {
									"type": "string"
								},
								"x-content-type-options": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sourcefiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResource1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestService2",
					"type": "LinkedServiceReference",
					"parameters": {
						"url": {
							"value": "@dataset().url",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"url": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestService2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResource12')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestService2",
					"type": "LinkedServiceReference",
					"parameters": {
						"url": {
							"value": "@dataset().url",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"url": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestService2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResource13')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestService2",
					"type": "LinkedServiceReference",
					"parameters": {
						"url": {
							"value": "@dataset().url",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"url": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestService2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResource1311')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestService1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"url": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestService1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResource1312')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestService1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestService1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csvtoazuresqltable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_a4ltriplea",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "testcsvtotable_V1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_a4ltriplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csvtoazuresqltable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_a4ltriplea",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "testcsvtotable_V1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_a4ltriplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_AAA_OrderDetails_temp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_a4ltriplea",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "app",
					"table": "tbl_AAA_Orders_temp"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_a4ltriplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_AAA_OrderDetails_temp1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_a4ltriplea",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "app",
					"table": "tbl_AAA_Orders_temp"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_a4ltriplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_AAA_Orders_existance')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_a4ltriplea",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Kundennummer",
						"type": "varchar"
					},
					{
						"name": "ArtikelNummerKunde",
						"type": "varchar"
					},
					{
						"name": "OrderAddressStreet",
						"type": "varchar"
					},
					{
						"name": "is_error",
						"type": "bit"
					},
					{
						"name": "error_description",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "app",
					"table": "tbl_AAA_Orders_existance_temp"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_a4ltriplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_FMC_PDF_Raw')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Triplea_adls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "RAW",
						"fileSystem": "fmcpdf"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_TripleA_adls')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Triplea_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filepath": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().filepath",
							"type": "Expression"
						},
						"fileSystem": "triplesourcefiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_TripleA_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Triplea_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "String"
					},
					"sinkdir": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().sinkdir",
							"type": "Expression"
						},
						"fileSystem": "tripleaprocessedcsvfiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "customer_name",
						"type": "String"
					},
					{
						"name": "order_number",
						"type": "String"
					},
					{
						"name": "item_number",
						"type": "String"
					},
					{
						"name": "reference",
						"type": "String"
					},
					{
						"name": "orderdate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_TripleA_sink1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Triplea_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "String"
					},
					"sinkdir": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().sinkdir",
							"type": "Expression"
						},
						"fileSystem": "tripleaprocessedcsvfiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "customer_name",
						"type": "String"
					},
					{
						"name": "order_number",
						"type": "String"
					},
					{
						"name": "item_number",
						"type": "String"
					},
					{
						"name": "reference",
						"type": "String"
					},
					{
						"name": "orderdate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_TripleA_sink2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Triplea_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "String"
					},
					"sinkdir": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().sinkdir",
							"type": "Expression"
						},
						"fileSystem": "tripleaprocessedcsvfiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "customer_name",
						"type": "String"
					},
					{
						"name": "order_number",
						"type": "String"
					},
					{
						"name": "item_number",
						"type": "String"
					},
					{
						"name": "reference",
						"type": "String"
					},
					{
						"name": "orderdate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_TripleA_source_files')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Triplea_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filepath_dir": {
						"type": "String"
					},
					"filename": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "triplesourcefiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "customer_name",
						"type": "String"
					},
					{
						"name": "order_number",
						"type": "String"
					},
					{
						"name": "item_number",
						"type": "String"
					},
					{
						"name": "reference",
						"type": "String"
					},
					{
						"name": "orderdate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_TripleA_source_files1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Triplea_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filepath_dir": {
						"type": "String"
					},
					"filename": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "triplesourcefiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "customer_name",
						"type": "String"
					},
					{
						"name": "order_number",
						"type": "String"
					},
					{
						"name": "item_number",
						"type": "String"
					},
					{
						"name": "reference",
						"type": "String"
					},
					{
						"name": "orderdate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_TripleA_source_files2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Triplea_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filepath_dir": {
						"type": "String"
					},
					"filename": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "triplesourcefiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "customer_name",
						"type": "String"
					},
					{
						"name": "order_number",
						"type": "String"
					},
					{
						"name": "item_number",
						"type": "String"
					},
					{
						"name": "reference",
						"type": "String"
					},
					{
						"name": "orderdate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_aaa_CustomerOrderData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_a4ltriplea",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "app",
					"table": "tbl_aaa_CustomerOrderData"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_a4ltriplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_aaa_CustomerOrderData1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_a4ltriplea",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "app",
					"table": "tbl_aaa_CustomerOrderData"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_a4ltriplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adls_prestage_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Customerfolder": {
						"type": "String"
					},
					"Filename": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Customerfolder",
							"type": "Expression"
						},
						"fileSystem": "prestage"
					},
					"columnDelimiter": ",",
					"escapeChar": "/",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adls_prestage_json')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Customerfolder": {
						"type": "String"
					},
					"filename": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Customerfolder",
							"type": "Expression"
						},
						"fileSystem": "prestage"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"body": {
							"type": "object",
							"properties": {
								"analyzeResult": {
									"type": "object",
									"properties": {
										"apiVersion": {
											"type": "string"
										},
										"content": {
											"type": "string"
										},
										"documents": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"boundingRegions": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"pageNumber": {
																	"type": "string"
																},
																"polygon": {
																	"type": "array",
																	"items": {
																		"type": "string"
																	}
																}
															}
														}
													},
													"confidence": {
														"type": "string"
													},
													"docType": {
														"type": "string"
													},
													"fields": {
														"type": "object",
														"properties": {
															"Billing Information": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Contact Person": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Customer name": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Email": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"FMC_table": {
																"type": "object",
																"properties": {
																	"confidence": {
																		"type": "string"
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueArray": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"confidence": {
																					"type": "string"
																				},
																				"type": {
																					"type": "string"
																				},
																				"valueObject": {
																					"type": "object",
																					"properties": {
																						"Delivery Date": {
																							"type": "object",
																							"properties": {
																								"boundingRegions": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"pageNumber": {
																												"type": "string"
																											},
																											"polygon": {
																												"type": "array",
																												"items": {
																													"type": "string"
																												}
																											}
																										}
																									}
																								},
																								"confidence": {
																									"type": "string"
																								},
																								"content": {
																									"type": "string"
																								},
																								"spans": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"length": {
																												"type": "string"
																											},
																											"offset": {
																												"type": "string"
																											}
																										}
																									}
																								},
																								"type": {
																									"type": "string"
																								},
																								"valueString": {
																									"type": "string"
																								}
																							}
																						},
																						"Item": {
																							"type": "object",
																							"properties": {
																								"boundingRegions": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"pageNumber": {
																												"type": "string"
																											},
																											"polygon": {
																												"type": "array",
																												"items": {
																													"type": "string"
																												}
																											}
																										}
																									}
																								},
																								"confidence": {
																									"type": "string"
																								},
																								"content": {
																									"type": "string"
																								},
																								"spans": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"length": {
																												"type": "string"
																											},
																											"offset": {
																												"type": "string"
																											}
																										}
																									}
																								},
																								"type": {
																									"type": "string"
																								},
																								"valueString": {
																									"type": "string"
																								}
																							}
																						},
																						"Material Number / Description": {
																							"type": "object",
																							"properties": {
																								"boundingRegions": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"pageNumber": {
																												"type": "string"
																											},
																											"polygon": {
																												"type": "array",
																												"items": {
																													"type": "string"
																												}
																											}
																										}
																									}
																								},
																								"confidence": {
																									"type": "string"
																								},
																								"content": {
																									"type": "string"
																								},
																								"spans": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"length": {
																												"type": "string"
																											},
																											"offset": {
																												"type": "string"
																											}
																										}
																									}
																								},
																								"type": {
																									"type": "string"
																								},
																								"valueString": {
																									"type": "string"
																								}
																							}
																						},
																						"Net Amount": {
																							"type": "object",
																							"properties": {
																								"boundingRegions": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"pageNumber": {
																												"type": "string"
																											},
																											"polygon": {
																												"type": "array",
																												"items": {
																													"type": "string"
																												}
																											}
																										}
																									}
																								},
																								"confidence": {
																									"type": "string"
																								},
																								"content": {
																									"type": "string"
																								},
																								"spans": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"length": {
																												"type": "string"
																											},
																											"offset": {
																												"type": "string"
																											}
																										}
																									}
																								},
																								"type": {
																									"type": "string"
																								},
																								"valueString": {
																									"type": "string"
																								}
																							}
																						},
																						"Qty": {
																							"type": "object",
																							"properties": {
																								"boundingRegions": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"pageNumber": {
																												"type": "string"
																											},
																											"polygon": {
																												"type": "array",
																												"items": {
																													"type": "string"
																												}
																											}
																										}
																									}
																								},
																								"confidence": {
																									"type": "string"
																								},
																								"content": {
																									"type": "string"
																								},
																								"spans": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"length": {
																												"type": "string"
																											},
																											"offset": {
																												"type": "string"
																											}
																										}
																									}
																								},
																								"type": {
																									"type": "string"
																								},
																								"valueString": {
																									"type": "string"
																								}
																							}
																						},
																						"UOM": {
																							"type": "object",
																							"properties": {
																								"boundingRegions": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"pageNumber": {
																												"type": "string"
																											},
																											"polygon": {
																												"type": "array",
																												"items": {
																													"type": "string"
																												}
																											}
																										}
																									}
																								},
																								"confidence": {
																									"type": "string"
																								},
																								"content": {
																									"type": "string"
																								},
																								"spans": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"length": {
																												"type": "string"
																											},
																											"offset": {
																												"type": "string"
																											}
																										}
																									}
																								},
																								"type": {
																									"type": "string"
																								},
																								"valueString": {
																									"type": "string"
																								}
																							}
																						},
																						"Unit Price/ Cur": {
																							"type": "object",
																							"properties": {
																								"boundingRegions": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"pageNumber": {
																												"type": "string"
																											},
																											"polygon": {
																												"type": "array",
																												"items": {
																													"type": "string"
																												}
																											}
																										}
																									}
																								},
																								"confidence": {
																									"type": "string"
																								},
																								"content": {
																									"type": "string"
																								},
																								"spans": {
																									"type": "array",
																									"items": {
																										"type": "object",
																										"properties": {
																											"length": {
																												"type": "string"
																											},
																											"offset": {
																												"type": "string"
																											}
																										}
																									}
																								},
																								"type": {
																									"type": "string"
																								},
																								"valueString": {
																									"type": "string"
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															},
															"Information Email": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Information- Date": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Information- Terms of Payment": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Purchase Order": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Ship To/ Delivery Address": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Sub Total": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Total Amount": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Vendor Address": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Vendor Name": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Vendor Number": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Vendor Telephone": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															},
															"Vendor VAT Number": {
																"type": "object",
																"properties": {
																	"boundingRegions": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"pageNumber": {
																					"type": "string"
																				},
																				"polygon": {
																					"type": "array",
																					"items": {
																						"type": "string"
																					}
																				}
																			}
																		}
																	},
																	"confidence": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	},
																	"spans": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"length": {
																					"type": "string"
																				},
																				"offset": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": {
																		"type": "string"
																	},
																	"valueString": {
																		"type": "string"
																	}
																}
															}
														}
													},
													"spans": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"length": {
																	"type": "string"
																},
																"offset": {
																	"type": "string"
																}
															}
														}
													}
												}
											}
										},
										"modelId": {
											"type": "string"
										},
										"pages": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"angle": {
														"type": "string"
													},
													"height": {
														"type": "string"
													},
													"kind": {
														"type": "string"
													},
													"lines": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"content": {
																	"type": "string"
																},
																"polygon": {
																	"type": "array",
																	"items": {
																		"type": "string"
																	}
																},
																"spans": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"length": {
																				"type": "string"
																			},
																			"offset": {
																				"type": "string"
																			}
																		}
																	}
																}
															}
														}
													},
													"pageNumber": {
														"type": "string"
													},
													"spans": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"length": {
																	"type": "string"
																},
																"offset": {
																	"type": "string"
																}
															}
														}
													},
													"unit": {
														"type": "string"
													},
													"width": {
														"type": "string"
													},
													"words": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"confidence": {
																	"type": "string"
																},
																"content": {
																	"type": "string"
																},
																"polygon": {
																	"type": "array",
																	"items": {
																		"type": "string"
																	}
																},
																"span": {
																	"type": "object",
																	"properties": {
																		"length": {
																			"type": "string"
																		},
																		"offset": {
																			"type": "string"
																		}
																	}
																}
															}
														}
													}
												}
											}
										},
										"stringIndexType": {
											"type": "string"
										},
										"styles": {
											"type": "array"
										},
										"tables": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"boundingRegions": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"pageNumber": {
																	"type": "string"
																},
																"polygon": {
																	"type": "array",
																	"items": {
																		"type": "string"
																	}
																}
															}
														}
													},
													"cells": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"boundingRegions": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"pageNumber": {
																				"type": "string"
																			},
																			"polygon": {
																				"type": "array",
																				"items": {
																					"type": "string"
																				}
																			}
																		}
																	}
																},
																"columnIndex": {
																	"type": "string"
																},
																"content": {
																	"type": "string"
																},
																"kind": {
																	"type": "string"
																},
																"rowIndex": {
																	"type": "string"
																},
																"spans": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"length": {
																				"type": "string"
																			},
																			"offset": {
																				"type": "string"
																			}
																		}
																	}
																}
															}
														}
													},
													"columnCount": {
														"type": "string"
													},
													"rowCount": {
														"type": "string"
													},
													"spans": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"length": {
																	"type": "string"
																},
																"offset": {
																	"type": "string"
																}
															}
														}
													}
												}
											}
										}
									}
								},
								"createdDateTime": {
									"type": "string"
								},
								"lastUpdatedDateTime": {
									"type": "string"
								},
								"status": {
									"type": "string"
								}
							}
						},
						"headers": {
							"type": "object",
							"properties": {
								"Strict-Transport-Security": {
									"type": "string"
								},
								"apim-request-id": {
									"type": "string"
								},
								"x-envoy-upstream-service-time": {
									"type": "string"
								},
								"Content-Length": {
									"type": "string"
								},
								"Content-Type": {
									"type": "string"
								},
								"Date": {
									"type": "string"
								},
								"x-ms-region": {
									"type": "string"
								},
								"x-content-type-options": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adls_prestage_json_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Customerfolder": {
						"type": "String"
					},
					"Filename": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Customerfolder",
							"type": "Expression"
						},
						"fileSystem": "prestage"
					},
					"columnDelimiter": ",",
					"escapeChar": "/",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adls_raw_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"source_folder": {
						"type": "String"
					},
					"filetype": {
						"type": "String"
					},
					"year": {
						"type": "String"
					},
					"month": {
						"type": "String"
					},
					"Customernumber": {
						"type": "String"
					},
					"week": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat(dataset().source_folder,'/',dataset().Customernumber,'/',dataset().year,'/',dataset().month,'/',dataset().week,'/',dataset().filetype,'/')",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adls_raw_prestage_xlsx')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"source_folder": {
						"type": "String"
					},
					"filetype": {
						"type": "String"
					},
					"year": {
						"type": "String"
					},
					"month": {
						"type": "String"
					},
					"Customernumber": {
						"type": "String"
					},
					"week": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "sheet1",
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat(dataset().source_folder,'/',dataset().Customernumber,'/',dataset().year,'/',dataset().month,'/',dataset().week,'/',dataset().filetype,'/')",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Plant",
						"type": "String"
					},
					{
						"name": "Vendor/supplying plant",
						"type": "String"
					},
					{
						"name": "Purchasing Document",
						"type": "String"
					},
					{
						"name": "Item",
						"type": "String"
					},
					{
						"name": "Material",
						"type": "String"
					},
					{
						"name": "Short Text",
						"type": "String"
					},
					{
						"name": "Order Quantity",
						"type": "String"
					},
					{
						"name": "Order Unit",
						"type": "String"
					},
					{
						"name": "Net price",
						"type": "String"
					},
					{
						"name": "Currency",
						"type": "String"
					},
					{
						"name": "   Per",
						"type": "String"
					},
					{
						"name": "Del. Date",
						"type": "String"
					},
					{
						"name": "Comment",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adls_raw_xlsx')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"source_folder": {
						"type": "string"
					},
					"filetype": {
						"type": "string"
					},
					"year": {
						"type": "String"
					},
					"month": {
						"type": "String"
					},
					"Customernumber": {
						"type": "String"
					},
					"week": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat(dataset().source_folder,'/',dataset().Customernumber,'/',dataset().year,'/',dataset().month,'/',dataset().week,'/',dataset().filetype,'/')",
							"type": "Expression"
						},
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adls_rejections')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderpath": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().folderpath",
							"type": "Expression"
						},
						"fileSystem": "rejections"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adls_source_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"foldername": {
						"type": "String"
					},
					"IsCSVHeaderAvailable": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().foldername",
							"type": "Expression"
						},
						"fileSystem": "source"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": {
						"value": "@bool(dataset().IsCSVHeaderAvailable)",
						"type": "Expression"
					},
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adls_source_xlsx')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"foldername": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().foldername",
							"type": "Expression"
						},
						"fileSystem": "source"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_artwork_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "source"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_artworkfile_raw')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderpath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().folderpath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_asql_ArtworkFileMetadata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_a4ltriplea",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "FileName",
						"type": "varchar"
					},
					{
						"name": "originalFilename",
						"type": "varchar"
					},
					{
						"name": "path",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "app",
					"table": "ArtworkFileMetadata"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_a4ltriplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_asql_ArtworkFileMetadata1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_a4ltriplea",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "FileName",
						"type": "varchar"
					},
					{
						"name": "originalFilename",
						"type": "varchar"
					},
					{
						"name": "path",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "app",
					"table": "ArtworkFileMetadata"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_a4ltriplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_asql_maincontroltable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_a4ltriplea",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_a4ltriplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_c1_order')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Filepath": {
						"type": "String"
					},
					"Filename": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Filepath",
							"type": "Expression"
						},
						"fileSystem": "prestagetriplea"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_c1_order_graphicfile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"graphicfilename": {
						"type": "String"
					},
					"GraphicFilepath": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().graphicfilename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().GraphicFilepath",
							"type": "Expression"
						},
						"fileSystem": "graphicfiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_controlfiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_a4ltriplea",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "File type",
						"type": "varchar"
					},
					{
						"name": "File name",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "control_files"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_a4ltriplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_dataset_for_sourcefolder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sourceforrejectedfiles",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Folderpath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().Folderpath",
							"type": "Expression"
						},
						"fileSystem": "sourceforrejectedfiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "customer_name",
						"type": "String"
					},
					{
						"name": "order_number",
						"type": "String"
					},
					{
						"name": "item_number",
						"type": "String"
					},
					{
						"name": "reference",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sourceforrejectedfiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_dataset_for_sourcefolder_files')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sourceforrejectedfiles",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Folderpath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().Folderpath",
							"type": "Expression"
						},
						"fileSystem": "sourceforrejectedfiles"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sourceforrejectedfiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_keyvaluepair')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_source_triplea",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "keyvalues.csv",
						"folderPath": "Processed/PDF_Order/StageforTableAndKeyValues",
						"fileSystem": "pdfextraction"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Anlieferung",
						"type": "String"
					},
					{
						"name": "Kontrakt",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_source_triplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_keyvaluepair1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_source_triplea",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "keyvalues.csv",
						"folderPath": "Processed/PDF_Order/StageforTableAndKeyValues",
						"fileSystem": "pdfextraction"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Anlieferung",
						"type": "String"
					},
					{
						"name": "Kontrakt",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_source_triplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_maintable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_source_triplea",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Table.csv",
						"folderPath": "Processed/PDF_Order/StageforTableAndKeyValues",
						"fileSystem": "pdfextraction"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "'"
				},
				"schema": [
					{
						"name": "Pos",
						"type": "String"
					},
					{
						"name": "Artikel",
						"type": "String"
					},
					{
						"name": "Bezeichnung",
						"type": "String"
					},
					{
						"name": "Termin",
						"type": "String"
					},
					{
						"name": "Menge",
						"type": "String"
					},
					{
						"name": "ME",
						"type": "String"
					},
					{
						"name": "Preis",
						"type": "String"
					},
					{
						"name": "G-Wert EUR",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_source_triplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_maintable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_source_triplea",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Table.csv",
						"folderPath": "Processed/PDF_Order/StageforTableAndKeyValues",
						"fileSystem": "pdfextraction"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "'"
				},
				"schema": [
					{
						"name": "Pos",
						"type": "String"
					},
					{
						"name": "Artikel",
						"type": "String"
					},
					{
						"name": "Bezeichnung",
						"type": "String"
					},
					{
						"name": "Termin",
						"type": "String"
					},
					{
						"name": "Menge",
						"type": "String"
					},
					{
						"name": "ME",
						"type": "String"
					},
					{
						"name": "Preis",
						"type": "String"
					},
					{
						"name": "G-Wert EUR",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_source_triplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_rakolabel')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_SqlServer",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "tbl_aaa_Orders_ExistanceCheck"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_SqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_rakolabel_input')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_SqlServer",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "tbl_aaa_input_orders"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_SqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_rakolabel_ordercreationinput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_SqlServer",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "tbl_Order_Creation_Input"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_SqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_raw_triplea')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Triplea_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"source_folder": {
						"type": "String"
					},
					"filetype": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat(dataset().source_folder,'/',substring(utcnow(),0,4),'/',substring(utcnow(),5,2),'/',dataset().filetype,'/')",
							"type": "Expression"
						},
						"fileSystem": "rawtriplea"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_rejected_data_injestion')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Folderpath": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Folderpath",
							"type": "Expression"
						},
						"fileSystem": "rejections"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PurchaseOrder",
						"type": "String"
					},
					{
						"name": "VendorNumber",
						"type": "String"
					},
					{
						"name": "VendorName",
						"type": "String"
					},
					{
						"name": "VATNumber",
						"type": "String"
					},
					{
						"name": "OrderAddressName",
						"type": "String"
					},
					{
						"name": "OrderAddressStreet",
						"type": "String"
					},
					{
						"name": "OrderAdressPostalCode",
						"type": "String"
					},
					{
						"name": "OrderAdressCity",
						"type": "String"
					},
					{
						"name": "OrderAdressCountry",
						"type": "String"
					},
					{
						"name": "Telephone",
						"type": "String"
					},
					{
						"name": "VendorEmail",
						"type": "String"
					},
					{
						"name": "Date",
						"type": "String"
					},
					{
						"name": "TermsofPayment",
						"type": "String"
					},
					{
						"name": "ContactPerson",
						"type": "String"
					},
					{
						"name": "Email",
						"type": "String"
					},
					{
						"name": "DeliveryAdressName",
						"type": "String"
					},
					{
						"name": "DeliveryAdressNameAddition",
						"type": "String"
					},
					{
						"name": "DeliveryAdressStreet",
						"type": "String"
					},
					{
						"name": "DeliveryAdressPostalCode",
						"type": "String"
					},
					{
						"name": "DeliveryAdressCity",
						"type": "String"
					},
					{
						"name": "DeliveryAdressCountry",
						"type": "String"
					},
					{
						"name": "BillingAdressName",
						"type": "String"
					},
					{
						"name": "BillingAdressStreet",
						"type": "String"
					},
					{
						"name": "BillingAdressPostalCode",
						"type": "String"
					},
					{
						"name": "BillingAdressCity",
						"type": "String"
					},
					{
						"name": "BillingAdressCountry",
						"type": "String"
					},
					{
						"name": "BillingE-Mail",
						"type": "String"
					},
					{
						"name": "BillingcustomerVATNumber",
						"type": "String"
					},
					{
						"name": "ResidentCountryVATID",
						"type": "String"
					},
					{
						"name": "HeaderText",
						"type": "String"
					},
					{
						"name": "Item",
						"type": "String"
					},
					{
						"name": "MaterialNumber",
						"type": "String"
					},
					{
						"name": "Description",
						"type": "String"
					},
					{
						"name": "Size",
						"type": "String"
					},
					{
						"name": "WindingMethod",
						"type": "String"
					},
					{
						"name": "Qty",
						"type": "String"
					},
					{
						"name": "UOM",
						"type": "String"
					},
					{
						"name": "UnitPriceCur",
						"type": "String"
					},
					{
						"name": "NetAmount",
						"type": "String"
					},
					{
						"name": "DeliveryDate",
						"type": "String"
					},
					{
						"name": "SubTotal",
						"type": "String"
					},
					{
						"name": "TotalAmount",
						"type": "String"
					},
					{
						"name": "IsErrorDQ",
						"type": "String"
					},
					{
						"name": "DescriptionDQ",
						"type": "String"
					},
					{
						"name": "ModifiedTime",
						"type": "String"
					},
					{
						"name": "CustomerNumber",
						"type": "String"
					},
					{
						"name": "FileName",
						"type": "String"
					},
					{
						"name": "Is_processed",
						"type": "String"
					},
					{
						"name": "TriggerTableID",
						"type": "String"
					},
					{
						"name": "KeyColumn",
						"type": "String"
					},
					{
						"name": "ErrorJSON",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_rest_frc1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestService1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"url": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestService1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sinkdata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sinktriplea",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Customer1/2023/May/RejectionsLevel1",
						"fileSystem": "sourceforrejectedfiles"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sinktriplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sinkdataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sourcefiles",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Customer1/2023/May/RejectionsLevel1",
						"fileSystem": "sourceforrejectedfiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sourcefiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_source_triplea_adls')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Triplea_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"foldername": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().foldername",
							"type": "Expression"
						},
						"fileSystem": "sourcesharepoint"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sourceallformatfiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sourcefolder",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "customer1order.csv",
						"folderPath": "customer1",
						"fileSystem": "sourcedata"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sourcefolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sourcedata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sourceforrejectedfiles",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "customer1order.csv",
						"folderPath": "Customer1",
						"fileSystem": "sourcefiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sourceforrejectedfiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_Triplea')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_a4ltriplea",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Control_table_TripleA"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_a4ltriplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_xml_raw')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "String"
					},
					"FolderPath": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Xml",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().FolderPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/getdatalake')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Triplea_adls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "sourceforrejectedfiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "customer_name",
						"type": "String"
					},
					{
						"name": "order_number",
						"type": "String"
					},
					{
						"name": "item_number",
						"type": "String"
					},
					{
						"name": "reference",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage2_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDatabricks1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-6555333378581793.13.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('AzureDatabricks1_accessToken')]"
					},
					"existingClusterId": "[parameters('AzureDatabricks1_properties_typeProperties_existingClusterId')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_Triplea_adls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_Triplea_adls_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('LS_Triplea_adls_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestService1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestService1_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestService2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"url": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestService2_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_SqlServer')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('ls_SqlServer_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sinktriplea')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_sinktriplea_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_sinktriplea_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_source_triplea')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"URL": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_source_triplea_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_source_triplea_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sourcedatapdf')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_sourcedatapdf_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_sourcedatapdf_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sourcefilenames')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_sourcefilenames_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_sourcefilenames_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sourcefiles')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_sourcefiles_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_sourcefiles_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sourcefolder')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_sourcefolder_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_sourcefolder_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sourceforrejectedfiles')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_sourceforrejectedfiles_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_sourceforrejectedfiles_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sql_a4ltriplea')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_sql_a4ltriplea_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/JsonToTable_binderkontraktjson-type42')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This dataflow takes the output from Form Recognizer and extracts the table information to a storage sink.\nThis specifically works with the Form Recognizer Layout API. You can also save the transformations as a flowlet if you would like to reuse the logic in other dataflows. ",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "flatten2"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Filename1 as string",
						"}",
						"source(output(",
						"          body as (analyzeResult as (apiVersion as date, content as string, documents as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, docType as string, fields as ({Billing Information} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Contact Person} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Customer name} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), Email as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), FMC_table as (confidence as boolean, type as string, valueArray as (confidence as boolean, type as string, valueObject as ({Delivery Date} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), Item as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as short, spans as (length as short, offset as short)[], type as string, valueString as short), {Material Number / Description} as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Net Amount} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), Qty as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), UOM as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Unit Price/ Cur} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string)))[]), {Information Email} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Information- Date} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Information- Terms of Payment} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Purchase Order} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as long, spans as (length as short, offset as short)[], type as string, valueString as long), {Ship To/ Delivery Address} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Sub Total} as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Total Amount} as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Vendor Address} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Vendor Name} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Vendor Number} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as integer, spans as (length as short, offset as short)[], type as string, valueString as integer), {Vendor Telephone} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as long, spans as (length as short, offset as short)[], type as string, valueString as long), {Vendor VAT Number} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string)), spans as (length as short, offset as boolean)[])[], modelId as string, pages as (angle as boolean, height as short, kind as string, lines as (content as string, polygon as double[], spans as (length as short, offset as short)[])[], pageNumber as short, spans as (length as short, offset as short)[], unit as string, width as double, words as (confidence as double, content as string, polygon as double[], span as (length as short, offset as short))[])[], stringIndexType as string, styles as string[], tables as (boundingRegions as (pageNumber as short, polygon as double[])[], cells as (boundingRegions as (pageNumber as short, polygon as double[])[], columnIndex as short, content as string, kind as string, rowIndex as short, rowSpan as short, spans as (length as short, offset as short)[])[], columnCount as short, rowCount as short, spans as (length as short, offset as short)[])[]), createdDateTime as timestamp, lastUpdatedDateTime as timestamp, status as string),",
						"          headers as ({Content-Length} as integer, {Content-Type} as string, Date as string, {Strict-Transport-Security} as string, {apim-request-id} as string, {x-content-type-options} as string, {x-envoy-upstream-service-time} as short, {x-ms-region} as string)",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     format: 'json',",
						"     fileSystem: 'fmcpdf',",
						"     folderPath: 'STAGE',",
						"     fileName: 'jsonv3.0.json',",
						"     documentForm: 'singleDocument',",
						"     partitionBy('hash', 1)) ~> source1",
						"source(output(",
						"          body as (analyzeResult as (apiVersion as date, content as string, documents as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, docType as string, fields as ({Billing Information} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Contact Person} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Customer name} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), Email as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), FMC_table as (confidence as boolean, type as string, valueArray as (confidence as boolean, type as string, valueObject as ({Delivery Date} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), Item as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as short, spans as (length as short, offset as short)[], type as string, valueString as short), {Material Number / Description} as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Net Amount} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), Qty as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), UOM as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Unit Price/ Cur} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string)))[]), {Information Email} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Information- Date} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Information- Terms of Payment} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Purchase Order} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as long, spans as (length as short, offset as short)[], type as string, valueString as long), {Ship To/ Delivery Address} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Sub Total} as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Total Amount} as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Vendor Address} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Vendor Name} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Vendor Number} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as integer, spans as (length as short, offset as short)[], type as string, valueString as integer), {Vendor Telephone} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as long, spans as (length as short, offset as short)[], type as string, valueString as long), {Vendor VAT Number} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string)), spans as (length as short, offset as boolean)[])[], modelId as string, pages as (angle as boolean, height as short, kind as string, lines as (content as string, polygon as double[], spans as (length as short, offset as short)[])[], pageNumber as short, spans as (length as short, offset as short)[], unit as string, width as double, words as (confidence as double, content as string, polygon as double[], span as (length as short, offset as short))[])[], stringIndexType as string, styles as string[], tables as (boundingRegions as (pageNumber as short, polygon as double[])[], cells as (boundingRegions as (pageNumber as short, polygon as double[])[], columnIndex as short, content as string, kind as string, rowIndex as short, rowSpan as short, spans as (length as short, offset as short)[])[], columnCount as short, rowCount as short, spans as (length as short, offset as short)[])[]), createdDateTime as timestamp, lastUpdatedDateTime as timestamp, status as string),",
						"          headers as ({Content-Length} as integer, {Content-Type} as string, Date as string, {Strict-Transport-Security} as string, {apim-request-id} as string, {x-content-type-options} as string, {x-envoy-upstream-service-time} as short, {x-ms-region} as string)",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'json',",
						"     fileSystem: 'fmcpdf',",
						"     folderPath: 'STAGE',",
						"     fileName: 'jsonv3.0.json',",
						"     documentForm: 'documentPerLine') ~> source2",
						"source1 foldDown(unroll(body.analyzeResult.documents),",
						"     mapColumn(",
						"          {Billing Information} = body.analyzeResult.documents.fields.{Billing Information}.content,",
						"          {Contact Person} = body.analyzeResult.documents.fields.{Contact Person}.content,",
						"          {Customer Name} = body.analyzeResult.documents.fields.{Customer name}.content,",
						"          Email = body.analyzeResult.documents.fields.Email.content,",
						"          {Information Email} = body.analyzeResult.documents.fields.{Information Email}.content,",
						"          {Information Date} = body.analyzeResult.documents.fields.{Information- Date}.content,",
						"          {Information-Terms of Payment} = body.analyzeResult.documents.fields.{Information- Terms of Payment}.content,",
						"          {Purchase Order} = body.analyzeResult.documents.fields.{Purchase Order}.content,",
						"          {Ship To/ Delivery Addressntent} = body.analyzeResult.documents.fields.{Ship To/ Delivery Address}.content,",
						"          {Sub Total} = body.analyzeResult.documents.fields.{Sub Total}.content,",
						"          {Total Amount} = body.analyzeResult.documents.fields.{Total Amount}.content,",
						"          {Vendor Address} = body.analyzeResult.documents.fields.{Vendor Address}.content,",
						"          {Vendor Name} = body.analyzeResult.documents.fields.{Vendor Name}.content,",
						"          {Vendor Number} = body.analyzeResult.documents.fields.{Vendor Number}.content,",
						"          {Vendor Telephone} = body.analyzeResult.documents.fields.{Vendor Telephone}.content,",
						"          {Vendor VAT Number} = body.analyzeResult.documents.fields.{Vendor VAT Number}.content",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 derive(Lookup = 1,",
						"          File_name = $Filename1) ~> derivedColumn1",
						"source2 foldDown(unroll(body.analyzeResult.documents.fields.FMC_table.valueArray),",
						"     mapColumn(",
						"          Item = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.Item.content,",
						"          {Material Number / Description} = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.{Material Number / Description}.content,",
						"          Qty = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.Qty.content,",
						"          UOM = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.UOM.content,",
						"          {Unit Price/ Cur} = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.{Unit Price/ Cur}.content,",
						"          {Net Amount} = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.{Net Amount}.content,",
						"          {Delivery Date} = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.{Delivery Date}.content",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten2",
						"flatten2 derive(Lookup = 1) ~> derivedColumn2",
						"derivedColumn2, derivedColumn1 lookup(derivedColumn2@Lookup == derivedColumn1@Lookup,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 select(mapColumn(",
						"          Item,",
						"          {Material Number / Description},",
						"          Qty,",
						"          UOM,",
						"          {Unit Price/ Cur},",
						"          {Net Amount},",
						"          {Delivery Date},",
						"          {Billing Information},",
						"          {Contact Person},",
						"          {Customer Name},",
						"          Email,",
						"          {Information Email},",
						"          {Information Date},",
						"          {Information-Terms of Payment},",
						"          {Purchase Order},",
						"          {Ship To/ Delivery Addressntent},",
						"          {Sub Total},",
						"          {Total Amount},",
						"          {Vendor Address},",
						"          {Vendor Name},",
						"          {Vendor Number},",
						"          {Vendor Telephone},",
						"          {Vendor VAT Number},",
						"          Filename = File_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'fmcpdf',",
						"     folderPath: 'PROCESSED',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/JsonToTable_test_1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This dataflow takes the output from Form Recognizer and extracts the table information to a storage sink.\nThis specifically works with the Form Recognizer Layout API. You can also save the transformations as a flowlet if you would like to reuse the logic in other dataflows. ",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_source_triplea",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_source_triplea",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						},
						{
							"linkedService": {
								"referenceName": "ls_source_triplea",
								"type": "LinkedServiceReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "flatten2"
						},
						{
							"name": "filter1"
						},
						{
							"name": "flatten3"
						},
						{
							"name": "filter2"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "select1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "select2"
						},
						{
							"name": "pivot1"
						},
						{
							"name": "filter3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          body as (analyzeResult as (apiVersion as date, content as string, documents as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as boolean, docType as string, fields as (BillingAddress as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueAddress as (city as string, houseNumber as boolean, postalCode as short, road as string, streetAddress as string)), BillingAddressRecipient as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), CustomerAddress as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueAddress as (city as string, houseNumber as string, postalCode as short, road as string, streetAddress as string)), CustomerAddressRecipient as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), CustomerName as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), InvoiceDate as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueDate as date), InvoiceTotal as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueCurrency as (amount as double)), Items as (type as string, valueArray as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueObject as (Amount as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueCurrency as (amount as double)), Date as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueDate as date), Description as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), ProductCode as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as integer, spans as (length as short, offset as short)[], type as string, valueString as integer), Quantity as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as double, spans as (length as short, offset as short)[], type as string, valueNumber as integer), Unit as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), UnitPrice as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueCurrency as (amount as double))))[]), PaymentDetails as (type as string, valueArray as (confidence as double, type as string, valueObject as (IBAN as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), SWIFT as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string)))[]), PaymentTerm as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), ShippingAddress as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueAddress as (city as string, houseNumber as boolean, postalCode as string, road as string, streetAddress as string)), VendorAddress as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueAddress as (city as string, postalCode as string, streetAddress as string)), VendorAddressRecipient as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), VendorName as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), VendorTaxId as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string)), spans as (length as short, offset as boolean)[])[], keyValuePairs as (confidence as double, key as (boundingRegions as (pageNumber as short, polygon as double[])[], content as string, spans as (length as short, offset as short)[]), value as (boundingRegions as (pageNumber as short, polygon as double[])[], content as string, spans as (length as short, offset as short)[]))[], modelId as string, pages as (angle as double, height as double, kind as string, lines as (content as string, polygon as double[], spans as (length as short, offset as short)[])[], pageNumber as short, selectionMarks as (confidence as double, polygon as double[], span as (length as short, offset as short), state as string)[], spans as (length as short, offset as short)[], unit as string, width as double, words as (confidence as double, content as string, polygon as double[], span as (length as short, offset as short))[])[], paragraphs as (boundingRegions as (pageNumber as short, polygon as double[])[], content as string, role as string, spans as (length as short, offset as short)[])[], stringIndexType as string, styles as (confidence as boolean, isHandwritten as boolean, spans as (length as boolean, offset as short)[])[], tables as (boundingRegions as (pageNumber as short, polygon as double[])[], cells as (boundingRegions as (pageNumber as short, polygon as double[])[], columnIndex as short, columnSpan as short, content as string, kind as string, rowIndex as short, spans as (length as short, offset as short)[])[], columnCount as short, rowCount as short, spans as (length as short, offset as short)[])[]), createdDateTime as timestamp, lastUpdatedDateTime as timestamp, status as string),",
						"          headers as ({Content-Length} as integer, {Content-Type} as string, Date as string, {Strict-Transport-Security} as string, {apim-request-id} as string, {x-content-type-options} as string, {x-envoy-upstream-service-time} as short, {x-ms-region} as string)",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     format: 'json',",
						"     fileSystem: 'pdfextraction',",
						"     folderPath: 'Stage/PDF_Order',",
						"     fileName: 'jsonv3.0.json',",
						"     documentForm: 'singleDocument',",
						"     partitionBy('hash', 1)) ~> source1",
						"source1 foldDown(unroll(body.analyzeResult.tables),",
						"     mapColumn(",
						"          cells = body.analyzeResult.tables.cells,",
						"          columns = body.analyzeResult.tables.columnCount,",
						"          rows = body.analyzeResult.tables.rowCount",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"derivedColumn1 aggregate(groupBy(TabNum = tablenumber,",
						"          isHeader,",
						"          rowIndex),",
						"     text = replace(trim(trim(toString(collect(content)), '['),']'),'\"',''),",
						"     partitionBy('hash', 1)) ~> aggregate1",
						"surrogateKey1 foldDown(unroll(cells),",
						"     mapColumn(",
						"          tablenumber = page,",
						"          columnIndex = cells.columnIndex,",
						"          isHeader = cells.kind,",
						"          rowIndex = cells.rowIndex,",
						"          content = cells.content",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten2",
						"flatten1 filter(not(isNull(cells)),",
						"     partitionBy('hash', 1)) ~> filter1",
						"source1 foldDown(unroll(body.analyzeResult.keyValuePairs),",
						"     mapColumn(",
						"          Key = body.analyzeResult.keyValuePairs.key.content,",
						"          Value = body.analyzeResult.keyValuePairs.value.content",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 filter(Key=='Kontrakt'||",
						"Key=='Anlieferung'||",
						"Key=='Datum') ~> filter2",
						"filter1 keyGenerate(output(page as long),",
						"     startAt: 1L,",
						"     stepValue: 1L,",
						"     partitionBy('hash', 1)) ~> surrogateKey1",
						"filter3 select(mapColumn(",
						"          text",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"aggregate1 sort(asc(rowIndex, true),",
						"     partitionBy('hash', 1)) ~> sort1",
						"flatten2 derive(content = concat(\"'\",content,\"'\")) ~> derivedColumn1",
						"filter2 aggregate(groupBy(Key,",
						"          Value),",
						"     count = count(Key),",
						"     partitionBy('hash', 1)) ~> aggregate2",
						"aggregate2 select(mapColumn(",
						"          Key,",
						"          Value",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 pivot(pivotBy(Key),",
						"     {} = first(Value),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> pivot1",
						"sort1 filter(not((TabNum!=1)&&rowIndex==0)) ~> filter3",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'pdfextraction',",
						"     folderPath: 'Processed/PDF_Order/StageforTableAndKeyValues',",
						"     rowDelimiter: '',",
						"     columnDelimiter: '',",
						"     escapeChar: '',",
						"     quoteChar: '',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:['Table.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          text",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1",
						"pivot1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'pdfextraction',",
						"     folderPath: 'Processed/PDF_Order/StageforTableAndKeyValues',",
						"     columnDelimiter: ',',",
						"     escapeChar: '',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['keyvalues.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_source_triplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MergeAndLoadTocsv')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_maintable",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "ds_keyvaluepair",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_source_triplea",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Pos as string,",
						"          Artikel as string,",
						"          Bezeichnung as string,",
						"          Termin as string,",
						"          Menge as string,",
						"          ME as string,",
						"          Preis as string,",
						"          {G-Wert EUR} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          Anlieferung as string,",
						"          Datum as string,",
						"          Kontrakt as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source1 derive(lookupcolumn1 = 1,",
						"     partitionBy('hash', 1)) ~> derivedColumn1",
						"source2 derive(lookupcolumn2 = 1) ~> derivedColumn2",
						"derivedColumn1, derivedColumn2 lookup(lookupcolumn1 == lookupcolumn2,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 select(mapColumn(",
						"          Pos,",
						"          Artikel,",
						"          Bezeichnung,",
						"          Termin,",
						"          Menge,",
						"          ME,",
						"          Preis,",
						"          {G-Wert EUR},",
						"          Anlieferung,",
						"          Kontrakt,",
						"          Datum",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'pdfextraction',",
						"     folderPath: 'Processed/PDF_Order/Finalcsv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['Table.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_maintable')]",
				"[concat(variables('factoryId'), '/datasets/ds_keyvaluepair')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_source_triplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MergeAndLoadTocsv1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_maintable1",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "ds_keyvaluepair1",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_source_triplea",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Pos as string,",
						"          Artikel as string,",
						"          Bezeichnung as string,",
						"          Termin as string,",
						"          Menge as string,",
						"          ME as string,",
						"          Preis as string,",
						"          {G-Wert EUR} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          Anlieferung as string,",
						"          Datum as string,",
						"          Kontrakt as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source1 derive(lookupcolumn1 = 1,",
						"     partitionBy('hash', 1)) ~> derivedColumn1",
						"source2 derive(lookupcolumn2 = 1) ~> derivedColumn2",
						"derivedColumn1, derivedColumn2 lookup(lookupcolumn1 == lookupcolumn2,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 select(mapColumn(",
						"          Pos,",
						"          Artikel,",
						"          Bezeichnung,",
						"          Termin,",
						"          Menge,",
						"          ME,",
						"          Preis,",
						"          {G-Wert EUR},",
						"          Anlieferung,",
						"          Kontrakt,",
						"          Datum",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'pdfextraction',",
						"     folderPath: 'Processed/PDF_Order/Finalcsv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['Table.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_maintable1')]",
				"[concat(variables('factoryId'), '/datasets/ds_keyvaluepair1')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_source_triplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pageno_JsonToTable_dmkfile-type21_copy11')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This dataflow takes the output from Form Recognizer and extracts the table information to a storage sink.\nThis specifically works with the Form Recognizer Layout API. You can also save the transformations as a flowlet if you would like to reuse the logic in other dataflows. ",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          body as (analyzeResult as (apiVersion as date, content as string, documents as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, docType as string, fields as (Datum as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as integer)[], type as string, valueString as string), Dmk_table as (confidence as boolean, type as string, valueArray as (confidence as boolean, type as string, valueObject as (Format as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as integer)[], type as string, valueString as string), Material as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as boolean, content as integer, spans as (length as short, offset as integer)[], type as string, valueString as integer), Nettowert as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as integer)[], type as string, valueString as string), Pos as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as boolean, content as short, spans as (length as short, offset as integer)[], type as string, valueString as short), {Preis/Einh} as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as integer)[], type as string, valueString as string), Zielmenge as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as integer)[], type as string, valueString as string)))[]), Kontraktnummer as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as long, spans as (length as short, offset as integer)[], type as string, valueString as long)), spans as (length as integer, offset as boolean)[])[], modelId as string, pages as (angle as boolean, height as double, kind as string, lines as (content as string, polygon as double[], spans as (length as short, offset as integer)[])[], pageNumber as short, spans as (length as short, offset as integer)[], unit as string, width as double, words as (confidence as double, content as string, polygon as double[], span as (length as short, offset as integer))[])[], stringIndexType as string, styles as string[], tables as (boundingRegions as (pageNumber as short, polygon as double[])[], cells as (boundingRegions as (pageNumber as short, polygon as double[])[], columnIndex as short, columnSpan as short, content as string, kind as string, rowIndex as short, rowSpan as short, spans as (length as short, offset as integer)[])[], columnCount as short, rowCount as short, spans as (length as short, offset as integer)[])[]), createdDateTime as timestamp, lastUpdatedDateTime as timestamp, status as string),",
						"          headers as ({Content-Length} as integer, {Content-Type} as string, Date as string, {Strict-Transport-Security} as string, {apim-request-id} as string, {x-content-type-options} as string, {x-envoy-upstream-service-time} as short, {x-ms-region} as string)",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     format: 'json',",
						"     fileSystem: 'stage',",
						"     folderPath: 'DMK GROUP',",
						"     fileName: 'jsonv3.0.json',",
						"     documentForm: 'singleDocument',",
						"     partitionBy('hash', 1)) ~> source1",
						"source1 foldDown(unroll(body.analyzeResult.documents.fields.Dmk_table.valueArray),",
						"     mapColumn(",
						"          Pos = body.analyzeResult.documents.fields.Dmk_table.valueArray.valueObject.Pos.content,",
						"          Material = body.analyzeResult.documents.fields.Dmk_table.valueArray.valueObject.Material.content,",
						"          Zielmenge = body.analyzeResult.documents.fields.Dmk_table.valueArray.valueObject.Zielmenge.content,",
						"          {Preis/Einh.} = body.analyzeResult.documents.fields.Dmk_table.valueArray.valueObject.{Preis/Einh}.content,",
						"          Nettowert = body.analyzeResult.documents.fields.Dmk_table.valueArray.valueObject.Nettowert.content,",
						"          Format = body.analyzeResult.documents.fields.Dmk_table.valueArray.valueObject.Format.content,",
						"          Datum = body.analyzeResult.documents.fields.Datum.content,",
						"          Kontraktnummer = body.analyzeResult.documents.fields.Kontraktnummer.content,",
						"          PageNumber = body.analyzeResult.documents.fields.Dmk_table.valueArray.valueObject.Format.boundingRegions.pageNumber",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 derive(PageNumber = PageNumber[1]) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'processeda4lpdftocsv',",
						"     folderPath: 'DMK GROUP',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['Table.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     quoteAll: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sequential_csvToSQLdb_Type4_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Sequential-sasurl_extract_pdf_to_csv"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_sql_a4ltriplea",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"parameters{",
						"     CSV_FILENAME as string",
						"}",
						"source(output(",
						"          Item as short,",
						"          {Material Number / Description} as string,",
						"          Qty as string,",
						"          UOM as string,",
						"          {Unit Price/ Cur} as string,",
						"          {Net Amount} as string,",
						"          {Delivery Date} as string,",
						"          {Billing Information} as string,",
						"          {Contact Person} as string,",
						"          {Customer Name} as string,",
						"          Email as string,",
						"          {Information Email} as string,",
						"          {Information Date} as string,",
						"          {Information-Terms of Payment} as string,",
						"          {Purchase Order} as long,",
						"          {Ship To/ Delivery Addressntent} as string,",
						"          {Sub Total} as string,",
						"          {Total Amount} as string,",
						"          {Vendor Address} as string,",
						"          {Vendor Name} as string,",
						"          {Vendor Number} as integer,",
						"          {Vendor Telephone} as long,",
						"          {Vendor VAT Number} as string,",
						"          Filename as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'fmcpdf',",
						"     folderPath: 'PROCESSED',",
						"     fileName: ($CSV_FILENAME),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     multiLineRow: true) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Item as string,",
						"          {Material Number / Description} as string,",
						"          Qty as string,",
						"          UOM as string,",
						"          {Unit Price/ Cur} as string,",
						"          {Net Amount} as string,",
						"          {Delivery Date} as string,",
						"          {Billing Information} as string,",
						"          {Contact Person} as string,",
						"          {Customer Name} as string,",
						"          Email as string,",
						"          {Information Email} as string,",
						"          {Information Date} as string,",
						"          {Information-Terms of Payment} as string,",
						"          {Purchase Order} as string,",
						"          {Ship To/ Delivery Addressntent} as string,",
						"          {Sub Total} as string,",
						"          {Total Amount} as string,",
						"          {Vendor Address} as string,",
						"          {Vendor Name} as string,",
						"          {Vendor Number} as string,",
						"          {Vendor Telephone} as string,",
						"          {Vendor VAT Number} as string,",
						"          Filename as string",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'FMC_PurchaseOrder_4500130257',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Item,",
						"          {Material Number / Description},",
						"          Qty,",
						"          UOM,",
						"          {Unit Price/ Cur},",
						"          {Net Amount},",
						"          {Delivery Date},",
						"          {Billing Information},",
						"          {Contact Person},",
						"          {Customer Name},",
						"          Email,",
						"          {Information Email},",
						"          {Information Date},",
						"          {Information-Terms of Payment},",
						"          {Purchase Order},",
						"          {Ship To/ Delivery Addressntent},",
						"          {Sub Total},",
						"          {Total Amount},",
						"          {Vendor Address},",
						"          {Vendor Name},",
						"          {Vendor Number},",
						"          {Vendor Telephone},",
						"          {Vendor VAT Number},",
						"          Filename",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_a4ltriplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cloned_sequential_stagejsonDataflow2_copy2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Sequential-sasurl_extract_pdf_to_csv"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RestResource12",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"parameters{",
						"     Key as string,",
						"     JSON_FILENAME as string,",
						"     folderpath as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     httpMethod: 'GET',",
						"     timeout: 60,",
						"     requestInterval: 10,",
						"     headers: ['Ocp-Apim-Subscription-Key' -> ($Key)],",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'singleDocument']) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'json',",
						"     fileSystem: 'prestagetriplea',",
						"     folderPath: ($folderpath),",
						"     partitionFileNames:[($JSON_FILENAME)],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestResource12')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csvToSQLdb_Type21')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_sql_a4ltriplea",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Pos as short,",
						"          Material as integer,",
						"          Zielmenge as string,",
						"          {Preis/Einh.} as string,",
						"          Nettowert as string,",
						"          Etikett as string,",
						"          Format as string,",
						"          Datum as string,",
						"          Kontraktnummer as long,",
						"          PageNumber as short",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'processeda4lpdftocsv',",
						"     folderPath: 'DMK GROUP',",
						"     fileName: 'Table.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     multiLineRow: true) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Pos.} as string,",
						"          Material as string,",
						"          Zielmenge as string,",
						"          {Preis/Einh.} as string,",
						"          Nettowert as string,",
						"          Etikett as string,",
						"          Format as string,",
						"          Kontraktnummer as string,",
						"          Datum as string,",
						"          PageNumber as string",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'Rahmenvertrag_DMK_GROUP',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          {Pos.} = Pos,",
						"          Material,",
						"          Zielmenge,",
						"          {Preis/Einh.},",
						"          Nettowert,",
						"          Format,",
						"          Kontraktnummer,",
						"          Datum,",
						"          PageNumber",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_a4ltriplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csvToSQLdb_Type4')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_sql_a4ltriplea",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Item as short,",
						"          {Material Number / Description} as string,",
						"          Qty as string,",
						"          UOM as string,",
						"          {Unit Price/ Cur} as string,",
						"          {Net Amount} as string,",
						"          {Delivery Date} as string,",
						"          {Billing Information} as string,",
						"          {Contact Person} as string,",
						"          {Customer Name} as string,",
						"          Email as string,",
						"          {Information Email} as string,",
						"          {Information Date} as string,",
						"          {Information-Terms of Payment} as string,",
						"          {Purchase Order} as long,",
						"          {Ship To/ Delivery Addressntent} as string,",
						"          {Sub Total} as string,",
						"          {Total Amount} as string,",
						"          {Vendor Address} as string,",
						"          {Vendor Name} as string,",
						"          {Vendor Number} as integer,",
						"          {Vendor Telephone} as long,",
						"          {Vendor VAT Number} as string,",
						"          Filename as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'fmcpdf',",
						"     folderPath: 'PROCESSED',",
						"     fileName: 'part-merged.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     multiLineRow: true) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Item as string,",
						"          {Material Number / Description} as string,",
						"          Qty as string,",
						"          UOM as string,",
						"          {Unit Price/ Cur} as string,",
						"          {Net Amount} as string,",
						"          {Delivery Date} as string,",
						"          {Billing Information} as string,",
						"          {Contact Person} as string,",
						"          {Customer Name} as string,",
						"          Email as string,",
						"          {Information Email} as string,",
						"          {Information Date} as string,",
						"          {Information-Terms of Payment} as string,",
						"          {Purchase Order} as string,",
						"          {Ship To/ Delivery Addressntent} as string,",
						"          {Sub Total} as string,",
						"          {Total Amount} as string,",
						"          {Vendor Address} as string,",
						"          {Vendor Name} as string,",
						"          {Vendor Number} as string,",
						"          {Vendor Telephone} as string,",
						"          {Vendor VAT Number} as string,",
						"          Filename as string",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'FMC_PurchaseOrder_4500130257',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Item,",
						"          {Material Number / Description},",
						"          Qty,",
						"          UOM,",
						"          {Unit Price/ Cur},",
						"          {Net Amount},",
						"          {Delivery Date},",
						"          {Billing Information},",
						"          {Contact Person},",
						"          {Customer Name},",
						"          Email,",
						"          {Information Email},",
						"          {Information Date},",
						"          {Information-Terms of Payment},",
						"          {Purchase Order},",
						"          {Ship To/ Delivery Addressntent},",
						"          {Sub Total},",
						"          {Total Amount},",
						"          {Vendor Address},",
						"          {Vendor Name},",
						"          {Vendor Number},",
						"          {Vendor Telephone},",
						"          {Vendor VAT Number},",
						"          Filename",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_a4ltriplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_csvTosqldb')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_source_triplea",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_sql_a4ltriplea",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Pos as short,",
						"          Artikel as integer,",
						"          Bezeichnung as string,",
						"          Termin as string,",
						"          Menge as double,",
						"          ME as string,",
						"          Preis as string,",
						"          {G-Wert EUR} as string,",
						"          Anlieferung as string,",
						"          Kontrakt as integer",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'pdfextraction',",
						"     folderPath: 'Processed/PDF_Order/Finalcsv',",
						"     fileName: 'Table.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'PDF_ORDER',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_source_triplea')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_a4ltriplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_csvTosqldb1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_source_triplea",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_sql_a4ltriplea",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Pos as short,",
						"          Artikel as integer,",
						"          Bezeichnung as string,",
						"          Termin as string,",
						"          Menge as double,",
						"          ME as string,",
						"          Preis as string,",
						"          {G-Wert EUR} as string,",
						"          Anlieferung as string,",
						"          Kontrakt as integer",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'pdfextraction',",
						"     folderPath: 'Processed/PDF_Order/Finalcsv',",
						"     fileName: 'Table.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'PDF_ORDER',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_source_triplea')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_a4ltriplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/formRecognizer')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This dataflow takes the output from Form Recognizer and extracts the table information to a storage sink.\nThis specifically works with the Form Recognizer Layout API. You can also save the transformations as a flowlet if you would like to reuse the logic in other dataflows. ",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "RestService2",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_source_triplea",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "flatten2"
						},
						{
							"name": "filter1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "rank1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     OutputFolder as string",
						"}",
						"source(output(",
						"          body as (analyzeResult as (pageResults as (page as short, tables as (boundingBox as double[], cells as (boundingBox as double[], columnIndex as short, elements as string[], isHeader as boolean, rowIndex as short, text as string)[], columns as short, rows as short)[])[], readResults as (angle as boolean, height as short, lines as (appearance as (style as (confidence as double, name as string)), boundingBox as double[], text as string, words as (boundingBox as double[], confidence as double, text as string)[])[], page as short, unit as string, width as double)[], version as string), createdDateTime as timestamp, lastUpdatedDateTime as timestamp, status as string),",
						"          headers as [string,string]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     format: 'rest',",
						"     timeout: 30,",
						"     requestInterval: 0,",
						"     httpMethod: 'GET',",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> source1",
						"source1 foldDown(unroll(body.analyzeResult.pageResults.tables),",
						"     mapColumn(",
						"          page = body.analyzeResult.pageResults.page,",
						"          cells = body.analyzeResult.pageResults.tables.cells,",
						"          columns = body.analyzeResult.pageResults.tables.columns,",
						"          rows = body.analyzeResult.pageResults.tables.rows",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten2 aggregate(groupBy(TableNum,",
						"          rowIndex),",
						"     text = replace(trim(trim(toString(collect(text)), '['),']'),'\"','')) ~> aggregate1",
						"rank1 foldDown(unroll(cells),",
						"     mapColumn(",
						"          page,",
						"          TableNum,",
						"          columnIndex = cells.columnIndex,",
						"          isHeader = cells.isHeader,",
						"          rowIndex = cells.rowIndex,",
						"          text = cells.text",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten2",
						"flatten1 filter(not(isNull(cells))) ~> filter1",
						"aggregate1 aggregate(groupBy(tableNum = 'TableNumber'+toString(TableNum)),",
						"     text = replace(reduce(collect(text), '', #acc+#item+'\\n',#result),'\"','')) ~> aggregate2",
						"filter1 rank(asc(page, true),",
						"     asc(cells, true),",
						"     output(TableNum as long)) ~> rank1",
						"aggregate2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {_col0_} as string",
						"     ),",
						"     format: 'delimited',",
						"     fileSystem: ($OutputFolder),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     rowUrlColumn:'tableNum',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     quoteAll: true,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          {_col0_} = text",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestService2')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_source_triplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sequential_JsonToTable_binderkontraktjson-type42_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This dataflow takes the output from Form Recognizer and extracts the table information to a storage sink.\nThis specifically works with the Form Recognizer Layout API. You can also save the transformations as a flowlet if you would like to reuse the logic in other dataflows. ",
				"folder": {
					"name": "Sequential-sasurl_extract_pdf_to_csv"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "flatten2"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Filename1 as string,",
						"     JSON_FILENAME as string,",
						"     CSV_FILENAME as string",
						"}",
						"source(output(",
						"          body as (analyzeResult as (apiVersion as date, content as string, documents as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, docType as string, fields as ({Billing Information} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Contact Person} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Customer name} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), Email as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), FMC_table as (confidence as boolean, type as string, valueArray as (confidence as boolean, type as string, valueObject as ({Delivery Date} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), Item as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as short, spans as (length as short, offset as short)[], type as string, valueString as short), {Material Number / Description} as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Net Amount} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), Qty as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), UOM as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Unit Price/ Cur} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string)))[]), {Information Email} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Information- Date} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Information- Terms of Payment} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Purchase Order} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as long, spans as (length as short, offset as short)[], type as string, valueString as long), {Ship To/ Delivery Address} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Sub Total} as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Total Amount} as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Vendor Address} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Vendor Name} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Vendor Number} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as integer, spans as (length as short, offset as short)[], type as string, valueString as integer), {Vendor Telephone} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as long, spans as (length as short, offset as short)[], type as string, valueString as long), {Vendor VAT Number} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string)), spans as (length as short, offset as boolean)[])[], modelId as string, pages as (angle as boolean, height as short, kind as string, lines as (content as string, polygon as double[], spans as (length as short, offset as short)[])[], pageNumber as short, spans as (length as short, offset as short)[], unit as string, width as double, words as (confidence as double, content as string, polygon as double[], span as (length as short, offset as short))[])[], stringIndexType as string, styles as string[], tables as (boundingRegions as (pageNumber as short, polygon as double[])[], cells as (boundingRegions as (pageNumber as short, polygon as double[])[], columnIndex as short, content as string, kind as string, rowIndex as short, rowSpan as short, spans as (length as short, offset as short)[])[], columnCount as short, rowCount as short, spans as (length as short, offset as short)[])[]), createdDateTime as timestamp, lastUpdatedDateTime as timestamp, status as string),",
						"          headers as ({Content-Length} as integer, {Content-Type} as string, Date as string, {Strict-Transport-Security} as string, {apim-request-id} as string, {x-content-type-options} as string, {x-envoy-upstream-service-time} as short, {x-ms-region} as string)",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     format: 'json',",
						"     fileSystem: 'fmcpdf',",
						"     folderPath: 'STAGE',",
						"     fileName: ($JSON_FILENAME),",
						"     documentForm: 'singleDocument',",
						"     partitionBy('hash', 1)) ~> source1",
						"source(output(",
						"          body as (analyzeResult as (apiVersion as date, content as string, documents as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, docType as string, fields as ({Billing Information} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Contact Person} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Customer name} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), Email as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), FMC_table as (confidence as boolean, type as string, valueArray as (confidence as boolean, type as string, valueObject as ({Delivery Date} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), Item as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as short, spans as (length as short, offset as short)[], type as string, valueString as short), {Material Number / Description} as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Net Amount} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), Qty as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), UOM as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Unit Price/ Cur} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as boolean, content as string, spans as (length as short, offset as short)[], type as string, valueString as string)))[]), {Information Email} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Information- Date} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Information- Terms of Payment} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Purchase Order} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as long, spans as (length as short, offset as short)[], type as string, valueString as long), {Ship To/ Delivery Address} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Sub Total} as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Total Amount} as (boundingRegions as (pageNumber as short, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Vendor Address} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Vendor Name} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string), {Vendor Number} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as integer, spans as (length as short, offset as short)[], type as string, valueString as integer), {Vendor Telephone} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as long, spans as (length as short, offset as short)[], type as string, valueString as long), {Vendor VAT Number} as (boundingRegions as (pageNumber as boolean, polygon as double[])[], confidence as double, content as string, spans as (length as short, offset as short)[], type as string, valueString as string)), spans as (length as short, offset as boolean)[])[], modelId as string, pages as (angle as boolean, height as short, kind as string, lines as (content as string, polygon as double[], spans as (length as short, offset as short)[])[], pageNumber as short, spans as (length as short, offset as short)[], unit as string, width as double, words as (confidence as double, content as string, polygon as double[], span as (length as short, offset as short))[])[], stringIndexType as string, styles as string[], tables as (boundingRegions as (pageNumber as short, polygon as double[])[], cells as (boundingRegions as (pageNumber as short, polygon as double[])[], columnIndex as short, content as string, kind as string, rowIndex as short, rowSpan as short, spans as (length as short, offset as short)[])[], columnCount as short, rowCount as short, spans as (length as short, offset as short)[])[]), createdDateTime as timestamp, lastUpdatedDateTime as timestamp, status as string),",
						"          headers as ({Content-Length} as integer, {Content-Type} as string, Date as string, {Strict-Transport-Security} as string, {apim-request-id} as string, {x-content-type-options} as string, {x-envoy-upstream-service-time} as short, {x-ms-region} as string)",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'json',",
						"     fileSystem: 'fmcpdf',",
						"     folderPath: 'STAGE',",
						"     fileName: ($JSON_FILENAME),",
						"     documentForm: 'documentPerLine') ~> source2",
						"source1 foldDown(unroll(body.analyzeResult.documents),",
						"     mapColumn(",
						"          {Billing Information} = body.analyzeResult.documents.fields.{Billing Information}.content,",
						"          {Contact Person} = body.analyzeResult.documents.fields.{Contact Person}.content,",
						"          {Customer Name} = body.analyzeResult.documents.fields.{Customer name}.content,",
						"          Email = body.analyzeResult.documents.fields.Email.content,",
						"          {Information Email} = body.analyzeResult.documents.fields.{Information Email}.content,",
						"          {Information Date} = body.analyzeResult.documents.fields.{Information- Date}.content,",
						"          {Information-Terms of Payment} = body.analyzeResult.documents.fields.{Information- Terms of Payment}.content,",
						"          {Purchase Order} = body.analyzeResult.documents.fields.{Purchase Order}.content,",
						"          {Ship To/ Delivery Addressntent} = body.analyzeResult.documents.fields.{Ship To/ Delivery Address}.content,",
						"          {Sub Total} = body.analyzeResult.documents.fields.{Sub Total}.content,",
						"          {Total Amount} = body.analyzeResult.documents.fields.{Total Amount}.content,",
						"          {Vendor Address} = body.analyzeResult.documents.fields.{Vendor Address}.content,",
						"          {Vendor Name} = body.analyzeResult.documents.fields.{Vendor Name}.content,",
						"          {Vendor Number} = body.analyzeResult.documents.fields.{Vendor Number}.content,",
						"          {Vendor Telephone} = body.analyzeResult.documents.fields.{Vendor Telephone}.content,",
						"          {Vendor VAT Number} = body.analyzeResult.documents.fields.{Vendor VAT Number}.content",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 derive(Lookup = 1,",
						"          File_name = $Filename1) ~> derivedColumn1",
						"source2 foldDown(unroll(body.analyzeResult.documents.fields.FMC_table.valueArray),",
						"     mapColumn(",
						"          Item = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.Item.content,",
						"          {Material Number / Description} = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.{Material Number / Description}.content,",
						"          Qty = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.Qty.content,",
						"          UOM = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.UOM.content,",
						"          {Unit Price/ Cur} = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.{Unit Price/ Cur}.content,",
						"          {Net Amount} = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.{Net Amount}.content,",
						"          {Delivery Date} = body.analyzeResult.documents.fields.FMC_table.valueArray.valueObject.{Delivery Date}.content",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten2",
						"flatten2 derive(Lookup = 1) ~> derivedColumn2",
						"derivedColumn2, derivedColumn1 lookup(derivedColumn2@Lookup == derivedColumn1@Lookup,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 select(mapColumn(",
						"          Item,",
						"          {Material Number / Description},",
						"          Qty,",
						"          UOM,",
						"          {Unit Price/ Cur},",
						"          {Net Amount},",
						"          {Delivery Date},",
						"          {Billing Information},",
						"          {Contact Person},",
						"          {Customer Name},",
						"          Email,",
						"          {Information Email},",
						"          {Information Date},",
						"          {Information-Terms of Payment},",
						"          {Purchase Order},",
						"          {Ship To/ Delivery Addressntent},",
						"          {Sub Total},",
						"          {Total Amount},",
						"          {Vendor Address},",
						"          {Vendor Name},",
						"          {Vendor Number},",
						"          {Vendor Telephone},",
						"          {Vendor VAT Number},",
						"          Filename = File_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'fmcpdf',",
						"     folderPath: 'PROCESSED',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:[($CSV_FILENAME)],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sequential_stagejsonDataflow2_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Sequential-sasurl_extract_pdf_to_csv"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RestResource12",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"parameters{",
						"     Key as string,",
						"     JSON_FILENAME as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     httpMethod: 'GET',",
						"     timeout: 60,",
						"     requestInterval: 10,",
						"     headers: ['Ocp-Apim-Subscription-Key' -> ($Key)],",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'singleDocument']) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'json',",
						"     fileSystem: 'fmcpdf',",
						"     folderPath: 'STAGE',",
						"     partitionFileNames:[($JSON_FILENAME)],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestResource12')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stagejsonDataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RestResource1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_source_triplea",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"parameters{",
						"     Key as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     httpMethod: 'GET',",
						"     timeout: 60,",
						"     requestInterval: 10,",
						"     headers: ['Ocp-Apim-Subscription-Key' -> ($Key)],",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'singleDocument']) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'json',",
						"     fileSystem: 'pdfextraction',",
						"     folderPath: 'Stage/PDF_Order',",
						"     partitionFileNames:['jsonv3.0.json'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestResource1')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_source_triplea')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stagejsonDataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RestResource12",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"parameters{",
						"     Key as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     httpMethod: 'GET',",
						"     timeout: 60,",
						"     requestInterval: 10,",
						"     headers: ['Ocp-Apim-Subscription-Key' -> ($Key)],",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'singleDocument']) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'json',",
						"     fileSystem: 'fmcpdf',",
						"     folderPath: 'STAGE',",
						"     partitionFileNames:['jsonv3.0.json'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestResource12')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stagejsonDataflow311')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RestResource1311",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_Triplea_adls",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"parameters{",
						"     Key as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     httpMethod: 'GET',",
						"     timeout: 137,",
						"     requestInterval: 100,",
						"     headers: ['Ocp-Apim-Subscription-Key' -> ($Key)],",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'singleDocument']) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'json',",
						"     fileSystem: 'stage',",
						"     folderPath: 'DMK GROUP',",
						"     partitionFileNames:['jsonv3.0.json'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestResource1311')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_Triplea_adls')]"
			]
		}
	]
}